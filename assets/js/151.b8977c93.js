(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{609:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第四章、程序计数器-pc寄存器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章、程序计数器-pc寄存器"}},[t._v("#")]),t._v(" 第四章、程序计数器(PC寄存器)")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#介绍"}},[t._v("介绍")])]),s("li",[s("a",{attrs:{href:"#举例说明"}},[t._v("举例说明")])]),s("li",[s("a",{attrs:{href:"#两个常见问题"}},[t._v("两个常见问题")]),s("ul",[s("li",[s("a",{attrs:{href:"#问题1"}},[t._v("问题1")])]),s("li",[s("a",{attrs:{href:"#问题2"}},[t._v("问题2")])])])]),s("li",[s("a",{attrs:{href:"#cpu时间片"}},[t._v("CPU时间片")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[t._v("JVM中的程序计数寄存器（Program Counter Register）中，Register的命名源于CPU的寄存器，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。"),s("mark",[t._v("JVM中的PC寄存器是对物理PC寄存器的一种抽象模拟")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-a453b342cd2502db80ae820875cc79f6.png",alt:"image"}})]),t._v(" "),s("p",[s("strong",[t._v("作用")])]),t._v(" "),s("p",[t._v("PC寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-7ef8c5613f4e93925d2a61571eb194a1.png",alt:"image"}})]),t._v(" "),s("p",[t._v("它是一块很小的内存空间，几乎可以忽略不记。也是"),s("mark",[t._v("运行速度最快的存储区域")]),t._v("。")]),t._v(" "),s("p",[t._v("在JVM规范中，"),s("mark",[t._v("每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致")]),t._v("。")]),t._v(" "),s("p",[s("mark",[t._v("任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法")]),t._v("。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值（undefined）。")]),t._v(" "),s("p",[t._v("它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。")]),t._v(" "),s("p",[t._v("字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。")]),t._v(" "),s("p",[t._v("它是唯一一个在Java虚拟机规范中没有规定任何OutofMemoryError情况的区域。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-dabfdf2a4f819d63a5def1253db83041.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-4d4313b1d4323876ef2abd13e57d6719.png",alt:"image"}})]),t._v(" "),s("p",[t._v("没有GC的数据区：")]),t._v(" "),s("ol",[s("li",[t._v("Stack Area 栈")]),t._v(" "),s("li",[t._v("PC寄存器")])]),t._v(" "),s("p",[t._v("不会报OOM的数据区")]),t._v(" "),s("ol",[s("li",[t._v("PC寄存器")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-f140698496dab3b94012af77c349e481.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"举例说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例说明"}},[t._v("#")]),t._v(" 举例说明")]),t._v(" "),s("p",[s("strong",[t._v("举例说明")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("minus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    intc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    intd "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码文件：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": iconst_3\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(": istore_1\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(": iconst_4\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(": istore_2\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(": iload_1\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(": iload_2\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(": isub\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(": ireturn\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-88df69c2585442428891be309726eec7.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"两个常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两个常见问题"}},[t._v("#")]),t._v(" 两个常见问题")]),t._v(" "),s("h3",{attrs:{id:"问题1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题1"}},[t._v("#")]),t._v(" 问题1")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-cc317357f80fb1468140ad86d18c06aa.png",alt:"image"}})]),t._v(" "),s("p",[t._v("因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。")]),t._v(" "),s("p",[t._v("JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。")]),t._v(" "),s("h3",{attrs:{id:"问题2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题2"}},[t._v("#")]),t._v(" 问题2")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-638f32093f0166a1df4a91d52041df7f.png",alt:"image"}})]),t._v(" "),s("p",[t._v("我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？"),s("mark",[t._v("为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器")]),t._v("，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。")]),t._v(" "),s("p",[t._v("由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。")]),t._v(" "),s("p",[t._v("这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。")]),t._v(" "),s("p",[s("strong",[t._v("CPU时间片")])]),t._v(" "),s("p",[t._v("CPU时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片。")]),t._v(" "),s("p",[t._v("在宏观上：俄们可以同时打开多个应用程序，每个程序并行不悖，同时运行。")]),t._v(" "),s("p",[t._v("但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。")]),t._v(" "),s("h2",{attrs:{id:"cpu时间片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu时间片"}},[t._v("#")]),t._v(" CPU时间片")]),t._v(" "),s("p",[t._v("垃圾回收期的并行和串行，指的是回收线程的并行，并发是指用户线程和回收线程一起执行，不会出现STW")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-34a8b74760f74171f7a3e89e4912ddc3.png",alt:"image"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);