(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{608:function(a,t,s){"use strict";s.r(t);var v=s(14),e=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"第二章、类加载子系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二章、类加载子系统"}},[a._v("#")]),a._v(" 第二章、类加载子系统")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#内存结构概述"}},[a._v("内存结构概述")])]),s("li",[s("a",{attrs:{href:"#类加载器和类加载过程"}},[a._v("类加载器和类加载过程")]),s("ul",[s("li",[s("a",{attrs:{href:"#反编译后的常量池"}},[a._v("反编译后的常量池")])]),s("li",[s("a",{attrs:{href:"#类加载器classloader扮演的角色"}},[a._v("类加载器ClassLoader扮演的角色")])]),s("li",[s("a",{attrs:{href:"#类加载过程"}},[a._v("类加载过程")])])])]),s("li",[s("a",{attrs:{href:"#加载-loading"}},[a._v("加载(Loading)")])]),s("li",[s("a",{attrs:{href:"#链接-linking"}},[a._v("链接(Linking)")]),s("ul",[s("li",[s("a",{attrs:{href:"#验证verify"}},[a._v("验证Verify")])]),s("li",[s("a",{attrs:{href:"#准备prepare"}},[a._v("准备Prepare")])]),s("li",[s("a",{attrs:{href:"#解析resolve"}},[a._v("解析Resolve")])])])]),s("li",[s("a",{attrs:{href:"#初始化initialization"}},[a._v("初始化Initialization")]),s("ul",[s("li",[s("a",{attrs:{href:"#举例1-简单"}},[a._v("举例1-简单")])]),s("li",[s("a",{attrs:{href:"#举例2-复杂"}},[a._v("举例2-复杂")])]),s("li",[s("a",{attrs:{href:"#举例3-顺序"}},[a._v("举例3-顺序")])]),s("li",[s("a",{attrs:{href:"#注意-不能前向引用"}},[a._v("注意:不能前向引用")])]),s("li",[s("a",{attrs:{href:"#类构造器"}},[a._v("类构造器")])]),s("li",[s("a",{attrs:{href:"#加载顺序-子类在加载之前-先保证父类的加载"}},[a._v("加载顺序 子类在加载之前，先保证父类的加载")])])])]),s("li",[s("a",{attrs:{href:"#类加载器分类"}},[a._v("类加载器分类")]),s("ul",[s("li",[s("a",{attrs:{href:"#虚拟机自带的加载器"}},[a._v("虚拟机自带的加载器")])]),s("li",[s("a",{attrs:{href:"#_2-3-2-用户自定义类加载器"}},[a._v("2.3.2. 用户自定义类加载器")])]),s("li",[s("a",{attrs:{href:"#举例-启动类加载器"}},[a._v("举例-启动类加载器")])]),s("li",[s("a",{attrs:{href:"#举例-扩展类加载器"}},[a._v("举例-扩展类加载器")])])])]),s("li",[s("a",{attrs:{href:"#classloader"}},[a._v("ClassLoader")])]),s("li",[s("a",{attrs:{href:"#双亲委派机制"}},[a._v("双亲委派机制")]),s("ul",[s("li",[s("a",{attrs:{href:"#什么是双亲委派机制"}},[a._v("什么是双亲委派机制？")])]),s("li",[s("a",{attrs:{href:"#工作原理"}},[a._v("工作原理")])]),s("li",[s("a",{attrs:{href:"#举例-string"}},[a._v("举例-String")])]),s("li",[s("a",{attrs:{href:"#优势"}},[a._v("优势")]),s("ul",[s("li",[s("a",{attrs:{href:"#举例-保护系统"}},[a._v("举例 保护系统")])]),s("li",[s("a",{attrs:{href:"#沙箱安全机制"}},[a._v("沙箱安全机制")])])])])])]),s("li",[s("a",{attrs:{href:"#其他"}},[a._v("其他")]),s("ul",[s("li",[s("a",{attrs:{href:"#类class相同的条件"}},[a._v("类Class相同的条件")])]),s("li",[s("a",{attrs:{href:"#一个类到另外一个类的引用。两者的类加载器需要一样"}},[a._v("一个类到另外一个类的引用。两者的类加载器需要一样")])]),s("li",[s("a",{attrs:{href:"#主动使用和被动使用"}},[a._v("主动使用和被动使用")])])])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"内存结构概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存结构概述"}},[a._v("#")]),a._v(" 内存结构概述")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-dfaa6fbb50eaf3377cdb10d8c1656e00.png",alt:"image"}})]),a._v(" "),s("ul",[s("li",[a._v("Class文件")]),a._v(" "),s("li",[s("mark",[a._v("类加载子系统")])]),a._v(" "),s("li",[a._v("运行时数据区\n"),s("ul",[s("li",[a._v("方法区")]),a._v(" "),s("li",[a._v("堆")]),a._v(" "),s("li",[a._v("程序计数器")]),a._v(" "),s("li",[a._v("虚拟机栈")]),a._v(" "),s("li",[a._v("本地方法栈")])])]),a._v(" "),s("li",[a._v("执行引擎")]),a._v(" "),s("li",[a._v("本地方法接口")]),a._v(" "),s("li",[a._v("本地方法库")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-09-d5b3896a485664f3749779daa78424ff.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-3505d0448c17eea52665c6f5f2a71806.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"类加载器和类加载过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器和类加载过程"}},[a._v("#")]),a._v(" 类加载器和类加载过程")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-8d711718f5329837e107ea6e944468f1.png",alt:"image"}})]),a._v(" "),s("ul",[s("li",[a._v("类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。")]),a._v(" "),s("li",[a._v("ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。")]),a._v(" "),s("li",[a._v("加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）")])]),a._v(" "),s("h3",{attrs:{id:"反编译后的常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反编译后的常量池"}},[a._v("#")]),a._v(" 反编译后的常量池")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-6f133287491c5248e48e60320d0e61fd.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"类加载器classloader扮演的角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器classloader扮演的角色"}},[a._v("#")]),a._v(" 类加载器ClassLoader扮演的角色")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-22b593b502e832600fdff00c60464c75.png",alt:"image"}})]),a._v(" "),s("ul",[s("li",[a._v("class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。")]),a._v(" "),s("li",[a._v("class file加载到JVM中，被称为DNA元数据模板，放在方法区。")]),a._v(" "),s("li",[a._v("在.class文件->JVM->最终成为元数据模板，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色。")])]),a._v(" "),s("h3",{attrs:{id:"类加载过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[a._v("#")]),a._v(" 类加载过程")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-4226feb63f7286a072c1a091ed6d6f08.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-d22108a7c441abf16c82fc4f82d8ad59.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"加载-loading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载-loading"}},[a._v("#")]),a._v(" 加载(Loading)")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-f3613061e2894a89a139ad02c1e2c187.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-bd5f18c9587c55ebc9522cea44639489.png",alt:"image"}})]),a._v(" "),s("ul",[s("li",[s("ol",[s("li",[a._v("通过一个类的全限定名获取定义此类的二进制字节流")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"2"}},[s("li",[a._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构")])])]),a._v(" "),s("li",[s("ol",{attrs:{start:"3"}},[s("li",[a._v("在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口")])])])]),a._v(" "),s("p",[s("strong",[a._v("补充：加载class文件的方式")])]),a._v(" "),s("ul",[s("li",[a._v("从"),s("mark",[a._v("本地系统")]),a._v("中直接加载")]),a._v(" "),s("li",[a._v("通过"),s("mark",[a._v("网络")]),a._v("获取，典型场景：Web Applet")]),a._v(" "),s("li",[a._v("从zip"),s("mark",[a._v("压缩包")]),a._v("中读取，成为日后jar、war格式的基础")]),a._v(" "),s("li",[a._v("运行时计算生成，使用最多的是："),s("mark",[a._v("动态代理技术")])]),a._v(" "),s("li",[a._v("由其他文件生成，典型场景："),s("mark",[a._v("JSP应用")])]),a._v(" "),s("li",[a._v("从专有"),s("mark",[a._v("数据库")]),a._v("中提取.class文件，比较少见")]),a._v(" "),s("li",[a._v("从"),s("mark",[a._v("加密文件")]),a._v("中获取，典型的防Class文件被反编译的保护措施")])]),a._v(" "),s("h2",{attrs:{id:"链接-linking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接-linking"}},[a._v("#")]),a._v(" 链接(Linking)")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-6f358e1875ac795e6250c81b1c01c826.png",alt:"image"}})]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("验证（Verify）")]),a._v("：\n"),s("ul",[s("li",[a._v("目的在子确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。")]),a._v(" "),s("li",[a._v("主要包括四种验证，"),s("mark",[a._v("文件格式验证，元数据验证，字节码验证，符号引用验证。")])])])]),a._v(" "),s("li",[s("strong",[a._v("准备（Prepare）")]),a._v("：\n"),s("ul",[s("li",[a._v("为类变量分配内存并且设置该类变量的默认初始值，即零值。")]),a._v(" "),s("li",[s("mark",[a._v("这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化；")])]),a._v(" "),s("li",[s("mark",[a._v("这里不会为实例变量分配初始化")]),a._v("，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。")])])]),a._v(" "),s("li",[s("strong",[a._v("解析（Resolve）")]),a._v("：\n"),s("ul",[s("li",[a._v("将常量池内的"),s("mark",[a._v("符号引用转换为直接引用")]),a._v("的过程。")]),a._v(" "),s("li",[a._v("事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。")]),a._v(" "),s("li",[a._v("符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。")]),a._v(" "),s("li",[a._v("解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info，CONSTANT_Fieldref_info、CONSTANT_Methodref_info等。")])])])]),a._v(" "),s("h3",{attrs:{id:"验证verify"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证verify"}},[a._v("#")]),a._v(" 验证Verify")]),a._v(" "),s("h3",{attrs:{id:"准备prepare"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备prepare"}},[a._v("#")]),a._v(" 准备Prepare")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-9256bdab3fa10a2c2cc67cb416861163.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"解析resolve"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析resolve"}},[a._v("#")]),a._v(" 解析Resolve")]),a._v(" "),s("p",[a._v("后面详细说明")]),a._v(" "),s("h2",{attrs:{id:"初始化initialization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化initialization"}},[a._v("#")]),a._v(" 初始化Initialization")]),a._v(" "),s("blockquote",[s("p",[a._v("如果类中没有 类变量的赋值动作和静态代码块，则不会生成 clinit方法，但是任何类都会有一个默认的类构造器")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-582454073500a7880792b366cd35be25.png",alt:"image"}})]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("初始化阶段就是执行类构造器方法<clinit>()的过程。")])]),a._v(" "),s("li",[a._v("此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。")]),a._v(" "),s("li",[a._v("构造器方法中指令按语句在源文件中出现的顺序执行。")]),a._v(" "),s("li",[s("mark",[a._v("<clinit>()不同于类的构造器。")]),a._v("（关联：构造器是虚拟机视角下的<init>()）")]),a._v(" "),s("li",[a._v("若该类具有父类，JVM会保证子类的<clinit>()执行前，父类的<clinit>()已经执行完毕。")]),a._v(" "),s("li",[a._v("虚拟机必须保证一个类的<clinit>()方法在多线程下被同步加锁。")])]),a._v(" "),s("h3",{attrs:{id:"举例1-简单"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例1-简单"}},[a._v("#")]),a._v(" 举例1-简单")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-57159b39f018cdcb01d459c000e2da79.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-d03d9226f8d4b0ade44eba6686733ca7.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"举例2-复杂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例2-复杂"}},[a._v("#")]),a._v(" 举例2-复杂")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-7ad66ef2951ca76ab342ae6737ec46e5.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-3a5e1a807771464feaa3efc0bf0b1359.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"举例3-顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例3-顺序"}},[a._v("#")]),a._v(" 举例3-顺序")]),a._v(" "),s("p",[a._v("因为在 linkking的prepare阶段，number已经被赋初始值为0了，然后初始化顺序又是根据代码顺序来的，所以先会被初始化为20，然后又会被初始化为10，所以最后的值就是10")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-e956d27a3eecb3aad57d7c0113e429ae.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-b9e1a8fd5eda6368ed20d4ba122c3338.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"注意-不能前向引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意-不能前向引用"}},[a._v("#")]),a._v(" 注意:不能前向引用")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-6408621c141eae872b02753dacd22572.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"类构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类构造器"}},[a._v("#")]),a._v(" 类构造器")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-00b8fc89af64eb9952ec41e8aa6a50e8.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"加载顺序-子类在加载之前-先保证父类的加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载顺序-子类在加载之前-先保证父类的加载"}},[a._v("#")]),a._v(" 加载顺序 子类在加载之前，先保证父类的加载")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-8ba084b0f75994aae1497aa8a3ae1e82.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"类加载器分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器分类"}},[a._v("#")]),a._v(" 类加载器分类")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-89fc42386a45978b31d3bef835a9a999.png",alt:"image"}})]),a._v(" "),s("p",[a._v("JVM支持两种类型的类加载器 。分别为"),s("mark",[a._v("引导类加载器（Bootstrap ClassLoader）")]),a._v("和"),s("mark",[a._v("自定义类加载器（User-Defined ClassLoader）")]),a._v("。")]),a._v(" "),s("p",[a._v("从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将"),s("mark",[a._v("所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器")]),a._v("。")]),a._v(" "),s("p",[a._v("无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示：")]),a._v(" "),s("p",[s("strong",[a._v("不是继承关系")])]),a._v(" "),s("blockquote",[s("p",[a._v("BootstrapClassLoader 不是java语言写的，其他的都是java语言")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-d65192d286a1e889310b9f158ff0927e.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[s("strong",[a._v("他们之间是层次关系，不是继承关系")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-a19f2e8aded132b877f01d58328a0ac7.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("引导类加载器只加载核心的类库，普通的是不管你的哟，")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-d97a71d3e9d672278600239023d4be4f.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-e2db39763f634d85d7bfd65c1b0cb698.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-05bf18f0ceb18ee952d20164706c8cac.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-22b1bf2ee94b8eed61c1b689ab6544ff.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"虚拟机自带的加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机自带的加载器"}},[a._v("#")]),a._v(" 虚拟机自带的加载器")]),a._v(" "),s("p",[s("strong",[a._v("启动类加载器（引导类加载器，Bootstrap ClassLoader）")])]),a._v(" "),s("ul",[s("li",[a._v("这个类加载使用C/C++语言实现的，嵌套在JVM内部。")]),a._v(" "),s("li",[a._v("它用来加载Java的核心库（JAVA_HOME/jre/lib/rt.jar、resources.jar或sun.boot.class.path路径下的内容），用于提供JVM自身需要的类")]),a._v(" "),s("li",[a._v("并不继承自ava.lang.ClassLoader，没有父加载器。")]),a._v(" "),s("li",[a._v("加载扩展类和应用程序类加载器，并指定为他们的父类加载器。")]),a._v(" "),s("li",[a._v("出于安全考虑，Bootstrap启动类加载器只加载包名为java、javax、sun等开头的类")])]),a._v(" "),s("p",[s("strong",[a._v("扩展类加载器（Extension ClassLoader）")])]),a._v(" "),s("ul",[s("li",[a._v("Java语言编写，由sun.misc.Launcher$ExtClassLoader实现。")]),a._v(" "),s("li",[a._v("派生于ClassLoader类")]),a._v(" "),s("li",[a._v("父类加载器为启动类加载器")]),a._v(" "),s("li",[a._v("从java.ext.dirs系统属性所指定的目录中加载类库，或从JDK的安装目录的jre/1ib/ext子目录（扩展目录）下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。")])]),a._v(" "),s("p",[s("strong",[a._v("应用程序类加载器（系统类加载器，AppClassLoader）")])]),a._v(" "),s("ul",[s("li",[a._v("java语言编写，由sun.misc.LaunchersAppClassLoader实现")]),a._v(" "),s("li",[a._v("派生于ClassLoader类")]),a._v(" "),s("li",[a._v("父类加载器为扩展类加载器")]),a._v(" "),s("li",[a._v("它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库")]),a._v(" "),s("li",[s("mark",[a._v("该类加载是程序中默认的类加载器")]),a._v("，一般来说，Java应用的类都是由它来完成加载")]),a._v(" "),s("li",[a._v("通过ClassLoader#getSystemclassLoader() 方法可以获取到该类加载器")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-2-用户自定义类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-用户自定义类加载器"}},[a._v("#")]),a._v(" 2.3.2. 用户自定义类加载器")]),a._v(" "),s("p",[a._v("在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。 为什么要自定义类加载器？")]),a._v(" "),s("ul",[s("li",[a._v("隔离加载类")]),a._v(" "),s("li",[a._v("修改类加载的方式")]),a._v(" "),s("li",[a._v("扩展加载源")]),a._v(" "),s("li",[a._v("防止源码泄漏")])]),a._v(" "),s("p",[a._v("用户自定义类加载器实现步骤：")]),a._v(" "),s("ol",[s("li",[a._v("开发人员可以通过继承抽象类ava.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求")]),a._v(" "),s("li",[a._v("在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass() 方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖loadclass() 方法，而是建议把自定义的类加载逻辑写在findClass()方法中")]),a._v(" "),s("li",[a._v("在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass()  方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。")])]),a._v(" "),s("h3",{attrs:{id:"举例-启动类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例-启动类加载器"}},[a._v("#")]),a._v(" 举例-启动类加载器")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-355b8c222bcbfd81a563bffd0d35c61f.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-7d610410a9ec5ce75d871447e22a8231.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"举例-扩展类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例-扩展类加载器"}},[a._v("#")]),a._v(" 举例-扩展类加载器")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-8065dc042526778c1b33a985f0887180.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classloader"}},[a._v("#")]),a._v(" ClassLoader")]),a._v(" "),s("p",[a._v("ClassLoader类是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-451fb2ce7f0922abc9c9dc1085c6cd0a.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-cdd283713d605b8cf4a255c7dfe8d207.png",alt:"image"}})]),a._v(" "),s("p",[s("strong",[a._v("获取ClassLoader的途径")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("方式一：获取当前ClassLoader")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("clazz"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[a._v("方式二：获取当前线程上下文的ClassLoader")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getContextClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[a._v("方式三：获取系统的ClassLoader")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getSystemClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[a._v("方式四：获取调用者的ClassLoader")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DriverManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getCallerClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])])]),a._v(" "),s("h2",{attrs:{id:"双亲委派机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[a._v("#")]),a._v(" 双亲委派机制")]),a._v(" "),s("h3",{attrs:{id:"什么是双亲委派机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是双亲委派机制"}},[a._v("#")]),a._v(" 什么是双亲委派机制？")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-adb15cfe06756dd9a4ba2446c571c56a.png",alt:"image"}})]),a._v(" "),s("p",[a._v("Java虚拟机对class文件采用的是"),s("mark",[a._v("按需加载")]),a._v("的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虚拟机采用的是"),s("mark",[a._v("双亲委派模式")]),a._v("，即把请求交由父类处理，它是一种任务委派模式。")]),a._v(" "),s("p",[s("strong",[a._v("工作原理")])]),a._v(" "),s("ul",[s("li",[a._v("1）如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；")]),a._v(" "),s("li",[a._v("2）如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；")]),a._v(" "),s("li",[a._v("3）如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。")])]),a._v(" "),s("h3",{attrs:{id:"工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[a._v("#")]),a._v(" 工作原理")]),a._v(" "),s("ul",[s("li",[a._v("类加载请求")]),a._v(" "),s("li",[a._v("自己先不加载，给父类")]),a._v(" "),s("li",[a._v("还不存在，则依次往上递归，知道引导类加载器")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-06511c3165bc59d01af8a575f0a64328.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"举例-string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例-string"}},[a._v("#")]),a._v(" 举例-String")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-024cff71de258b53ea2833c8f596be1c.png",alt:"image"}})]),a._v(" "),s("p",[a._v("当我们加载jdbc.jar 用于实现数据库连接的时候，首先我们需要知道的是 jdbc.jar是基于SPI接口进行实现的，所以在加载的时候，会进行双亲委派，最终从根加载器中加载 SPI核心类，然后在加载SPI接口类，接着在进行反向委派，通过线程上下文类加载器进行实现类jdbc.jar的加载。")]),a._v(" "),s("h3",{attrs:{id:"优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[a._v("#")]),a._v(" 优势")]),a._v(" "),s("ul",[s("li",[a._v("避免类的重复加载")]),a._v(" "),s("li",[a._v("保护程序安全，防止核心API被随意篡改\n"),s("ul",[s("li",[a._v("自定义类：java.lang.String")]),a._v(" "),s("li",[a._v("自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-46c7bbc340dc1188188df317dc62f365.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"举例-保护系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例-保护系统"}},[a._v("#")]),a._v(" 举例 保护系统")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-9827418498f25e35c4a9ac8526410f06.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"沙箱安全机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#沙箱安全机制"}},[a._v("#")]),a._v(" 沙箱安全机制")]),a._v(" "),s("p",[a._v("自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java\\lang\\String.class），报错信息说没有main方法，就是因为加载的是rt.jar包中的string类。这样可以保证对java核心源代码的保护，这就是沙箱安全机制。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-aca0d107143a0d1c4af5a60547953868.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),s("p",[s("strong",[a._v("如何判断两个class对象是否相同")])]),a._v(" "),s("p",[a._v("在JVM中表示两个class对象是否为同一个类存在两个必要条件：")]),a._v(" "),s("ul",[s("li",[a._v("类的完整类名必须一致，包括包名。")]),a._v(" "),s("li",[a._v("加载这个类的ClassLoader（指ClassLoader实例对象）必须相同。")])]),a._v(" "),s("p",[a._v("换句话说，在JVM中，即使这两个类对象（class对象）来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。")]),a._v(" "),s("p",[s("strong",[a._v("对类加载器的引用")])]),a._v(" "),s("p",[a._v("JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会"),s("mark",[a._v("将这个类加载器的一个引用作为类型信息的一部分保存在方法区中")]),a._v("。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。")]),a._v(" "),s("p",[s("strong",[a._v("类的主动使用和被动使用")])]),a._v(" "),s("p",[a._v("Java程序对类的使用方式分为：主动使用和被动使用。")]),a._v(" "),s("p",[a._v("主动使用，又分为七种情况：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("创建类的实例")])]),a._v(" "),s("li",[s("p",[a._v("访问某个类或接口的静态变量，或者对该静态变量赋值")])]),a._v(" "),s("li",[s("p",[a._v("调用类的静态方法")])]),a._v(" "),s("li",[s("p",[a._v('反射（比如：Class.forName（"com.atguigu.Test"））')])]),a._v(" "),s("li",[s("p",[a._v("初始化一个类的子类")])]),a._v(" "),s("li",[s("p",[a._v("Java虚拟机启动时被标明为启动类的类")])]),a._v(" "),s("li",[s("p",[a._v("JDK 7 开始提供的动态语言支持：")]),a._v(" "),s("p",[a._v("java.lang.invoke.MethodHandle实例的解析结果")]),a._v(" "),s("p",[a._v("REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化")])])]),a._v(" "),s("p",[a._v("除了以上七种情况，其他使用Java类的方式都被看作是对"),s("mark",[a._v("类的被动使用")]),a._v("，都"),s("mark",[a._v("不会导致类的初始化")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"类class相同的条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类class相同的条件"}},[a._v("#")]),a._v(" 类Class相同的条件")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-0a4e3823bf51e1e6de91d0b094b746de.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"一个类到另外一个类的引用。两者的类加载器需要一样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个类到另外一个类的引用。两者的类加载器需要一样"}},[a._v("#")]),a._v(" 一个类到另外一个类的引用。两者的类加载器需要一样")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-1a310e2ee14faef204decfb7af2c5b02.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"主动使用和被动使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主动使用和被动使用"}},[a._v("#")]),a._v(" 主动使用和被动使用")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-a04847bc0a7a66c17c949d2cbf139ffb.png",alt:"image"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);