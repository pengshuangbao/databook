(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{484:function(a,t,v){"use strict";v.r(t);var _=v(14),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"检索技术核心20讲"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#检索技术核心20讲"}},[a._v("#")]),a._v(" 检索技术核心20讲")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-07-07-1d6d46fc979a135b604bdcb71bf32829.png",alt:"image"}})]),a._v(" "),v("h2",{attrs:{id:"导读-三步走策略-轻松搞定检索"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#导读-三步走策略-轻松搞定检索"}},[a._v("#")]),a._v(" 导读 | 三步走策略，轻松搞定检索！")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-07-02-59fa4c01487b70a34eafbb96c8b4455b.png",alt:"image"}})]),a._v(" "),v("h3",{attrs:{id:"夯实基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#夯实基础"}},[a._v("#")]),a._v(" 夯实基础")]),a._v(" "),v("p",[a._v("检索的核心设计思想："),v("mark",[a._v("合理组织数据，尽可能快速减少查询范围，提升检索效率。在具体写代码的时候，如果我们能应用这样的设计思想，那检索效率肯定会有大幅提升。")])]),a._v(" "),v("h3",{attrs:{id:"在实践中将技术落地"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#在实践中将技术落地"}},[a._v("#")]),a._v(" 在实践中将技术落地")]),a._v(" "),v("p",[a._v("在实践中学习工业界的解决方案")]),a._v(" "),v("p",[a._v("检索技术是数据库、搜索引擎、广告引擎和推荐引擎等热门业务系统的底层技术。所以，这些场景中的实际业务需求，都可以作为我们学习检索技术的“题库”")]),a._v(" "),v("h3",{attrs:{id:"最后搭配高效的学习攻略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#最后搭配高效的学习攻略"}},[a._v("#")]),a._v(" 最后搭配高效的学习攻略")]),a._v(" "),v("ol",[v("li",[a._v("多思考，多提问，善用“理解记忆法”，学习每个知识点的时候，总是问自己三个问题\n"),v("ol",[v("li",[a._v("这个知识点要解决什么问题？")]),a._v(" "),v("li",[a._v("如果不用这个方法还有其他的解决方案吗？")]),a._v(" "),v("li",[a._v("使用这个方法有什么副作用和限制")])])]),a._v(" "),v("li",[a._v("建立自己的知识体系\n"),v("ol",[v("li",[a._v("对比\n"),v("ol",[v("li",[a._v("学习某一个知识点，和之前的知识点进行对比，看有没有什么相同点，不同点，为新旧知识建立联系")])])]),a._v(" "),v("li",[a._v("拆解\n"),v("ol",[v("li",[a._v("如果某一个知识点比较复杂，就拆解成多个小知识点，然后再应用上面的方法进行对比")])])])])]),a._v(" "),v("li",[a._v("有耐心，反复学习，多交流")])]),a._v(" "),v("h2",{attrs:{id:"开篇词-学会检索-快人一步"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开篇词-学会检索-快人一步"}},[a._v("#")]),a._v(" 开篇词 | 学会检索，快人一步！")]),a._v(" "),v("p",[a._v("检索的本质其实都是在海量的信息中，快速筛选出我们需要的内容或服务，")]),a._v(" "),v("p",[v("mark",[a._v("检索技术：它是更底层的通用技术，它研究的是如何将我们所需的数据高效地取出来。")])]),a._v(" "),v("h2",{attrs:{id:"_01-线性结构检索-从数组和链表的原理初窥检索本质"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_01-线性结构检索-从数组和链表的原理初窥检索本质"}},[a._v("#")]),a._v(" 01 | 线性结构检索：从数组和链表的原理初窥检索本质")]),a._v(" "),v("h3",{attrs:{id:"数组和链表有哪些存储特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组和链表有哪些存储特点"}},[a._v("#")]),a._v(" 数组和链表有哪些存储特点？")]),a._v(" "),v("p",[a._v("数组：一块连续的存储空间来存储数据")]),a._v(" "),v("p",[a._v("链表：可以不连续的空间，用一个指针将这些空间链接起来，形成一条链")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-07-02-90db20fe3b1170bf222712663b7b6efd.png",alt:"image"}})]),a._v(" "),v("p",[a._v("数组和链表分别代表了连续空间和不连续空间的最基础的存储方式，它们是线性表（Linear List）的典型代表。其他所有的数据结构，比如栈、队列、二叉树、B+ 树等，都不外乎是这两者的结合和变化，")]),a._v(" "),v("p",[a._v("以栈为例，它本质是一个限定了读写位置的数组，特点是只允许后进献出")]),a._v(" "),v("h3",{attrs:{id:"如何使用二分查找提升数组的检索效率"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何使用二分查找提升数组的检索效率"}},[a._v("#")]),a._v(" 如何使用二分查找提升数组的检索效率？")]),a._v(" "),v("p",[a._v("二分查找也叫 "),v("mark",[a._v("折半查找")])]),a._v(" "),v("p",[a._v("思路很直观，就是将有序数组二分为左右两个部分，通过"),v("mark",[a._v("只在半边进行查找")]),a._v("来提升检索效率。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-07-05-6250950ad3460ba9cd9f9723b3e1b1b2.png",alt:"image"}})]),a._v(" "),v("p",[v("mark",[v("strong",[a._v("检索的核心思路，其实就是通过合理组织数据，尽可能地快速减少查询范围。")])])]),a._v(" "),v("h3",{attrs:{id:"链表在检索和动态调整上面的优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#链表在检索和动态调整上面的优缺点"}},[a._v("#")]),a._v(" 链表在检索和动态调整上面的优缺点")]),a._v(" "),v("p",[a._v("链表的检索能力偏弱，作为弥补，它在动态调整上会更容易。")]),a._v(" "),v("p",[a._v("O(1) 完成插入和删除")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-07-05-984d6c7e81ea951ef214c4d901249c81.png",alt:"image"}})]),a._v(" "),v("h3",{attrs:{id:"如何灵活改造链表提升检索效率"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何灵活改造链表提升检索效率"}},[a._v("#")]),a._v(" 如何灵活改造链表提升检索效率？")]),a._v(" "),v("p",[a._v("在掌握了链表的核心思想后，我们很容易就能想到一个改进方案，那就是让链表每个节点不再只是存储一个元素，而是存储一个小的数组。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-07-05-c2be1211712bf138c1f36af864c91d4a.png",alt:"image"}})]),a._v(" "),v("h2",{attrs:{id:"_02-非线性结构检索-数据频繁变化的情况下-如何高效检索"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_02-非线性结构检索-数据频繁变化的情况下-如何高效检索"}},[a._v("#")]),a._v(" 02 | 非线性结构检索：数据频繁变化的情况下，如何高效检索？")]),a._v(" "),v("p",[a._v("在数据频繁更新的场景中，连续存储的有序数组并不是最合适的存储方案。因为数组为了"),v("mark",[a._v("保持有序必须不停地重建和排序")]),a._v("，"),v("mark",[a._v("系统检索性能就会急剧下降")]),a._v("。但是，非连续存储的"),v("mark",[a._v("有序链表倒是具有高效插入新数据的能力")]),a._v("。因此，我们能否结合上面的例子，"),v("mark",[a._v("使用非线性的树状结构来改造有序链表，让链表也具有二分查找的能力")]),a._v("呢？今天，我们就来讨论一下这个问题。")]),a._v(" "),v("h3",{attrs:{id:"树结构是如何进行二分查找的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#树结构是如何进行二分查找的"}},[a._v("#")]),a._v(" 树结构是如何进行二分查找的？")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-07-05-2a182923c1c152f9f3f7fada1088fa5a.png",alt:"image"}})]),a._v(" "),v("p",[a._v("这个二叉树是有序的。它的左子树的所有节点的值都小于根节点，同时右子树所有节点的值都大于等于根节点。这样的有序结构，使得它能使用二分查找算法，快速地过滤掉一半的数据。具备了这样特点的"),v("mark",[a._v("二叉树")]),a._v("，就是"),v("mark",[a._v("二叉检索树（Binary Search Tree），或者叫二叉排序树（Binary Sorted Tree）")]),a._v("。")]),a._v(" "),v("p",[a._v("尽管有序数组和二叉检索树，在数据结构形态上看起来差异很大，但是在提高检索效率上，它们的核心原理都是一致的。")]),a._v(" "),v("ol",[v("li",[a._v("将数据有序化")]),a._v(" "),v("li",[a._v("在进行检索的时候，都是通过二分查找的思想从中间节点开始查起")])]),a._v(" "),v("h3",{attrs:{id:"二叉检索树的检索空间平衡方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二叉检索树的检索空间平衡方案"}},[a._v("#")]),a._v(" 二叉检索树的检索空间平衡方案")]),a._v(" "),v("p",[a._v("单链表，检索效率其实是O(n)")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-07-05-025f8cbf5a64b130331e911db6cd04ec.png",alt:"image"}})]),a._v(" "),v("p",[a._v("最根本的原因是，这样的结构造成了"),v("mark",[a._v("检索空间不平衡")]),a._v("。在当前节点不满足查询条件的时候，它无法把“一半的数据”过滤掉，而是只能过滤掉当前检索的这个节点。因此无法达到“快速减小查询范围”的目的。")]),a._v(" "),v("p",[a._v("AVL(平衡二叉树)和红黑树出来了，保证检索空间的平衡划分")]),a._v(" "),v("h3",{attrs:{id:"跳表是如何进行二分查找的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#跳表是如何进行二分查找的"}},[a._v("#")]),a._v(" 跳表是如何进行二分查找的？")]),a._v(" "),v("p",[a._v("链表之所以访问中间节点的效率低，就是因为每个节点只存储了下一个节点的指针，要沿着这个指针遍历每个后续节点才能到达中间节点。")]),a._v(" "),v("p",[a._v("那如果我们在节点上"),v("mark",[a._v("增加一个指针，指向更远的节点")]),a._v("，比如说跳过后一个节点，直接指向后面第二个节点，那么沿着这个指针遍历，是不是遍历速度就翻倍了呢？")]),a._v(" "),v("p",[a._v("我们可以为链表的某些节点增加更多的指针。这些指针都指向不同距离的后续节点。这样一来，链表就具备了更高效的检索能力。这样的数据结构就是 "),v("strong",[a._v("跳表")])])])}),[],!1,null,null,null);t.default=r.exports}}]);