(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{639:function(a,t,s){"use strict";s.r(t);var e=s(14),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[a._v("#")]),a._v(" Java")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#jdk"}},[a._v("JDK")]),s("ul",[s("li",[s("a",{attrs:{href:"#jdk安装"}},[a._v("JDK安装")])])])]),s("li",[s("a",{attrs:{href:"#maven"}},[a._v("Maven")]),s("ul",[s("li",[s("a",{attrs:{href:"#maven打包跳过单元测试"}},[a._v("maven打包跳过单元测试")])])])]),s("li",[s("a",{attrs:{href:"#jar"}},[a._v("Jar")]),s("ul",[s("li",[s("a",{attrs:{href:"#java-通过一个命令将一个class文件打入到一个已经存在的jar包中-而不用重新运行"}},[a._v("java 通过一个命令将一个class文件打入到一个已经存在的jar包中，而不用重新运行")])])])]),s("li",[s("a",{attrs:{href:"#jvm"}},[a._v("JVM")]),s("ul",[s("li",[s("a",{attrs:{href:"#内存溢出的时候生成dump文件"}},[a._v("内存溢出的时候生成Dump文件")])]),s("li",[s("a",{attrs:{href:"#查看jdk使用的默认垃圾回收器"}},[a._v("查看JDK使用的默认垃圾回收器")])]),s("li",[s("a",{attrs:{href:"#jstat"}},[a._v("Jstat")]),s("ul",[s("li",[s("a",{attrs:{href:"#gcutil"}},[a._v("gcutil")])])])]),s("li",[s("a",{attrs:{href:"#jmap"}},[a._v("Jmap")]),s("ul",[s("li",[s("a",{attrs:{href:"#生成dump文件jmap"}},[a._v("生成Dump文件jmap")])]),s("li",[s("a",{attrs:{href:"#查看jvm内存信息-jmap"}},[a._v("查看JVM内存信息 jmap")])])])]),s("li",[s("a",{attrs:{href:"#jstack"}},[a._v("Jstack")]),s("ul",[s("li",[s("a",{attrs:{href:"#生成线程dump"}},[a._v("生成线程dump")])]),s("li",[s("a",{attrs:{href:"#根据线程id去搜索"}},[a._v("根据线程id去搜索")])])])])])]),s("li",[s("a",{attrs:{href:"#tomcat"}},[a._v("Tomcat")]),s("ul",[s("li",[s("a",{attrs:{href:"#tomcat-新增jvm参数"}},[a._v("tomcat 新增jvm参数")])])])]),s("li",[s("a",{attrs:{href:"#实战"}},[a._v("实战")]),s("ul",[s("li",[s("a",{attrs:{href:"#java程序cpu100-快速定位排查"}},[a._v("Java程序CPU100%,快速定位排查")])])])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"jdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[a._v("#")]),a._v(" JDK")]),a._v(" "),s("h3",{attrs:{id:"jdk安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk安装"}},[a._v("#")]),a._v(" JDK安装")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" /usr/java\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("tar")]),a._v(" -zxvf jdk1.8.0_111.tar.gz -C  /usr/java/\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" /etc/profile\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_HOME")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/usr/java/jdk1.8.0_111\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PATH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_HOME")]),a._v("/bin\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" /etc/profile\n")])])]),s("h2",{attrs:{id:"maven"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven"}},[a._v("#")]),a._v(" Maven")]),a._v(" "),s("h3",{attrs:{id:"maven打包跳过单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#maven打包跳过单元测试"}},[a._v("#")]),a._v(" maven打包跳过单元测试")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 不但跳过单元测试的运行，也跳过测试代码的编译。")]),a._v("\nmvn package -Dmaven.test.skip"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 跳过单元测试，但是会继续编译")]),a._v("\nmvn package -DskipTests\n")])])]),s("h2",{attrs:{id:"jar"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jar"}},[a._v("#")]),a._v(" Jar")]),a._v(" "),s("h3",{attrs:{id:"java-通过一个命令将一个class文件打入到一个已经存在的jar包中-而不用重新运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-通过一个命令将一个class文件打入到一个已经存在的jar包中-而不用重新运行"}},[a._v("#")]),a._v(" java 通过一个命令将一个class文件打入到一个已经存在的jar包中，而不用重新运行")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jar -uvf mk_phoenix-flume-4.7.0-HBase-1.1.jar org/apache/phoenix/flume/serializer/EventSerializers.class\n")])])]),s("h2",{attrs:{id:"jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),s("h3",{attrs:{id:"内存溢出的时候生成dump文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出的时候生成dump文件"}},[a._v("#")]),a._v(" 内存溢出的时候生成Dump文件")]),a._v(" "),s("p",[a._v("给 JVM 环境参数设置-XX:+HeapDumpOnOutOfMemoryError 参数，让 JVM 碰到 OOM场景时输出 dump 信息")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("path\n")])])]),s("h3",{attrs:{id:"查看jdk使用的默认垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看jdk使用的默认垃圾回收器"}},[a._v("#")]),a._v(" 查看JDK使用的默认垃圾回收器")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("java -XX:+PrintCommandLineFlags -version\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('-XX:InitialHeapSize=524457920 -XX:MaxHeapSize=8391326720 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC\njava version "1.8.0_111"\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)\n')])])]),s("h3",{attrs:{id:"jstat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jstat"}},[a._v("#")]),a._v(" Jstat")]),a._v(" "),s("h4",{attrs:{id:"gcutil"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gcutil"}},[a._v("#")]),a._v(" gcutil")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jstat -gcutil pid "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),a._v("\n")])])]),s("h3",{attrs:{id:"jmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jmap"}},[a._v("#")]),a._v(" Jmap")]),a._v(" "),s("h4",{attrs:{id:"生成dump文件jmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成dump文件jmap"}},[a._v("#")]),a._v(" 生成Dump文件jmap")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jmap -dump:live,format"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("b,file"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("xxxx.hprof pid\n")])])]),s("h4",{attrs:{id:"查看jvm内存信息-jmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看jvm内存信息-jmap"}},[a._v("#")]),a._v(" 查看JVM内存信息 jmap")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jmap -heap pid\n")])])]),s("h3",{attrs:{id:"jstack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jstack"}},[a._v("#")]),a._v(" Jstack")]),a._v(" "),s("h4",{attrs:{id:"生成线程dump"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成线程dump"}},[a._v("#")]),a._v(" 生成线程dump")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("jstack pid "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" thread.dump\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 输出各种状态的统计")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" java.lang.Thread.State thread.dump "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{print"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$3")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$4")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$5")]),a._v("}'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("uniq")]),a._v(" -c\n")])])]),s("h4",{attrs:{id:"根据线程id去搜索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据线程id去搜索"}},[a._v("#")]),a._v(" 根据线程id去搜索")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看进程的所有线程 按P按照CPU来排序")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("top")]),a._v(" -Hp pid\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 打印出十六进制")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%x'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[a._v("\\n")]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1208")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 有颜色输出")]),a._v("\njstack "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1205")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'4b8'")]),a._v(" -C5 --color\n")])])]),s("h2",{attrs:{id:"tomcat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tomcat"}},[a._v("#")]),a._v(" Tomcat")]),a._v(" "),s("h3",{attrs:{id:"tomcat-新增jvm参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-新增jvm参数"}},[a._v("#")]),a._v(" tomcat 新增jvm参数")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" /usr/local/apache-tomcat-8.5.12/bin/catalina.sh\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-28-586872716c786d567f1c7de48fb452d6.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[a._v("#")]),a._v(" 实战")]),a._v(" "),s("h3",{attrs:{id:"java程序cpu100-快速定位排查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java程序cpu100-快速定位排查"}},[a._v("#")]),a._v(" Java程序CPU100%,快速定位排查")]),a._v(" "),s("ul",[s("li",[a._v("top -c 显示进程运行信息列表 键入P(大写p)，线程按照CPU使用率排序")]),a._v(" "),s("li",[a._v("top -Hp 10765 显示一个进程的线程运行信息列表(线程肯定是归属于某一个进程的) 键入P(大写p)，线程按照CPU使用率排序")]),a._v(" "),s("li",[a._v('将线程PID转化为16进制 printf "%x\\n" 10804')]),a._v(" "),s("li",[a._v("使用 jstack 工具 jstack 10765 | grep '0x2a34' -C5 --color")])]),a._v(" "),s("p",[a._v("参考")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://www.cnblogs.com/winner-0715/p/7521638.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("线上服务CPU100%问题快速定位实战"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://my.oschina.net/leejun2005/blog/1524687",target:"_blank",rel:"noopener noreferrer"}},[a._v("线上服务 CPU 100%？一键定位 so easy！"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);