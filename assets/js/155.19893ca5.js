(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{619:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"第八章、堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第八章、堆"}},[a._v("#")]),a._v(" 第八章、堆")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#堆的核心设置"}},[a._v("堆的核心设置")]),s("ul",[s("li",[s("a",{attrs:{href:"#概述"}},[a._v("概述")])]),s("li",[s("a",{attrs:{href:"#堆内存细分"}},[a._v("堆内存细分")]),s("ul",[s("li",[s("a",{attrs:{href:"#jdk7"}},[a._v("JDK7")])]),s("li",[s("a",{attrs:{href:"#jdk8"}},[a._v("JDK8")])])])])])]),s("li",[s("a",{attrs:{href:"#设置堆内存大小与oom"}},[a._v("设置堆内存大小与OOM")]),s("ul",[s("li",[s("a",{attrs:{href:"#_6-2-1-堆空间大小的设置"}},[a._v("6.2.1. 堆空间大小的设置")])]),s("li",[s("a",{attrs:{href:"#_6-2-2-outofmemory举例"}},[a._v("6.2.2. OutOfMemory举例")])])])]),s("li",[s("a",{attrs:{href:"#年轻代与年老代"}},[a._v("年轻代与年老代")])]),s("li",[s("a",{attrs:{href:"#图解对象分配过程"}},[a._v("图解对象分配过程")]),s("ul",[s("li",[s("a",{attrs:{href:"#对象分配特殊情况"}},[a._v("对象分配特殊情况")])])])]),s("li",[s("a",{attrs:{href:"#monitor-gc、major-gc、full-gc"}},[a._v("Monitor GC、Major GC、Full GC")]),s("ul",[s("li",[s("a",{attrs:{href:"#_6-5-1-最简单的分代式gc策略的触发条件"}},[a._v("6.5.1. 最简单的分代式GC策略的触发条件")])]),s("li",[s("a",{attrs:{href:"#年轻代gc-minor-gc-触发机制"}},[a._v("年轻代GC（Minor GC）触发机制")])]),s("li",[s("a",{attrs:{href:"#老年代gc-major-gc-full-gc-触发机制"}},[a._v("老年代GC（Major GC / Full GC）触发机制")])]),s("li",[s("a",{attrs:{href:"#full-gc触发机制-后面细讲"}},[a._v("Full GC触发机制（后面细讲）：")])])])]),s("li",[s("a",{attrs:{href:"#堆空间的分代思想"}},[a._v("堆空间的分代思想")])]),s("li",[s("a",{attrs:{href:"#内存的分配策略"}},[a._v("内存的分配策略")])]),s("li",[s("a",{attrs:{href:"#为对象分配内存-tlab"}},[a._v("为对象分配内存：TLAB")]),s("ul",[s("li",[s("a",{attrs:{href:"#_6-8-1-为什么有tlab-thread-local-allocation-buffer"}},[a._v("6.8.1. 为什么有TLAB（Thread Local Allocation Buffer）？")])]),s("li",[s("a",{attrs:{href:"#_6-8-2-什么是tlab"}},[a._v("6.8.2. 什么是TLAB？")])]),s("li",[s("a",{attrs:{href:"#_6-8-3-tlab的再说明"}},[a._v("6.8.3. TLAB的再说明")])])])]),s("li",[s("a",{attrs:{href:"#小结堆空间的参数设置"}},[a._v("小结堆空间的参数设置")])]),s("li",[s("a",{attrs:{href:"#_6-9-小结-堆空间的参数设置"}},[a._v("6.9. 小结：堆空间的参数设置")]),s("ul",[s("li",[s("a",{attrs:{href:"#测试-printflagsfinal-对比-初始值和设置值"}},[a._v("测试 PrintFlagsFinal 对比，初始值和设置值")])])])]),s("li",[s("a",{attrs:{href:"#堆是分配的对象的唯一选择"}},[a._v("堆是分配的对象的唯一选择")]),s("ul",[s("li",[s("a",{attrs:{href:"#_6-x-1-逃逸分析概述"}},[a._v("6.X.1. 逃逸分析概述")])]),s("li",[s("a",{attrs:{href:"#_6-x-2-逃逸分析-代码优化"}},[a._v("6.X.2. 逃逸分析：代码优化")]),s("ul",[s("li",[s("a",{attrs:{href:"#栈上分配"}},[a._v("栈上分配")])]),s("li",[s("a",{attrs:{href:"#同步省略"}},[a._v("同步省略")])]),s("li",[s("a",{attrs:{href:"#标量替换"}},[a._v("标量替换")])])])]),s("li",[s("a",{attrs:{href:"#_6-x-3-逃逸分析小结-逃逸分析并不成熟"}},[a._v("6.X.3. 逃逸分析小结：逃逸分析并不成熟")])]),s("li",[s("a",{attrs:{href:"#栈上分配-开启逃逸分析"}},[a._v("栈上分配(开启逃逸分析)")])]),s("li",[s("a",{attrs:{href:"#同步省略"}},[a._v("同步省略")])]),s("li",[s("a",{attrs:{href:"#标量替换"}},[a._v("标量替换")])]),s("li",[s("a",{attrs:{href:"#小结"}},[a._v("小结")])])])]),s("li",[s("a",{attrs:{href:"#小结"}},[a._v("小结")])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"堆的核心设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆的核心设置"}},[a._v("#")]),a._v(" 堆的核心设置")]),a._v(" "),s("h3",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),s("p",[a._v("堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM，但是进程包含多个线程，他们是共享同一堆空间的。")]),a._v(" "),s("p",[a._v("一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。")]),a._v(" "),s("p",[a._v("Java堆区在JVM启动的时候即被创建，其空间大小也就确定了。是JVM管理的最大一块内存空间。")]),a._v(" "),s("ul",[s("li",[a._v("堆内存的大小是可以调节的。")])]),a._v(" "),s("p",[a._v("《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。")]),a._v(" "),s("p",[a._v("所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。")]),a._v(" "),s("p",[a._v("《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（"),s("code",[a._v("The heap is the run-time data area from which memory for all class instances and arrays is allocated")]),a._v("）")]),a._v(" "),s("p",[a._v("数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。")]),a._v(" "),s("p",[a._v("在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。")]),a._v(" "),s("p",[a._v("堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-1654f8c4eff1be5500c9d7aa249de46f.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-654bb588f4dea2209f5ea103ee62efc4.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-e056d91a2c2c556c32ed845de70be61c.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-9b13b0cd602d8380bf825df6a7f3b716.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"堆内存细分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆内存细分"}},[a._v("#")]),a._v(" 堆内存细分")]),a._v(" "),s("p",[a._v("Java 7及之前堆内存逻辑上分为三部分：新生区+养老区+"),s("mark",[a._v("永久区")])]),a._v(" "),s("ul",[s("li",[a._v("Young Generation Space 新生区 Young/New 又被划分为Eden区和Survivor区")]),a._v(" "),s("li",[a._v("Tenure generation space 养老区 Old/Tenure")]),a._v(" "),s("li",[a._v("Permanent Space 永久区 Perm")])]),a._v(" "),s("p",[a._v("Java 8及之后堆内存逻辑上分为三部分：新生区+养老区+"),s("mark",[a._v("元空间")])]),a._v(" "),s("ul",[s("li",[a._v("Young Generation Space 新生区 Young/New 又被划分为Eden区和Survivor区")]),a._v(" "),s("li",[a._v("Tenure generation space 养老区 Old/Tenure")]),a._v(" "),s("li",[a._v("Meta Space 元空间 Meta")])]),a._v(" "),s("p",[a._v("约定：新生区（代）<=>年轻代 、 养老区<=>老年区（代）、 永久区<=>永久代")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-25c7ebdfa86889985720c864b4b8f37c.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-a44676d3c38afbe07adcf38facb75810.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-6041afb9014a3767ce2d536627a6c1d2.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"jdk7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk7"}},[a._v("#")]),a._v(" JDK7")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-56a17288c70dd2f09c2e29c4aa77e632.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"jdk8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk8"}},[a._v("#")]),a._v(" JDK8")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-16-de3229864a47ed4110bc41388a2743bd.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"设置堆内存大小与oom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置堆内存大小与oom"}},[a._v("#")]),a._v(" 设置堆内存大小与OOM")]),a._v(" "),s("h3",{attrs:{id:"_6-2-1-堆空间大小的设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-堆空间大小的设置"}},[a._v("#")]),a._v(" 6.2.1. 堆空间大小的设置")]),a._v(" "),s("p",[a._v('Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项"-Xmx"和"-Xms"来进行设置。')]),a._v(" "),s("ul",[s("li",[a._v('“-Xms"用于表示堆区的起始内存，等价于'),s("code",[a._v("-XX:InitialHeapSize")])]),a._v(" "),s("li",[a._v('“-Xmx"则用于表示堆区的最大内存，等价于'),s("code",[a._v("-XX:MaxHeapSize")])])]),a._v(" "),s("p",[a._v('一旦堆区中的内存大小超过“-Xmx"所指定的最大内存时，将会抛出OutOfMemoryError异常。')]),a._v(" "),s("p",[a._v("通常会将-Xms和-Xmx两个参数配置相同的值，其目的是"),s("mark",[a._v("为了能够在ava垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。")])]),a._v(" "),s("p",[a._v("默认情况下")]),a._v(" "),s("ul",[s("li",[a._v("初始内存大小：物理电脑内存大小 / 64")]),a._v(" "),s("li",[a._v("最大内存大小：物理电脑内存大小 / 4")])]),a._v(" "),s("h3",{attrs:{id:"_6-2-2-outofmemory举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-2-outofmemory举例"}},[a._v("#")]),a._v(" 6.2.2. OutOfMemory举例")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OOMTest")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Picture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Picture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" in thread "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"main"')]),a._v(" java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OutofMemoryError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Java")]),a._v(" heap space\n    at com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("atguigu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Picture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("init"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OOMTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" java"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    at com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("atguigu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("O0MTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OOMTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-1aa759b0f706d4c3ef6b18d7729ea514.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("新生代的总内存=Eden区+一个 from 或者 to 区的内存")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-d7c8b9e50ead11ecfc71b6232c6cfa60.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-fc6671dfd8d8a21f97c6df3a158c46eb.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-e45bfe3cdd65587df4af986e8a770455.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"年轻代与年老代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#年轻代与年老代"}},[a._v("#")]),a._v(" 年轻代与年老代")]),a._v(" "),s("p",[a._v("存储在JVM中的Java对象可以被划分为两类：")]),a._v(" "),s("ul",[s("li",[a._v("一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速")]),a._v(" "),s("li",[a._v("另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致")])]),a._v(" "),s("p",[a._v("Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（oldGen）")]),a._v(" "),s("p",[a._v("其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间（有时也叫做from区、to区）")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-fffde89f44bed81da8e6a38f484455a6.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-c5497ddd7a5c4f62f683d4614220f8de.png",alt:"image"}})]),a._v(" "),s("p",[a._v("配置新生代与老年代在堆结构的占比。")]),a._v(" "),s("ul",[s("li",[a._v("默认"),s("code",[a._v("-XX:NewRatio=2")]),a._v("，表示新生代占1，老年代占2，新生代占整个堆的1/3")]),a._v(" "),s("li",[a._v("可以修改"),s("code",[a._v("-XX:NewRatio=4")]),a._v("，表示新生代占1，老年代占4，新生代占整个堆的1/5")])]),a._v(" "),s("p",[a._v("在HotSpot中，Eden空间和另外两个survivor空间缺省所占的比例是8：1：1")]),a._v(" "),s("p",[a._v("当然开发人员可以通过选项“"),s("code",[a._v("-xx:SurvivorRatio")]),a._v("”调整这个空间比例。比如"),s("code",[a._v("-xx:SurvivorRatio=8")])]),a._v(" "),s("p",[s("mark",[a._v("几乎所有的Java对象都是在Eden区被new出来的。")]),a._v("绝大部分的Java对象的销毁都在新生代进行了。")]),a._v(" "),s("ul",[s("li",[a._v("IBM公司的专门研究表明，新生代中80%的对象都是“朝生夕死”的。")])]),a._v(" "),s("p",[a._v('可以使用选项"'),s("code",[a._v("-Xmn")]),a._v('"设置新生代最大内存大小，这个参数一般使用默认值就可以了。')]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-e3c02b4ae86a124e630fcdc31a7d7605.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"图解对象分配过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图解对象分配过程"}},[a._v("#")]),a._v(" 图解对象分配过程")]),a._v(" "),s("p",[a._v("为新对象分配内存是一件非常严谨和复杂的任务，JVM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("new的对象先放伊甸园区。此区有大小限制。")])]),a._v(" "),s("li",[s("p",[a._v("当伊甸园的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区")])]),a._v(" "),s("li",[s("p",[a._v("然后将伊甸园中的剩余对象移动到幸存者0区。")])]),a._v(" "),s("li",[s("p",[a._v("如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。")])]),a._v(" "),s("li",[s("p",[a._v("如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。")])]),a._v(" "),s("li",[s("p",[a._v("啥时候能去养老区呢？可以设置次数。默认是15次。")]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("可以设置参数："),s("code",[a._v("-Xx:MaxTenuringThreshold= N")]),a._v("进行设置")])])])]),a._v(" "),s("li",[s("p",[a._v("在养老区，相对悠闲。当养老区内存不足时，再次触发GC：Major GC，进行养老区的内存清理")])]),a._v(" "),s("li",[s("p",[a._v("若养老区执行了Major GC之后，发现依然无法进行对象的保存，就会产生OOM异常。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OutofMemoryError")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Java")]),a._v(" heap space\n")])])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-2a2be1d169adb0d5382957a51f612719.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-2512eecbcd534d5b2d0ed84e81715b83.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-a5ecce6b0b93acd45305bb584068be7b.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("每次执行完Monitor GC，谁空，谁就变成to区")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-6e7d4b530f7a58d21aaf83850c7fdf8d.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-17-98ecbd73429291f8d283311a79f12fe5.png",alt:"image"}})]),a._v(" "),s("p",[s("strong",[a._v("总结")])]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to")])]),a._v(" "),s("li",[s("mark",[a._v("关于垃圾回收：频繁在新生区收集，很少在老年代收集，几乎不再永久代和元空间进行收集")])])]),a._v(" "),s("p",[s("strong",[a._v("常用调优工具（在JVM下篇：性能监控与调优篇会详细介绍）")])]),a._v(" "),s("ul",[s("li",[a._v("JDK命令行")]),a._v(" "),s("li",[a._v("Eclipse:Memory Analyzer Tool")]),a._v(" "),s("li",[a._v("Jconsole")]),a._v(" "),s("li",[a._v("VisualVM")]),a._v(" "),s("li",[a._v("Jprofiler")]),a._v(" "),s("li",[a._v("Java Flight Recorder")]),a._v(" "),s("li",[a._v("GCViewer")]),a._v(" "),s("li",[a._v("GC Easy")])]),a._v(" "),s("h3",{attrs:{id:"对象分配特殊情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象分配特殊情况"}},[a._v("#")]),a._v(" 对象分配特殊情况")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-18-cde0e64a07febbce5c28cfff57820517.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"monitor-gc、major-gc、full-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#monitor-gc、major-gc、full-gc"}},[a._v("#")]),a._v(" Monitor GC、Major GC、Full GC")]),a._v(" "),s("p",[a._v("JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。")]),a._v(" "),s("p",[a._v("针对Hotspot VM的实现，它里面的GC按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）")]),a._v(" "),s("ul",[s("li",[a._v("部分收集：不是完整收集整个Java堆的垃圾收集。其中又分为：\n"),s("ul",[s("li",[a._v("新生代收集（Minor GC / Young GC）：只是新生代的垃圾收集")]),a._v(" "),s("li",[a._v("老年代收集（Major GC / Old GC）：只是老年代的圾收集。\n"),s("ul",[s("li",[a._v("目前，只有CMSGC会有单独收集老年代的行为。")]),a._v(" "),s("li",[s("mark",[a._v("注意，很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收。")])])])]),a._v(" "),s("li",[a._v("混合收集（MixedGC）：收集整个新生代以及部分老年代的垃圾收集。\n"),s("ul",[s("li",[a._v("目前，只有G1 GC会有这种行为")])])])])]),a._v(" "),s("li",[a._v("整堆收集（Full GC）：收集整个java堆和方法区的垃圾收集。")])]),a._v(" "),s("h3",{attrs:{id:"_6-5-1-最简单的分代式gc策略的触发条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-1-最简单的分代式gc策略的触发条件"}},[a._v("#")]),a._v(" 6.5.1. 最简单的分代式GC策略的触发条件")]),a._v(" "),s("h3",{attrs:{id:"年轻代gc-minor-gc-触发机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#年轻代gc-minor-gc-触发机制"}},[a._v("#")]),a._v(" 年轻代GC（Minor GC）触发机制")]),a._v(" "),s("ul",[s("li",[a._v("当年轻代空间不足时，就会触发MinorGC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。（每次Minor GC会清理年轻代的内存。）")]),a._v(" "),s("li",[a._v("因为"),s("mark",[a._v("Java对象大多都具备朝生夕灭的特性")]),a._v(".，所以Minor GC非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。")]),a._v(" "),s("li",[a._v("Minor GC会引发STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-20-6267034ca0b2e11ab4af89cbc96150b0.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-20-fc27ac92486fdfae067ecb790ad448b7.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-20-5b4b2b6553d576a7d8151eec9eb0edb3.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"老年代gc-major-gc-full-gc-触发机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#老年代gc-major-gc-full-gc-触发机制"}},[a._v("#")]),a._v(" 老年代GC（Major GC / Full GC）触发机制")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("指发生在老年代的GC，对象从老年代消失时，我们说 “Major GC” 或 “Full GC” 发生了")])]),a._v(" "),s("li",[s("p",[a._v("出现了Major Gc，经常会伴随至少一次的Minor GC（但非绝对的，在Paralle1 Scavenge收集器的收集策略里就有直接进行MajorGC的策略选择过程）")]),a._v(" "),s("ul",[s("li",[a._v("也就是在老年代空间不足时，会先尝试触发Minor Gc。如果之后空间还不足，则触发Major GC")])])]),a._v(" "),s("li",[s("p",[a._v("Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长")])]),a._v(" "),s("li",[s("p",[a._v("如果Major GC后，内存还不足，就报OOM了")])])]),a._v(" "),s("h3",{attrs:{id:"full-gc触发机制-后面细讲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-gc触发机制-后面细讲"}},[a._v("#")]),a._v(" Full GC触发机制（后面细讲）：")]),a._v(" "),s("p",[a._v("触发Full GC执行的情况有如下五种：")]),a._v(" "),s("ol",[s("li",[a._v("调用System.gc()时，系统建议执行Full GC，但是不必然执行")]),a._v(" "),s("li",[a._v("老年代空间不足")]),a._v(" "),s("li",[a._v("方法区空间不足")]),a._v(" "),s("li",[a._v("通过Minor GC后进入老年代的平均大小大于老年代的可用内存")]),a._v(" "),s("li",[a._v("由Eden区、survivor space0（From Space）区向survivor space1（To Space）区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小")])]),a._v(" "),s("p",[s("mark",[a._v("说明：Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-20-785b8bbd48c06c0715de6c6b83a4811c.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-20-cde2c2d83f91f38ed479ea9d1aefbb7e.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"堆空间的分代思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆空间的分代思想"}},[a._v("#")]),a._v(" 堆空间的分代思想")]),a._v(" "),s("p",[a._v("为什么要把Java堆分代？不分代就不能正常工作了吗？")]),a._v(" "),s("p",[a._v("经研究，不同对象的生命周期不同。70%-99%的对象是临时对象。")]),a._v(" "),s("ul",[s("li",[a._v("新生代：有Eden、两块大小相同的survivor（又称为from/to，s0/s1）构成，to总为空。")]),a._v(" "),s("li",[a._v("老年代：存放新生代中经历多次GC仍然存活的对象。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-20-a50889674fdf201d50ef1ed72e641b98.png",alt:"image"}})]),a._v(" "),s("p",[a._v("其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-20-b444d227e585e7bc3514925560083080.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"内存的分配策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存的分配策略"}},[a._v("#")]),a._v(" 内存的分配策略")]),a._v(" "),s("p",[a._v("如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到survivor空间中，并将对象年龄设为1。对象在survivor区中每熬过一次MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代")]),a._v(" "),s("p",[a._v("对象晋升老年代的年龄阀值，可以通过选项"),s("code",[a._v("-XX:MaxTenuringThreshold")]),a._v("来设置")]),a._v(" "),s("p",[a._v("针对不同年龄段的对象分配原则如下所示：")]),a._v(" "),s("ul",[s("li",[a._v("优先分配到Eden")]),a._v(" "),s("li",[a._v("大对象直接分配到老年代（尽量避免程序中出现过多的大对象）")]),a._v(" "),s("li",[a._v("长期存活的对象分配到老年代")]),a._v(" "),s("li",[a._v("动态对象年龄判断：如果survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到"),s("code",[a._v("MaxTenuringThreshold")]),a._v("中要求的年龄。")]),a._v(" "),s("li",[a._v("空间分配担保： "),s("code",[a._v("-XX:HandlePromotionFailure")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-9da1d14b805af8d62e63b3066196ffbc.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-ecf78a1acb45ecdb440c4f819b0ba7a3.png",alt:"image"}})]),a._v(" "),s("p",[a._v("大对象晋升老年代")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-5fc6e99852dd3e00ece71553a1bd6c07.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-82d4e305c7cd746eeb46d5e319ce9f68.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"为对象分配内存-tlab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为对象分配内存-tlab"}},[a._v("#")]),a._v(" 为对象分配内存：TLAB")]),a._v(" "),s("h3",{attrs:{id:"_6-8-1-为什么有tlab-thread-local-allocation-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-1-为什么有tlab-thread-local-allocation-buffer"}},[a._v("#")]),a._v(" 6.8.1. 为什么有TLAB（Thread Local Allocation Buffer）？")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据")])]),a._v(" "),s("li",[s("p",[a._v("由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的")])]),a._v(" "),s("li",[s("p",[a._v("为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。")])])]),a._v(" "),s("h3",{attrs:{id:"_6-8-2-什么是tlab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-2-什么是tlab"}},[a._v("#")]),a._v(" 6.8.2. 什么是TLAB？")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为"),s("mark",[a._v("每个线程分配了一个私有缓存区域")]),a._v("，它包含在Eden空间内。")])]),a._v(" "),s("li",[s("p",[a._v("多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为"),s("mark",[a._v("快速分配策略")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("据我所知所有OpenJDK衍生出来的JVM都提供了TLAB的设计。")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-1e03a49b13b039f9a0a2ec3389eee1ac.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-a4f64407c4dcbde0521e73c8934d0608.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-2a3dada458d8fa70b602fdcee6e34b35.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"_6-8-3-tlab的再说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-3-tlab的再说明"}},[a._v("#")]),a._v(" 6.8.3. TLAB的再说明")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("尽管不是所有的对象实例都能够在TLAB中成功分配内存，但"),s("mark",[a._v("JVM确实是将TLAB作为内存分配的首选")]),a._v("。")])]),a._v(" "),s("li",[s("p",[a._v("在程序中，开发人员可以通过选项“"),s("code",[a._v("-XX:UseTLAB")]),a._v("”设置是否开启TLAB空间。")])]),a._v(" "),s("li",[s("p",[a._v("默认情况下，TLAB空间的内存非常小，"),s("mark",[a._v("仅占有整个Eden空间的1%")]),a._v("，当然我们可以通过选项 “"),s("code",[a._v("-XX:TLABWasteTargetPercent")]),a._v("” 设置TLAB空间所占用Eden空间的百分比大小。")])]),a._v(" "),s("li",[s("p",[a._v("一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-38cb48acecc9a3526d6b1ba7b29719c3.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-5248307c1094e238d18c63cf3cf086ef.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"小结堆空间的参数设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结堆空间的参数设置"}},[a._v("#")]),a._v(" 小结堆空间的参数设置")]),a._v(" "),s("h2",{attrs:{id:"_6-9-小结-堆空间的参数设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-小结-堆空间的参数设置"}},[a._v("#")]),a._v(" 6.9. 小结：堆空间的参数设置")]),a._v(" "),s("p",[a._v("官网地址："),s("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html"),s("OutboundLink")],1)]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 详细的参数内容会在JVM下篇：性能监控与调优篇中进行详细介绍，这里先熟悉下")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintFlagsInitial")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//查看所有的参数的默认初始值")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintFlagsFinal")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//查看所有的参数的最终值（可能会存在修改，不再是初始值）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xms")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//初始堆空间内存（默认为物理内存的1/64）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xmx")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//最大堆空间内存（默认为物理内存的1/4）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xmn")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//设置新生代的大小。（初始值及最大值）")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("NewRatio")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//配置新生代与老年代在堆结构的占比")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SurvivorRatio")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//设置新生代中Eden和S0/S1空间的比例")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MaxTenuringThreshold")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//设置新生代垃圾的最大年龄")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PrintGCDetails")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//输出详细的GC处理日志")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//打印gc简要信息：①-Xx：+PrintGC ② - verbose:gc")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HandlePromotionFalilure")]),a._v("："),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//是否设置空间分配担保")]),a._v("\n")])])]),s("p",[a._v("在发生Minor GC之前，虚拟机会"),s("mark",[a._v("检查老年代最大可用的连续空间是否大于新生代所有对象的总空间")]),a._v("。")]),a._v(" "),s("ul",[s("li",[a._v("如果大于，则此次Minor GC是安全的")]),a._v(" "),s("li",[a._v("如果小于，则虚拟机会查看"),s("code",[a._v("-XX:HandlePromotionFailure")]),a._v("设置值是否允担保失败。\n"),s("ul",[s("li",[a._v("如果"),s("code",[a._v("HandlePromotionFailure=true")]),a._v("，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。\n"),s("ul",[s("li",[a._v("如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；")]),a._v(" "),s("li",[a._v("如果小于，则改为进行一次Full GC。")])])]),a._v(" "),s("li",[a._v("如果"),s("code",[a._v("HandlePromotionFailure=false")]),a._v("，则改为进行一次Full Gc。")])])])]),a._v(" "),s("p",[a._v("在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为"),s("mark",[a._v("只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC")]),a._v("，否则将进行FullGC。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-ff4b309315036902fa06a9005411855a.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-3505d0448c17eea52665c6f5f2a71806.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"测试-printflagsfinal-对比-初始值和设置值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#测试-printflagsfinal-对比-初始值和设置值"}},[a._v("#")]),a._v(" 测试 PrintFlagsFinal 对比，初始值和设置值")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-1247422575c55d1552bd41a8b3c09b1e.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-70ac51c7ac91dbbb427c584c98210fe6.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"堆是分配的对象的唯一选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆是分配的对象的唯一选择"}},[a._v("#")]),a._v(" 堆是分配的对象的唯一选择")]),a._v(" "),s("p",[a._v("在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：")]),a._v(" "),s("blockquote",[s("p",[a._v("随着JIT编译期的发展与"),s("mark",[a._v("逃逸分析技术")]),a._v("逐渐成熟，"),s("mark",[a._v("栈上分配")]),a._v("、"),s("mark",[a._v("标量替换优化技术")]),a._v("将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。")])]),a._v(" "),s("p",[a._v("在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是"),s("mark",[a._v("如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配")]),a._v(".。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。")]),a._v(" "),s("p",[a._v("此外，前面提到的基于OpenJDK深度定制的TaoBaoVM，其中创新的GCIH（GC invisible heap）技术实现off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。")]),a._v(" "),s("h3",{attrs:{id:"_6-x-1-逃逸分析概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-x-1-逃逸分析概述"}},[a._v("#")]),a._v(" 6.X.1. 逃逸分析概述")]),a._v(" "),s("p",[a._v("如何将堆上的对象分配到栈，需要使用逃逸分析手段。")]),a._v(" "),s("p",[a._v("这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。")]),a._v(" "),s("p",[a._v("通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。")]),a._v(" "),s("p",[a._v("逃逸分析的基本行为就是分析对象动态作用域：")]),a._v(" "),s("ul",[s("li",[a._v("当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。")]),a._v(" "),s("li",[a._v("当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。")])]),a._v(" "),s("p",[s("strong",[a._v("举例1")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("my_method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),a._v(" v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// use v")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ....")]),a._v("\n    v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("没有发生逃逸的对象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除，每个栈里面包含了很多栈帧")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringBuffer")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("createStringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringBuffer")]),a._v(" sb "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("上述方法如果想要"),s("code",[a._v("StringBuffer sb")]),a._v("不发生逃逸，可以这样写")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("createStringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringBuffer")]),a._v(" sb "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" sb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("strong",[a._v("举例2")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 方法返回EscapeAnalysis对象，发生逃逸\n     * @return\n     */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 为成员属性赋值，发生逃逸\n     */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setObj")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 对象的作用于仅在当前方法中有效，没有发生逃逸\n     */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("useEscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 引用成员变量的值，发生逃逸\n     */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("useEscapeAnalysis2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("EscapeAnalysis")]),a._v(" e "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("strong",[a._v("参数设置")])]),a._v(" "),s("p",[a._v("在JDK 6u23 版本之后，HotSpot中默认就已经开启了逃逸分析")]),a._v(" "),s("p",[a._v("如果使用的是较早的版本，开发人员则可以通过：")]),a._v(" "),s("ul",[s("li",[a._v("选项“"),s("code",[a._v("-XX:+DoEscapeAnalysis")]),a._v('"显式开启逃逸分析')]),a._v(" "),s("li",[a._v("通过选项“"),s("code",[a._v("-XX:+PrintEscapeAnalysis")]),a._v('"查看逃逸分析的筛选结果')])]),a._v(" "),s("p",[s("strong",[a._v("结论")]),a._v("："),s("mark",[a._v("开发中能使用局部变量的，就不要使用在方法外定义。")])]),a._v(" "),s("h3",{attrs:{id:"_6-x-2-逃逸分析-代码优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-x-2-逃逸分析-代码优化"}},[a._v("#")]),a._v(" 6.X.2. 逃逸分析：代码优化")]),a._v(" "),s("p",[a._v("使用逃逸分析，编译器可以对代码做如下优化：")]),a._v(" "),s("p",[a._v("一、"),s("mark",[a._v("栈上分配")]),a._v("：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配")]),a._v(" "),s("p",[a._v("二、"),s("mark",[a._v("同步省略")]),a._v("：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。")]),a._v(" "),s("p",[a._v("三、"),s("mark",[a._v("分离对象或标量替换")]),a._v("：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。")]),a._v(" "),s("h4",{attrs:{id:"栈上分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈上分配"}},[a._v("#")]),a._v(" 栈上分配")]),a._v(" "),s("p",[a._v("JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。")]),a._v(" "),s("p",[s("strong",[a._v("常见的栈上分配的场景")])]),a._v(" "),s("p",[a._v("在逃逸分析中，已经说明了。分别是给成员变量赋值、方法返回值、实例引用传递。")]),a._v(" "),s("h4",{attrs:{id:"同步省略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步省略"}},[a._v("#")]),a._v(" 同步省略")]),a._v(" "),s("p",[a._v("线程同步的代价是相当高的，同步的后果是降低并发性和性能。")]),a._v(" "),s("p",[a._v("在动态编译同步块的时候，JIT编译器可以"),s("mark",[a._v("借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程")]),a._v("。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫"),s("mark",[a._v("锁消除")]),a._v("。")]),a._v(" "),s("p",[s("strong",[a._v("举例")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" hellis "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("hellis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("hellis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("代码中对hellis这个对象加锁，但是hellis对象的生命周期只在f()方法中，并不会被其他线程所访问到，所以在JIT编译阶段就会被优化掉，优化成：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" hellis "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("hellis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h4",{attrs:{id:"标量替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标量替换"}},[a._v("#")]),a._v(" 标量替换")]),a._v(" "),s("p",[s("mark",[a._v("标量（scalar）")]),a._v("是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。")]),a._v(" "),s("p",[a._v("相对的，那些还可以分解的数据叫做"),s("mark",[a._v("聚合量（Aggregate）")]),a._v("，Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。")]),a._v(" "),s("p",[a._v("在JIT阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。")]),a._v(" "),s("p",[s("strong",[a._v("举例")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Point")]),a._v(" point "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Point")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"point.x"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('";point.y"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Point")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("以上代码，经过标量替换后，就会变成")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("alloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"point.x = "')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"; point.y="')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。 标量替换为栈上分配提供了很好的基础。")]),a._v(" "),s("p",[s("strong",[a._v("标量替换参数设置")])]),a._v(" "),s("p",[a._v("参数"),s("code",[a._v("-XX:EliminateAllocations")]),a._v("：开启了标量替换（默认打开），允许将对象打散分配到栈上。")]),a._v(" "),s("p",[a._v("上述代码在主函数中进行了1亿次alloc。调用进行对象创建，由于User对象实例需要占据约16字节的空间，因此累计分配空间达到将近1.5GB。如果堆空间小于这个值，就必然会发生GC。使用如下参数运行上述代码：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations\n")])])]),s("p",[a._v("这里设置参数如下：")]),a._v(" "),s("ul",[s("li",[a._v("参数"),s("code",[a._v("-server")]),a._v("：启动Server模式，因为在server模式下，才可以启用逃逸分析。")]),a._v(" "),s("li",[a._v("参数"),s("code",[a._v("-XX:+DoEscapeAnalysis")]),a._v("：启用逃逸分析")]),a._v(" "),s("li",[a._v("参数"),s("code",[a._v("-Xmx10m")]),a._v("：指定了堆空间最大为10MB")]),a._v(" "),s("li",[a._v("参数"),s("code",[a._v("-XX:+PrintGC")]),a._v("：将打印Gc日志")]),a._v(" "),s("li",[a._v("参数"),s("code",[a._v("-XX:+EliminateAllocations")]),a._v("：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配")])]),a._v(" "),s("h3",{attrs:{id:"_6-x-3-逃逸分析小结-逃逸分析并不成熟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-x-3-逃逸分析小结-逃逸分析并不成熟"}},[a._v("#")]),a._v(" 6.X.3. 逃逸分析小结：逃逸分析并不成熟")]),a._v(" "),s("p",[a._v("关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟。")]),a._v(" "),s("p",[a._v("其根本原因就是"),s("mark",[a._v("无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。 ")])]),a._v(" "),s("p",[a._v("一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。")]),a._v(" "),s("p",[a._v("虽然这项技术并不十分成熟，但是它也"),s("mark",[a._v("是即时编译器优化技术中一个十分重要的手段")]),a._v("。")]),a._v(" "),s("p",[a._v("注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JVM设计者的选择。据我所知，Oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确"),s("mark",[a._v("所有的对象实例都是创建在堆上")]),a._v("。")]),a._v(" "),s("p",[a._v("目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。")]),a._v(" "),s("hr"),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-19580abd1735aa1b032d7894b0f339e8.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-bcdd18403bf2f21048c327eeadd04d92.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-bfc75f0348a45229bf36bc7fafb8ea18.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-e5696a83b93fce74901845b4152ed0d3.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"栈上分配-开启逃逸分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈上分配-开启逃逸分析"}},[a._v("#")]),a._v(" 栈上分配(开启逃逸分析)")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-2eea469a4cac1fd86bfa92bf8c636eef.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-75e33a59feb2b04f2fe44f8c1dc66015.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-3d657791c0fd67fc560f3fff81ed4a66.png",alt:"image"}})]),a._v(" "),s("p",[a._v("![image-20201122115931107](/Users/apple/Library/Application Support/typora-user-images/image-20201122115931107.png)")]),a._v(" "),s("p",[a._v("先不开启逃逸分析")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-ef397739664f63edeadce676456507e0.png",alt:"image"}})]),a._v(" "),s("p",[a._v("花费时间")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-1185ea93cff8e493ea8008ae0da6b329.png",alt:"image"}})]),a._v(" "),s("p",[a._v("抽样 堆内存中有一千万个")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-b7a01cd436a455d84e8ceb432160e20e.png",alt:"image"}})]),a._v(" "),s("p",[a._v("开启逃逸分析")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-4a6f3c76e28b5da41b2d6b02c4e41309.png",alt:"image"}})]),a._v(" "),s("p",[a._v("花费时间")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-4652feae270b449a5f59d39dbd164da0.png",alt:"image"}})]),a._v(" "),s("p",[a._v("抽样器 堆上面根本没有")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-2fd9211344eb12c3f27eab38d6a3172d.png",alt:"image"}})]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("改小堆空间")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-b1924d9c67529674371dd3ea3bf80b6d.png",alt:"image"}})]),a._v(" "),s("p",[a._v("没有开启逃逸分析")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-0df0a07e203a75ff58b1d0fe3238212d.png",alt:"image"}})]),a._v(" "),s("p",[a._v("开启逃逸分析 根本就没有发现GC")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-ddcdd66866fe9d18f414b6db7e30536b.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"同步省略-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步省略-2"}},[a._v("#")]),a._v(" 同步省略")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-1b373808f88c89e4522ed65b9c78bfd3.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-bfcd0c4db82e28fee5af3fb73d0822f5.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("在字节码文件中，还是有 相应锁的密码的，逃逸分析是在运行的时候，才会考虑把它取消掉")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-9fd14fe7bf1501272025f28b252f2c98.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"标量替换-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标量替换-2"}},[a._v("#")]),a._v(" 标量替换")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-ed670c505b90ef05bb04a0d7724ea10b.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-eed31dc534b44e5bdc7b830331ef807b.png",alt:"image"}})]),a._v(" "),s("p",[a._v("测试")]),a._v(" "),s("p",[a._v("先不开启标量替换")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-1352cea6493253cfb1fbe6ffa1e42f4a.png",alt:"image"}})]),a._v(" "),s("p",[a._v("执行了GC操作")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-0a2d93e48678a134896149e3b06f1ef7.png",alt:"image"}})]),a._v(" "),s("p",[a._v("开启标量替换")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-d3393f2b93ede818f519ae4cfd16c0dc.png",alt:"image"}})]),a._v(" "),s("p",[a._v("很快，没有GC")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-4b812435d873d584db643b4b4f31e077.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-e58b13c6bd7b898a5d3d5aa2d9ce0ec5.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"小结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),s("p",[a._v("年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。")]),a._v(" "),s("p",[a._v("老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。")]),a._v(" "),s("p",[a._v("当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-22-483f23d9d9caf91bc9f62f81c95ccaa6.png",alt:"image"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);