(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{567:function(a,t,s){"use strict";s.r(t);var r=s(14),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"kafka核心技术与实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka核心技术与实战"}},[a._v("#")]),a._v(" Kafka核心技术与实战")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#开篇词-为什么要学习kafka"}},[a._v("开篇词 | 为什么要学习Kafka？")])]),s("li",[s("a",{attrs:{href:"#_01-消息引擎系统abc"}},[a._v("01 | 消息引擎系统ABC")]),s("ul",[s("li",[s("a",{attrs:{href:"#kafka是什么"}},[a._v("kafka是什么？")]),s("ul",[s("li",[s("a",{attrs:{href:"#根据维基百科的定义"}},[a._v("根据维基百科的定义")])]),s("li",[s("a",{attrs:{href:"#民间说法"}},[a._v("民间说法")])]),s("li",[s("a",{attrs:{href:"#两个事实"}},[a._v("两个事实")])])])]),s("li",[s("a",{attrs:{href:"#消息格式"}},[a._v("消息格式")])]),s("li",[s("a",{attrs:{href:"#传输协议"}},[a._v("传输协议")])]),s("li",[s("a",{attrs:{href:"#消息引擎系统和jms的关系"}},[a._v("消息引擎系统和JMS的关系")])]),s("li",[s("a",{attrs:{href:"#削峰填谷"}},[a._v("削峰填谷")])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_02-一篇文章带你快速搞定kafka术语"}},[a._v("02 | 一篇文章带你快速搞定Kafka术语")]),s("ul",[s("li",[s("a",{attrs:{href:"#副本-保证持久化或消息不丢失"}},[a._v("副本（保证持久化或消息不丢失）")])]),s("li",[s("a",{attrs:{href:"#scalability-伸缩性"}},[a._v("Scalability（伸缩性）")])]),s("li",[s("a",{attrs:{href:"#kafka三层消息架构"}},[a._v("Kafka三层消息架构")])]),s("li",[s("a",{attrs:{href:"#kafka如何持久化"}},[a._v("Kafka如何持久化？")])]),s("li",[s("a",{attrs:{href:"#kafka怎么删除日志"}},[a._v("Kafka怎么删除日志？")])]),s("li",[s("a",{attrs:{href:"#什么是消费者组"}},[a._v("什么是消费者组？")])]),s("li",[s("a",{attrs:{href:"#为什么需要消费者组"}},[a._v("为什么需要消费者组？")])]),s("li",[s("a",{attrs:{href:"#什么是消费者位移-consumer-offset"}},[a._v("什么是消费者位移（Consumer Offset）")])]),s("li",[s("a",{attrs:{href:"#消费者位移与消息位移有什么区别"}},[a._v("消费者位移与消息位移有什么区别？")])]),s("li",[s("a",{attrs:{href:"#总结"}},[a._v("总结")])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_03-kafka只是消息引擎系统吗"}},[a._v("03 | Kafka只是消息引擎系统吗？")]),s("ul",[s("li",[s("a",{attrs:{href:"#apache-kafka-真的只是消息引擎吗"}},[a._v("Apache Kafka 真的只是消息引擎吗")])]),s("li",[s("a",{attrs:{href:"#kafka-在设计之初就旨在提供三个方面的特性"}},[a._v("Kafka 在设计之初就旨在提供三个方面的特性：")])]),s("li",[s("a",{attrs:{href:"#kafka-社区的思考"}},[a._v("Kafka 社区的思考")])]),s("li",[s("a",{attrs:{href:"#kafka-与其他主流大数据流式计算框架相比-优势在哪里"}},[a._v("Kafka 与其他主流大数据流式计算框架相比，优势在哪里？")]),s("ul",[s("li",[s("a",{attrs:{href:"#第一点是更容易实现端到端的正确性-correctness"}},[a._v("第一点是更容易实现端到端的正确性（Correctness）")])]),s("li",[s("a",{attrs:{href:"#可能助力-kafka-胜出的第二点是它自己对于流式计算的定位。"}},[a._v("可能助力 Kafka 胜出的第二点是它自己对于流式计算的定位。")])])])])])]),s("li",[s("a",{attrs:{href:"#_04-我应该选择哪种kafka"}},[a._v("04 | 我应该选择哪种Kafka？")]),s("ul",[s("li",[s("a",{attrs:{href:"#你知道几种-kafka"}},[a._v("你知道几种 Kafka？")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-apache-kafka"}},[a._v("1. Apache Kafka")])]),s("li",[s("a",{attrs:{href:"#_2-confluent-kafka"}},[a._v("2. Confluent Kafka")])]),s("li",[s("a",{attrs:{href:"#_3-cloudera-hortonworks-kafka"}},[a._v("3. Cloudera/Hortonworks Kafka")])])])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_05-聊聊kafka的版本号"}},[a._v("05 | 聊聊Kafka的版本号")]),s("ul",[s("li",[s("a",{attrs:{href:"#版本演进"}},[a._v("版本演进")])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_06-kafka线上集群部署方案怎么做"}},[a._v("06 | Kafka线上集群部署方案怎么做？")]),s("ul",[s("li",[s("a",{attrs:{href:"#操作系统"}},[a._v("操作系统")])]),s("li",[s("a",{attrs:{href:"#磁盘"}},[a._v("磁盘")]),s("ul",[s("li",[s("a",{attrs:{href:"#是否使用raid"}},[a._v("是否使用RAID")])]),s("li",[s("a",{attrs:{href:"#建议"}},[a._v("建议")])])])]),s("li",[s("a",{attrs:{href:"#磁盘容量"}},[a._v("磁盘容量")]),s("ul",[s("li",[s("a",{attrs:{href:"#考虑的点"}},[a._v("考虑的点：")])])])]),s("li",[s("a",{attrs:{href:"#带宽"}},[a._v("带宽")])])])]),s("li",[s("a",{attrs:{href:"#_07-最最最重要的集群参数配置-上"}},[a._v("07 | 最最最重要的集群参数配置（上）")]),s("ul",[s("li",[s("a",{attrs:{href:"#broker-端参数"}},[a._v("Broker 端参数")]),s("ul",[s("li",[s("a",{attrs:{href:"#存储相关"}},[a._v("存储相关")])]),s("li",[s("a",{attrs:{href:"#zookeeper相关"}},[a._v("ZooKeeper相关")])]),s("li",[s("a",{attrs:{href:"#broker-连接"}},[a._v("Broker 连接")])]),s("li",[s("a",{attrs:{href:"#topic管理"}},[a._v("Topic管理")])]),s("li",[s("a",{attrs:{href:"#数据留存方面的"}},[a._v("数据留存方面的")])])])])])]),s("li",[s("a",{attrs:{href:"#_08-最最最重要的集群参数配置-下"}},[a._v("08 | 最最最重要的集群参数配置（下）")]),s("ul",[s("li",[s("a",{attrs:{href:"#topic-级别参数"}},[a._v("Topic 级别参数")])]),s("li",[s("a",{attrs:{href:"#设置方式"}},[a._v("设置方式")]),s("ul",[s("li",[s("a",{attrs:{href:"#创建的时候设置"}},[a._v("创建的时候设置")])]),s("li",[s("a",{attrs:{href:"#修改-topic-时设置"}},[a._v("修改 Topic 时设置")])])])]),s("li",[s("a",{attrs:{href:"#jvm-参数"}},[a._v("JVM 参数")]),s("ul",[s("li",[s("a",{attrs:{href:"#堆大小"}},[a._v("堆大小")])]),s("li",[s("a",{attrs:{href:"#gc"}},[a._v("GC")])]),s("li",[s("a",{attrs:{href:"#如何设置"}},[a._v("如何设置")])])])]),s("li",[s("a",{attrs:{href:"#操作系统参数"}},[a._v("操作系统参数")]),s("ul",[s("li",[s("a",{attrs:{href:"#文件描述符限制"}},[a._v("文件描述符限制")])]),s("li",[s("a",{attrs:{href:"#文件系统类型"}},[a._v("文件系统类型")])]),s("li",[s("a",{attrs:{href:"#swappiness"}},[a._v("Swappiness")])]),s("li",[s("a",{attrs:{href:"#提交时间"}},[a._v("提交时间")])])])])])]),s("li",[s("a",{attrs:{href:"#_09-生产者消息分区机制原理剖析"}},[a._v("09 | 生产者消息分区机制原理剖析")]),s("ul",[s("li",[s("a",{attrs:{href:"#为什么分区"}},[a._v("为什么分区")])]),s("li",[s("a",{attrs:{href:"#分区策略"}},[a._v("分区策略")]),s("ul",[s("li",[s("a",{attrs:{href:"#轮询策略-round-robin-顺序分配-默认的分区策略"}},[a._v("轮询策略 Round-robin 顺序分配，默认的分区策略")])]),s("li",[s("a",{attrs:{href:"#随机策略-randomness"}},[a._v("随机策略 Randomness，")])]),s("li",[s("a",{attrs:{href:"#按消息键保序策略-key-ordering-策略"}},[a._v("按消息键保序策略  Key-ordering 策略")])])])])])]),s("li",[s("a",{attrs:{href:"#_10-生产者压缩算法面面观"}},[a._v("10 | 生产者压缩算法面面观")]),s("ul",[s("li",[s("a",{attrs:{href:"#怎么压缩"}},[a._v("怎么压缩")]),s("ul",[s("li",[s("a",{attrs:{href:"#v2和v1有什么区别-做了什么改进"}},[a._v("v2和v1有什么区别？做了什么改进？")])]),s("li",[s("a",{attrs:{href:"#压缩方式的变化"}},[a._v("压缩方式的变化")])])])]),s("li",[s("a",{attrs:{href:"#什么时候压缩"}},[a._v("什么时候压缩")])]),s("li",[s("a",{attrs:{href:"#何时解压缩"}},[a._v("何时解压缩？")]),s("ul",[s("li",[s("a",{attrs:{href:"#消费者程序"}},[a._v("消费者程序")])]),s("li",[s("a",{attrs:{href:"#broker端解压缩"}},[a._v("broker端解压缩")])])])]),s("li",[s("a",{attrs:{href:"#压缩算法对比"}},[a._v("压缩算法对比")])]),s("li",[s("a",{attrs:{href:"#最佳实践"}},[a._v("最佳实践")])]),s("li",[s("a",{attrs:{href:"#消息结构的描述补充"}},[a._v("消息结构的描述补充：")])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_11-无消息丢失配置怎么实现"}},[a._v("11 | 无消息丢失配置怎么实现？")]),s("ul",[s("li",[s("a",{attrs:{href:"#那-kafka-到底在什么情况下才能保证消息不丢失呢"}},[a._v("那 Kafka 到底在什么情况下才能保证消息不丢失呢？")]),s("ul",[s("li",[s("a",{attrs:{href:"#已提交的消息"}},[a._v("已提交的消息")])])])]),s("li",[s("a",{attrs:{href:"#有限度的持久化"}},[a._v("有限度的持久化")])]),s("li",[s("a",{attrs:{href:"#案例-1-生产者程序丢失数据"}},[a._v("案例 1：生产者程序丢失数据")]),s("ul",[s("li",[s("a",{attrs:{href:"#原因"}},[a._v("原因")])]),s("li",[s("a",{attrs:{href:"#解决"}},[a._v("解决")])])])]),s("li",[s("a",{attrs:{href:"#案例-2-消费者程序丢失数据"}},[a._v("案例 2：消费者程序丢失数据")])]),s("li",[s("a",{attrs:{href:"#最佳实践"}},[a._v("最佳实践")])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_12-客户端都有哪些不常见但是很高级的功能"}},[a._v("12 | 客户端都有哪些不常见但是很高级的功能？")]),s("ul",[s("li",[s("a",{attrs:{href:"#什么是拦截器"}},[a._v("什么是拦截器？")])]),s("li",[s("a",{attrs:{href:"#kafka-拦截器"}},[a._v("Kafka 拦截器")]),s("ul",[s("li",[s("a",{attrs:{href:"#应用场景"}},[a._v("应用场景")])])])]),s("li",[s("a",{attrs:{href:"#拦截器案例-消息端到端处理的延时"}},[a._v("拦截器案例 - 消息端到端处理的延时")])])])]),s("li",[s("a",{attrs:{href:"#_13-java生产者是如何管理tcp连接的"}},[a._v("13 | Java生产者是如何管理TCP连接的？")]),s("ul",[s("li",[s("a",{attrs:{href:"#何时创建-tcp-连接"}},[a._v("何时创建 TCP 连接？")])]),s("li",[s("a",{attrs:{href:"#何时关闭-tcp-连接"}},[a._v("何时关闭 TCP 连接？")])]),s("li",[s("a",{attrs:{href:"#小结"}},[a._v("小结")])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_14-幂等生产者和事务生产者是一回事吗"}},[a._v("14 | 幂等生产者和事务生产者是一回事吗？")]),s("ul",[s("li",[s("a",{attrs:{href:"#消息交付可靠性保障-是指-kafka-对-producer-和-consumer-要处理的消息提供什么样的承诺"}},[a._v("消息交付可靠性保障，是指 Kafka 对 Producer 和 Consumer 要处理的消息提供什么样的承诺")])]),s("li",[s("a",{attrs:{href:"#什么是幂等性-idempotence"}},[a._v("什么是幂等性（Idempotence）？")]),s("ul",[s("li",[s("a",{attrs:{href:"#幂等性-producer"}},[a._v("幂等性 Producer")])]),s("li",[s("a",{attrs:{href:"#幂等性-producer作用范围"}},[a._v("幂等性 Producer作用范围")])])])]),s("li",[s("a",{attrs:{href:"#事务"}},[a._v("事务")])]),s("li",[s("a",{attrs:{href:"#事务性producer"}},[a._v("事务性Producer")])]),s("li",[s("a",{attrs:{href:"#小结"}},[a._v("小结")])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_15-消费者组到底是什么"}},[a._v("15 | 消费者组到底是什么？")]),s("ul",[s("li",[s("a",{attrs:{href:"#rebalance"}},[a._v("Rebalance")]),s("ul",[s("li",[s("a",{attrs:{href:"#rebalance缺点"}},[a._v("Rebalance缺点")])])])])])]),s("li",[s("a",{attrs:{href:"#_16-揭开神秘的-位移主题-面纱"}},[a._v("16 | 揭开神秘的“位移主题”面纱")]),s("ul",[s("li",[s("a",{attrs:{href:"#设计"}},[a._v("设计")])]),s("li",[s("a",{attrs:{href:"#创建时机"}},[a._v("创建时机")])]),s("li",[s("a",{attrs:{href:"#怎么用"}},[a._v("怎么用")])]),s("li",[s("a",{attrs:{href:"#compact策略"}},[a._v("Compact策略")])])])]),s("li",[s("a",{attrs:{href:"#_17-消费者组重平衡能避免吗"}},[a._v("17 | 消费者组重平衡能避免吗？")]),s("ul",[s("li",[s("a",{attrs:{href:"#协调者"}},[a._v("协调者")])]),s("li",[s("a",{attrs:{href:"#如何确定-consumer-group-为他服务的-协调者在哪个broker上呢"}},[a._v("如何确定 consumer group 为他服务的 协调者在哪个broker上呢？")])]),s("li",[s("a",{attrs:{href:"#rebalance-弊端"}},[a._v("Rebalance 弊端")])]),s("li",[s("a",{attrs:{href:"#如何避免"}},[a._v("如何避免")]),s("ul",[s("li",[s("a",{attrs:{href:"#发生的时机"}},[a._v("发生的时机")])])])]),s("li",[s("a",{attrs:{href:"#组成员数量变化而引发的-rebalance-该如何避免。"}},[a._v("组成员数量变化而引发的 Rebalance 该如何避免。")])])])]),s("li",[s("a",{attrs:{href:"#_18-kafka中位移提交那些事儿"}},[a._v("18 | Kafka中位移提交那些事儿")]),s("ul",[s("li",[s("a",{attrs:{href:"#自动提交的问题"}},[a._v("自动提交的问题")])]),s("li",[s("a",{attrs:{href:"#手动提交"}},[a._v("手动提交")])]),s("li",[s("a",{attrs:{href:"#qa"}},[a._v("QA")])])])]),s("li",[s("a",{attrs:{href:"#_20-多线程开发消费者实例"}},[a._v("20 | 多线程开发消费者实例")]),s("ul",[s("li",[s("a",{attrs:{href:"#多线程方案"}},[a._v("多线程方案")]),s("ul",[s("li",[s("a",{attrs:{href:"#方案一"}},[a._v("方案一")])]),s("li",[s("a",{attrs:{href:"#方案二"}},[a._v("方案二")])]),s("li",[s("a",{attrs:{href:"#对比"}},[a._v("对比")])])])])])]),s("li",[s("a",{attrs:{href:"#_21-java-消费者是如何管理tcp连接的"}},[a._v("21 | Java 消费者是如何管理TCP连接的?")]),s("ul",[s("li",[s("a",{attrs:{href:"#何时创建-tcp-连接"}},[a._v("何时创建 TCP 连接？")])]),s("li",[s("a",{attrs:{href:"#何时关闭-tcp-连接"}},[a._v("何时关闭 TCP 连接？")])])])]),s("li",[s("a",{attrs:{href:"#_22-消费者组消费进度监控都怎么实现"}},[a._v("22 | 消费者组消费进度监控都怎么实现？")]),s("ul",[s("li",[s("a",{attrs:{href:"#kafka-jmx-监控指标"}},[a._v("Kafka JMX 监控指标")])])])]),s("li",[s("a",{attrs:{href:"#_23-kafka副本机制详解"}},[a._v("23 | Kafka副本机制详解")]),s("ul",[s("li",[s("a",{attrs:{href:"#副本机制的优点"}},[a._v("副本机制的优点")])]),s("li",[s("a",{attrs:{href:"#副本定义"}},[a._v("副本定义")])]),s("li",[s("a",{attrs:{href:"#副本角色"}},[a._v("副本角色")])]),s("li",[s("a",{attrs:{href:"#in-sync-replicas-isr"}},[a._v("In-sync replicas(ISR)")])]),s("li",[s("a",{attrs:{href:"#unclean-领导者选举-unclean-leader-election"}},[a._v("Unclean 领导者选举（Unclean Leader Election）")])])])]),s("li",[s("a",{attrs:{href:"#_24-请求是怎么被处理的"}},[a._v("24 | 请求是怎么被处理的？")]),s("ul",[s("li",[s("a",{attrs:{href:"#reactor模式"}},[a._v("Reactor模式")])]),s("li",[s("a",{attrs:{href:"#purgatory"}},[a._v("Purgatory")])])])]),s("li",[s("a",{attrs:{href:"#_25-消费者组重平衡全流程解析"}},[a._v("25 | 消费者组重平衡全流程解析")]),s("ul",[s("li",[s("a",{attrs:{href:"#触发与通知"}},[a._v("触发与通知")])]),s("li",[s("a",{attrs:{href:"#如何通知"}},[a._v("如何通知")])]),s("li",[s("a",{attrs:{href:"#消费者组状态机"}},[a._v("消费者组状态机")])]),s("li",[s("a",{attrs:{href:"#消费者端重平衡流程"}},[a._v("消费者端重平衡流程")]),s("ul",[s("li",[s("a",{attrs:{href:"#消费者端"}},[a._v("消费者端")])])])]),s("li",[s("a",{attrs:{href:"#broker-端重平衡场景剖析"}},[a._v("Broker 端重平衡场景剖析")]),s("ul",[s("li",[s("a",{attrs:{href:"#场景一-新成员入组。"}},[a._v("场景一：新成员入组。")])]),s("li",[s("a",{attrs:{href:"#场景二-组成员主动离组。"}},[a._v("场景二：组成员主动离组。")])]),s("li",[s("a",{attrs:{href:"#场景三-组成员崩溃离组。"}},[a._v("场景三：组成员崩溃离组。")])]),s("li",[s("a",{attrs:{href:"#场景四-重平衡时协调者对组内成员提交位移的处理。"}},[a._v("场景四：重平衡时协调者对组内成员提交位移的处理。")])])])])])]),s("li",[s("a",{attrs:{href:"#_27-关于高水位和leader-epoch的讨论"}},[a._v("27 | 关于高水位和Leader Epoch的讨论")]),s("ul",[s("li",[s("a",{attrs:{href:"#什么是高水位"}},[a._v("什么是高水位？")])]),s("li",[s("a",{attrs:{href:"#高水位作用"}},[a._v("高水位作用")])]),s("li",[s("a",{attrs:{href:"#高水位的更新机制"}},[a._v("高水位的更新机制")])]),s("li",[s("a",{attrs:{href:"#hw和leo的更新机制"}},[a._v("HW和LEO的更新机制")]),s("ul",[s("li",[s("a",{attrs:{href:"#leader副本"}},[a._v("Leader副本")])]),s("li",[s("a",{attrs:{href:"#follower-副本"}},[a._v("Follower 副本")])])])]),s("li",[s("a",{attrs:{href:"#副本同步机制解析"}},[a._v("副本同步机制解析")])]),s("li",[s("a",{attrs:{href:"#leader-epoch"}},[a._v("Leader Epoch")]),s("ul",[s("li",[s("a",{attrs:{href:"#单纯依赖hw-数据丢失场景"}},[a._v("单纯依赖HW 数据丢失场景")])]),s("li",[s("a",{attrs:{href:"#leader-epoch-规避"}},[a._v("Leader Epoch 规避")])])])])])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"开篇词-为什么要学习kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开篇词-为什么要学习kafka"}},[a._v("#")]),a._v(" 开篇词 | 为什么要学习Kafka？")]),a._v(" "),s("p",[a._v("截止到 2019 年，当下互联网行业最火的技术当属 ABC 了，即所谓的 AI 人工智能、BigData 大数据和 Cloud 云计算云平台")]),a._v(" "),s("p",[a._v("大数据业务系统为公司业务服务的，所以通常来说它们仅仅是执行一些常规的业务逻辑，因此它们不能算是"),s("strong",[a._v("计算密集型应用，相反更应该是数据密集型")]),a._v("的。")]),a._v(" "),s("p",[a._v("如何应对"),s("strong",[a._v("数据量激增、数据复杂度增加以及数据变化速率变快")]),a._v(" 是个彰显能力的地方")]),a._v(" "),s("p",[a._v("kafka 起到了很好的效果。数据量激增来说，"),s("strong",[a._v("Kafka 能够有效隔离上下游业务，将上游突增的流量缓存起来，以平滑的方式传导到下游子系统中")]),a._v("，避免了流量的不规则冲击")]),a._v(" "),s("p",[a._v("一套框架就能在实际业务系统中实现"),s("strong",[a._v("消息引擎应用、应用程序集成、分布式存储构建，甚至是流处理应用的开发与部署")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-11-960bdb8bb7dcc17cf190b8806cd889a9.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_01-消息引擎系统abc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_01-消息引擎系统abc"}},[a._v("#")]),a._v(" 01 | 消息引擎系统ABC")]),a._v(" "),s("h3",{attrs:{id:"kafka是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka是什么"}},[a._v("#")]),a._v(" kafka是什么？")]),a._v(" "),s("p",[a._v("Apache Kafka 是一款开源的消息引擎系统。")]),a._v(" "),s("p",[a._v("这类系统引以为豪的消息传递属性，就像引擎一样，具备某种能量转换传输的能力，所以我觉得翻译成消息引擎反倒更加贴切。")]),a._v(" "),s("h4",{attrs:{id:"根据维基百科的定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据维基百科的定义"}},[a._v("#")]),a._v(" 根据维基百科的定义")]),a._v(" "),s("p",[a._v("消息引擎系统是一组规范。企业利用这组规范在不同系统之间传递语义准确的消息，实现松耦合的异步式数据传递。")]),a._v(" "),s("h4",{attrs:{id:"民间说法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#民间说法"}},[a._v("#")]),a._v(" 民间说法")]),a._v(" "),s("p",[a._v("系统 A 发送消息给消息引擎系统，系统 B 从消息引擎系统中读取 A 发送的消息。")]),a._v(" "),s("h4",{attrs:{id:"两个事实"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两个事实"}},[a._v("#")]),a._v(" 两个事实")]),a._v(" "),s("ol",[s("li",[a._v("消息引擎传输的对象是消息；")]),a._v(" "),s("li",[a._v("如何传输消息属于消息引擎设计机制的一部分。")])]),a._v(" "),s("h3",{attrs:{id:"消息格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息格式"}},[a._v("#")]),a._v(" 消息格式")]),a._v(" "),s("p",[a._v("Kafka 的选择：它使用的是"),s("strong",[a._v("纯二进制的字节序列")]),a._v("。当然消息还是结构化的，只是在使用之前都要将其转换成二进制的字节序列。")]),a._v(" "),s("h3",{attrs:{id:"传输协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传输协议"}},[a._v("#")]),a._v(" 传输协议")]),a._v(" "),s("ol",[s("li",[a._v("点对点模型  也叫消息队列模型   A发送消息，只能B接受 比如打电话，一个人打电话，只能一个客服接听")]),a._v(" "),s("li",[a._v("发布/订阅模型  它有一个主题（Topic）的概念 ，逻辑语义相近的容器  发送者（Publisher），接收方称为订阅者（Subscriber）,不同的是，不同发布者可往一个容器发，订阅者也可以存在多个。 "),s("strong",[a._v("订报纸")]),a._v(" 就是典型 发布/订阅模式")])]),a._v(" "),s("h3",{attrs:{id:"消息引擎系统和jms的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息引擎系统和jms的关系"}},[a._v("#")]),a._v(" 消息引擎系统和JMS的关系")]),a._v(" "),s("p",[a._v("JMS 是 Java Message Service，它也是支持上面这两种消息引擎模型的。严格来说它并非传输协议而仅仅是一组 API 罢了")]),a._v(" "),s("p",[a._v("很多主流消息引擎系统都支持 JMS 规范，比如 ActiveMQ、RabbitMQ、IBM 的 WebSphere MQ 和 Apache Kafka")]),a._v(" "),s("p",[a._v("kafka未完全遵循JMS，另辟蹊径")]),a._v(" "),s("blockquote",[s("p",[a._v("RabbitMQ属于比较传统的消息队列系统，支持标准的消息队列协议（AMQP, STOMP，MQTT等），如果你的应用程序需要支持这些协议，那么还是使用RabbitMQ。另外RabbitMQ支持比较复杂的consumer Routing，这点也是Kafka不提供的。")])]),a._v(" "),s("h3",{attrs:{id:"削峰填谷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#削峰填谷"}},[a._v("#")]),a._v(" 削峰填谷")]),a._v(" "),s("p",[a._v("为什么A不直接发送给B，就是因为削峰填谷")]),a._v(" "),s("p",[a._v("所谓的“削峰填谷”就是指缓冲上下游瞬时突发流量，使其更平滑")]),a._v(" "),s("p",[a._v("消息引擎系统的另一大好处在于发送方和接收方的"),s("strong",[a._v("松耦合")]),a._v("，简化开发，降低依赖")]),a._v(" "),s("p",[a._v("比如应对秒杀、下单这种场景，更常见的办法是引入像 Kafka 这样的消息引擎系统来对抗这种上下游系统 TPS 的错配以及瞬时峰值流量")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-11-589a40b82b97c0d5a381db319f8aeb13.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"qa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("kafka作为消息引擎（不考虑流式处理），对比其他消息引擎的优势，什么时候用kafka，什么时候用Active MQ等消息引擎？")]),a._v(" "),s("ol",[s("li",[s("blockquote",[s("p",[a._v("Active MQ属于传统的消息中间件，支持传统的消息传输协议（AMQP, STOMP, MQTT），而且这些传统中间件（比如RabbitMQ）都支持比较复杂的消息路由，这些都是Kafka不具备的。如果你的应用要支持这些协议或者是用于SOA中的应用互联，那么这些传统消息中间件比较合适。")]),a._v(" "),s("p",[a._v("反观Kafka还是在大数据场景下孕育的框架，如果你的场景都是大数据方面的，可以考虑使用Kafka。")])])])])])]),a._v(" "),s("h2",{attrs:{id:"_02-一篇文章带你快速搞定kafka术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_02-一篇文章带你快速搞定kafka术语"}},[a._v("#")]),a._v(" 02 | 一篇文章带你快速搞定Kafka术语")]),a._v(" "),s("h3",{attrs:{id:"副本-保证持久化或消息不丢失"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#副本-保证持久化或消息不丢失"}},[a._v("#")]),a._v(" 副本（保证持久化或消息不丢失）")]),a._v(" "),s("p",[a._v("实现高可用的另一个手段就是备份机制（"),s("strong",[a._v("Replication")]),a._v("）。备份的思想很简单，就是把相同的数据拷贝到多台机器上，而这些相同的数据拷贝在 Kafka 中被称为副本（Replica）")]),a._v(" "),s("p",[a._v("Kafka 定义了两类副本：领导者副本（Leader Replica）和追随者副本（Follower Replica） 前者提供服务，后者只是跟随前者。")]),a._v(" "),s("p",[a._v("副本的工作机制：生产者总是向领导者副本写消息；而消费者总是从领导者副本读消息。")]),a._v(" "),s("p",[a._v("至于追随者副本  一件事：向领导者副本发送请求，请求领导者把最新生产的消息发给它，这样它能保持与领导者的同步。")]),a._v(" "),s("h3",{attrs:{id:"scalability-伸缩性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scalability-伸缩性"}},[a._v("#")]),a._v(" Scalability（伸缩性）")]),a._v(" "),s("p",[a._v("就是所谓的分区（Partitioning） Kafka 中的分区机制指的是将每个主题划分成多个分区（Partition），每个分区是一组"),s("strong",[a._v("有序的消息日志")]),a._v("。生产者生产的每条消息只会被发送到"),s("strong",[a._v("一个分区")]),a._v("中")]),a._v(" "),s("p",[s("strong",[a._v("副本")]),a._v("是在分区这个层级定义的， 生产者向分区写入消息，每条消息在分区中的位置信息由一个叫**位移（Offset）**的数据来表征")]),a._v(" "),s("h3",{attrs:{id:"kafka三层消息架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka三层消息架构"}},[a._v("#")]),a._v(" Kafka三层消息架构")]),a._v(" "),s("ol",[s("li",[a._v("第一层是"),s("strong",[a._v("主题层")]),a._v("，每个主题可以配置 M 个分区，而每个分区又可以配置 N 个副本。")]),a._v(" "),s("li",[a._v("第二层是"),s("strong",[a._v("分区层")]),a._v("，每个分区的 N 个副本中只能有一个充当领导者角色，对外提供服务；其他 N-1 个副本是追随者副本，只是提供数据冗余之用。")]),a._v(" "),s("li",[a._v("第三层是"),s("strong",[a._v("消息层")]),a._v("，分区中包含若干条消息，每条消息的位移从 0 开始，依次递增。最后，客户端程序只能与分区的领导者副本进行交互。")])]),a._v(" "),s("h3",{attrs:{id:"kafka如何持久化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka如何持久化"}},[a._v("#")]),a._v(" Kafka如何持久化？")]),a._v(" "),s("p",[a._v("Kafka 使用消息日志（Log）来保存数据，一个日志就是磁盘上一个只能追加写（Append-only）消息的物理文件")]),a._v(" "),s("p",[a._v("只能追加。避免 随机io ，使用顺序I/O写操作")]),a._v(" "),s("h3",{attrs:{id:"kafka怎么删除日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka怎么删除日志"}},[a._v("#")]),a._v(" Kafka怎么删除日志？")]),a._v(" "),s("p",[a._v("通过"),s("strong",[a._v("日志段（Log Segment）机制。")])]),a._v(" "),s("p",[a._v("在 Kafka 底层，一个日志又进一步细分成多个"),s("strong",[a._v("日志段")]),a._v("，消息被追加写到当前最新的日志段中，")]),a._v(" "),s("p",[a._v("当写满了一个日志段后，Kafka 会自动切分出一个新的日志段，并将老的日志段封存起来。")]),a._v(" "),s("p",[a._v("Kafka 在后台还有定时任务会定期地检查老的日志段是否能够被删除，从而实现回收磁盘空间的目的。")]),a._v(" "),s("h3",{attrs:{id:"什么是消费者组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是消费者组"}},[a._v("#")]),a._v(" 什么是消费者组？")]),a._v(" "),s("p",[a._v("消费者组，指的是多个消费者实例共同组成一个组来消费一组主题。")]),a._v(" "),s("p",[a._v("这组主题中的每个分区都只会被组内的一个消费者实例消费，其他消费者实例不能消费它")]),a._v(" "),s("h3",{attrs:{id:"为什么需要消费者组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要消费者组"}},[a._v("#")]),a._v(" 为什么需要消费者组？")]),a._v(" "),s("p",[a._v("主要是为了提升消费者端的吞吐量。多个消费者实例同时消费，加速整个消费端的吞吐量（TPS）")]),a._v(" "),s("h3",{attrs:{id:"什么是消费者位移-consumer-offset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是消费者位移-consumer-offset"}},[a._v("#")]),a._v(" 什么是消费者位移（Consumer Offset）")]),a._v(" "),s("p",[a._v("每个消费者在消费消息的过程中必然需要有个字段记录它当前消费到了分区的哪个位置上，这个字段就是消费者位移（Consumer Offset）")]),a._v(" "),s("h3",{attrs:{id:"消费者位移与消息位移有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费者位移与消息位移有什么区别"}},[a._v("#")]),a._v(" 消费者位移与消息位移有什么区别？")]),a._v(" "),s("p",[a._v("上面的“位移”表征的是分区内的消息位置，它是不变的 ，一旦写入，固定不变")]),a._v(" "),s("p",[a._v("消费者位移是随时变化的，相当于一个指示器")]),a._v(" "),s("p",[a._v("个人把消息在分区中的位移称为分区位移，而把消费者端的位移称为消费者位移。")]),a._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("p",[s("strong",[a._v("消息")]),a._v("：Record。Kafka 是消息引擎嘛，这里的消息就是指 Kafka 处理的主要对象。")]),a._v(" "),s("p",[s("strong",[a._v("主题")]),a._v("：Topic。主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。")]),a._v(" "),s("p",[s("strong",[a._v("分区")]),a._v("：Partition。一个有序不变的消息序列。每个主题下可以有多个分区。")]),a._v(" "),s("p",[s("strong",[a._v("消息位移")]),a._v("：Offset。表示分区中每条消息的位置信息，是一个单调递增且不变的值。")]),a._v(" "),s("p",[s("strong",[a._v("副本")]),a._v("：Replica。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。")]),a._v(" "),s("p",[s("strong",[a._v("生产者")]),a._v("：Producer。向主题发布新消息的应用程序。")]),a._v(" "),s("p",[s("strong",[a._v("消费者")]),a._v("：Consumer。从主题订阅新消息的应用程序。")]),a._v(" "),s("p",[s("strong",[a._v("消费者位移")]),a._v("：Consumer Offset。表征消费者消费进度，每个消费者都有自己的消费者位移。")]),a._v(" "),s("p",[s("strong",[a._v("消费者组")]),a._v("：Consumer Group。多个消费者实例共同组成的一个组，同时消费多个分区以实现高吞吐。")]),a._v(" "),s("p",[s("strong",[a._v("重平衡")]),a._v("：Rebalance。消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static001.geekbang.org/resource/image/58/91/58c35d3ab0921bf0476e3ba14069d291.jpg",alt:"img"}})]),a._v(" "),s("h3",{attrs:{id:"qa-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa-2"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("某个消费者挂掉后，其他消费者如何消费")]),a._v(" "),s("p",[a._v("假设C1消费P0,P1, C2消费P2,P3。如果C1从未提交，C1挂掉，C2开始消费P0,P1，发现没有对应提交位移，那么按照C2的auto.offset.reset值决定从那里消费，如果是earliest，从P0，P1的最小位移值（可能不是0）开始消费，如果是latest，从P0, P1的最新位移值（分区高水位值）开始消费。但如果C1之前提交了位移，那么C1挂掉之后C2从C1最新一次提交的位移值开始消费。")]),a._v(" "),s("p",[a._v("所谓的重复消费是指，C1消费了一部分数据，还没来得及提交这部分数据的位移就挂了。C2承接过来之后会重新消费这部分数据。")])]),a._v(" "),s("li",[s("p",[a._v("为什么副本不提供对外读？")]),a._v(" "),s("p",[a._v("Kafka不采用主从分离的讨论最近火起来了。如果要让follower抗读，需要解决很多一致性的问题，另外Kafka也不属于典型的读多写少场景，"),s("strong",[a._v("主从分离")]),a._v("的优势不明显。")])]),a._v(" "),s("li",[s("p",[a._v("文中最后一个图所示，假如broker1挂掉，broker2上的follower副本会变为leader副本吗？假如不止一个follower副本，是不是有某种选举方式来决定哪个follower副本会升级为leader副本？")]),a._v(" "),s("p",[a._v("从follower中选择leader的算法如下：")]),a._v(" "),s("ol",[s("li",[a._v("从ISR中选择存活的第一个副本为新leader")]),a._v(" "),s("li",[a._v("如果ISR为空，看是否开启了unclea n leader选举，\n"),s("ol",[s("li",[a._v("如果没有开启，那么Kafka干脆就不选leader了，直接将分区置于不可用状态；")]),a._v(" "),s("li",[a._v("否则Kafka就从剩下的存活副本中选第一个副本作为leader（这里的顺序就是ZooKeeper中保存的副本集合顺序，即assigned_replicas项）")])])])])]),a._v(" "),s("li",[s("p",[a._v("客户端会首先请求topic分区的leader副本在哪个broker上，内部自动执行的,怎么选的？")]),a._v(" "),s("p",[a._v("客户端发送Metadata请求获取每个topic分区的leader，之后再发送真实的数据请求（Produce请求或Fetch请求）")])])]),a._v(" "),s("h2",{attrs:{id:"_03-kafka只是消息引擎系统吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_03-kafka只是消息引擎系统吗"}},[a._v("#")]),a._v(" 03 | Kafka只是消息引擎系统吗？")]),a._v(" "),s("h3",{attrs:{id:"apache-kafka-真的只是消息引擎吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#apache-kafka-真的只是消息引擎吗"}},[a._v("#")]),a._v(" Apache Kafka 真的只是消息引擎吗")]),a._v(" "),s("p",[a._v("Apache Kafka 是消息引擎系统，也是一个分布式流处理平台（Distributed Streaming Platform）")]),a._v(" "),s("h3",{attrs:{id:"kafka-在设计之初就旨在提供三个方面的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-在设计之初就旨在提供三个方面的特性"}},[a._v("#")]),a._v(" Kafka 在设计之初就旨在提供三个方面的特性：")]),a._v(" "),s("ol",[s("li",[a._v("提供一套 API 实现生产者和消费者；")]),a._v(" "),s("li",[a._v("降低网络传输和磁盘存储开销；")]),a._v(" "),s("li",[a._v("实现高伸缩性架构。")])]),a._v(" "),s("h3",{attrs:{id:"kafka-社区的思考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-社区的思考"}},[a._v("#")]),a._v(" Kafka 社区的思考")]),a._v(" "),s("p",[a._v("与其我把数据从一个系统传递到下一个系统中做处理，我为何不自己实现一套流处理框架呢？")]),a._v(" "),s("p",[a._v("于是 Kafka 社区于 0.10.0.0 版本正式推出了流处理组件 Kafka Streams")]),a._v(" "),s("p",[a._v("这个版本开始，Kafka 正式“变身”为"),s("strong",[a._v("分布式的流处理平台")]),a._v("，而不仅仅是"),s("strong",[a._v("消息引擎系统")]),a._v("了。今天 Apache Kafka 是和 Apache Storm、Apache Spark 和 Apache Flink 同等级的实时流处理平台。")]),a._v(" "),s("h3",{attrs:{id:"kafka-与其他主流大数据流式计算框架相比-优势在哪里"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-与其他主流大数据流式计算框架相比-优势在哪里"}},[a._v("#")]),a._v(" Kafka 与其他主流大数据流式计算框架相比，优势在哪里？")]),a._v(" "),s("h4",{attrs:{id:"第一点是更容易实现端到端的正确性-correctness"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一点是更容易实现端到端的正确性-correctness"}},[a._v("#")]),a._v(" 第一点是更容易实现端到端的正确性（Correctness）")]),a._v(" "),s("p",[a._v("谷歌大神Tyler：")]),a._v(" "),s("p",[a._v("流处理要替代他的兄弟“批处理” 需要具备两点核心优势：要实现正确性和提供能够推导时间的工具。实现正确性是流处理能够匹敌批处理的基石。")]),a._v(" "),s("p",[a._v("正确性一直是"),s("strong",[a._v("批处理")]),a._v("的强项，而实现正确性的"),s("strong",[a._v("基石")]),a._v("则是要求框架能提供"),s("strong",[a._v("精确一次处理语义")]),a._v("，")]),a._v(" "),s("p",[s("strong",[a._v("即处理一条消息有且只有一次机会能够影响系统状态")]),a._v("。")]),a._v(" "),s("h5",{attrs:{id:"主流大数据流处理框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主流大数据流处理框架"}},[a._v("#")]),a._v(" 主流大数据流处理框架：")]),a._v(" "),s("p",[a._v("目前主流的大数据流处理框架都宣称实现了精确一次处理语义，但这是"),s("strong",[a._v("有限定条件")]),a._v("的，即它们只能"),s("strong",[a._v("实现框架内的精确一次处理语义")]),a._v("，无法实现端到端的。")]),a._v(" "),s("p",[s("strong",[a._v("Kafka")]),a._v(" 则不是这样，因为所有的"),s("strong",[a._v("数据流转和计算都在 Kafka 内部完成")]),a._v("，故 Kafka 可以实现"),s("strong",[a._v("端到端")]),a._v("的精确一次处理语义。")]),a._v(" "),s("blockquote",[s("p",[a._v("这说的就是0.11之前的故事。"),s("strong",[a._v("事实上，Apache Flink从1.4开始推出了支持E2E Exactly-Once语义的两阶段SinkFunction。它用的就是Kafka 0.11的事务")])])]),a._v(" "),s("h4",{attrs:{id:"可能助力-kafka-胜出的第二点是它自己对于流式计算的定位。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可能助力-kafka-胜出的第二点是它自己对于流式计算的定位。"}},[a._v("#")]),a._v(" 可能助力 Kafka 胜出的第二点是它自己对于流式计算的定位。")]),a._v(" "),s("p",[a._v("Kafka Streams 是一个用于搭建实时流处理的"),s("strong",[a._v("客户端库")]),a._v("而非是一个完整的功能系统")]),a._v(" "),s("p",[a._v("没有集群调度、弹性部署等开箱即用的运维特性")]),a._v(" "),s("p",[s("strong",[a._v("双刃剑")]),a._v("。 不愿正面PK其他流处理框架的考量。")]),a._v(" "),s("p",[a._v("因为面向 中小企业  数据量小，逻辑简单 几台服务就能搞定。不用重量型完整平台。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-11-8e912cf7fb738682b0f4a1712fabd25a.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_04-我应该选择哪种kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_04-我应该选择哪种kafka"}},[a._v("#")]),a._v(" 04 | 我应该选择哪种Kafka？")]),a._v(" "),s("p",[a._v("Kafka Connect 通过一个个具体的连接器（Connector），串联起上下游的外部系统。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-12-543af39100f6188f62b0bf9a68050366.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"你知道几种-kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你知道几种-kafka"}},[a._v("#")]),a._v(" 你知道几种 Kafka？")]),a._v(" "),s("h4",{attrs:{id:"_1-apache-kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-apache-kafka"}},[a._v("#")]),a._v(" 1. Apache Kafka")]),a._v(" "),s("p",[a._v("正宗，后面的“发行版”的基础，顶级项目")]),a._v(" "),s("p",[a._v("优势： 社区活跃")]),a._v(" "),s("p",[a._v("劣势： 提供最最基础的组件  Kafka Connect 只有文件连接器  没有任何监控框架和工具 弥补： Kafka manager")]),a._v(" "),s("p",[a._v("仅仅需要一个消息引擎系统亦或是简单的流处理应用场景，同时需要对系统有较大把控度，那么我推荐你使用 Apache Kafka")]),a._v(" "),s("h4",{attrs:{id:"_2-confluent-kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-confluent-kafka"}},[a._v("#")]),a._v(" 2. Confluent Kafka")]),a._v(" "),s("p",[a._v("Confluent ，创始人出于 Linkedin ，饶军，清华大神。")]),a._v(" "),s("p",[a._v("从事商业化 Kafka 工具开发，并在此基础上发布了 Confluent Kafka。")]),a._v(" "),s("p",[a._v("Confluent Kafka 提供了一些 Apache Kafka 没有的高级特性，比如"),s("strong",[a._v("跨数据中心备份、Schema 注册中心以及集群监控工具")]),a._v("等。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("免费版")]),a._v(" "),s("th",[a._v("企业版")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("Apache Kafka 非常相像")]),a._v(" "),s("td",[a._v("HTTP 接口的方式允许你通过网络访问 Kafka 的")])]),a._v(" "),s("tr",[s("td",[a._v("Schema 注册中心")]),a._v(" "),s("td",[a._v("跨数据中心备份和集群监控")])]),a._v(" "),s("tr",[s("td",[a._v("REST proxy")]),a._v(" "),s("td")]),a._v(" "),s("tr",[s("td",[a._v("更多的连接器")]),a._v(" "),s("td")])])]),a._v(" "),s("p",[a._v("劣势： Confluent Kafka 在国内的普及率是比较低的")]),a._v(" "),s("h4",{attrs:{id:"_3-cloudera-hortonworks-kafka"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-cloudera-hortonworks-kafka"}},[a._v("#")]),a._v(" 3. Cloudera/Hortonworks Kafka")]),a._v(" "),s("p",[a._v("CDH HDP 大数据平台")]),a._v(" "),s("p",[a._v("优势： 天然集成， 安装 部署 监控 有现成的")]),a._v(" "),s("p",[a._v("劣势： 版本滞后性")]),a._v(" "),s("p",[a._v("如果你需要快速地搭建消息引擎系统，或者你需要搭建的是多框架构成的数据平台且 Kafka 只是其中一个组件，那么我推荐你使用这些大数据云公司提供的 Kafka。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-12-b568e63fd10887ef2289a0451b017294.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"qa-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa-3"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("kafka-manager 替代品")]),a._v(" "),s("p",[a._v("试JMXTrans + InfluxDB + Grafana")])]),a._v(" "),s("li",[s("p",[a._v("场景 confluent套件，线上用到了kafka, schema registry和ksql，其中ksql用于实时指标计算")])])]),a._v(" "),s("h2",{attrs:{id:"_05-聊聊kafka的版本号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_05-聊聊kafka的版本号"}},[a._v("#")]),a._v(" 05 | 聊聊Kafka的版本号")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-12-1b0cc8fb6f7fb76fffcfc182d7a63eb8.png",alt:"image"}})]),a._v(" "),s("p",[a._v("版本号实际上是 2.1.1")]),a._v(" "),s("p",[a._v("2 表示大版本号 Major-version")]),a._v(" "),s("p",[a._v("中间的 1 表示小版本号或次版本号，即 Minor Version")]),a._v(" "),s("p",[a._v("最后的 1 表示修订版本号，也就是 Patch 号")]),a._v(" "),s("p",[s("strong",[a._v("0.10.2.2")]),a._v("，你现在就知道了它的大版本是 0.10，小版本是 2，总共打了两个大的补丁，Patch 号是 2。")]),a._v(" "),s("h3",{attrs:{id:"版本演进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本演进"}},[a._v("#")]),a._v(" 版本演进")]),a._v(" "),s("p",[a._v("7 个大版本，分别是 "),s("strong",[a._v("0.7、0.8、0.9、0.10、0.11、1.0 和 2.0")])]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("版本")]),a._v(" "),s("th",[a._v("特点")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("0.7")]),a._v(" "),s("td",[a._v("上古版本 基础消息队列功能，没人用过")])]),a._v(" "),s("tr",[s("td",[a._v("0.8")]),a._v(" "),s("td",[a._v("副本机制； 真正意义上完备的分布式高可靠消息队列解决方案 "),s("br"),a._v("使用老版本客户端API，指定Zookeeper地址而非broker"),s("br")])]),a._v(" "),s("tr",[s("td",[a._v("0.9")]),a._v(" "),s("td",[a._v("2015 基础的安全认证 / 权限功能"),s("br"),a._v("使用 Java 重写了新版本消费者 API"),s("br"),a._v("新版本 Producer API 在这个版本中算比较稳定了")])]),a._v(" "),s("tr",[s("td",[a._v("0.10")]),a._v(" "),s("td",[a._v("里程碑： 引入了 Kafka Streams"),s("br"),a._v("正式升级成分布式流处理平台")])]),a._v(" "),s("tr",[s("td",[a._v("0.11")]),a._v(" "),s("td",[a._v("2017 "),s("br"),a._v("一个是提供幂等性 Producer API 以及事务（Transaction） API； 流处理结果正确性的基石"),s("br"),a._v("另一个是对 Kafka 消息格式做了重构。"),s("br"),a._v("建议版本0.11.0.3；谨慎对待消息格式变化")])]),a._v(" "),s("tr",[s("td",[a._v("1.0")]),a._v(" "),s("td",[a._v("Kafka-stream 的改进")])]),a._v(" "),s("tr",[s("td",[a._v("2.0")]),a._v(" "),s("td",[a._v("Kafka-stream 的改进")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-12-44970d6accf002f0b7a2aa3093c052df.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"qa-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa-4"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("kafka如何做压力测试，它的参考主要指标是什么，比如QPS,最大连接数，延迟等等。")]),a._v(" "),s("p",[a._v("Kafka提供了命令行脚本可以执行producer和consumer的性能测试，主要指标还是TPS，延时")])]),a._v(" "),s("li",[s("p",[a._v("扩容如何做到平滑扩容，不影响原业务")])])]),a._v(" "),s("p",[a._v("​     增加broker很简单，也不会对现有业务有影响。关键是做好迁移计划——比如避开业务高峰时刻，如果迁移对业务影响最小")]),a._v(" "),s("h2",{attrs:{id:"_06-kafka线上集群部署方案怎么做"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_06-kafka线上集群部署方案怎么做"}},[a._v("#")]),a._v(" 06 | Kafka线上集群部署方案怎么做？")]),a._v(" "),s("h3",{attrs:{id:"操作系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[a._v("#")]),a._v(" 操作系统")]),a._v(" "),s("p",[a._v("Linux 的表现更胜一筹")]),a._v(" "),s("ul",[s("li",[a._v("I/O 模型的使用\n"),s("ul",[s("li",[a._v("五种IO模型： 阻塞式 I/O、非阻塞式 I/O、I/O 多路复用、信号驱动 I/O 和异步 I/O")]),a._v(" "),s("li",[a._v("实际上 Kafka 客户端底层使用了 Java 的 "),s("strong",[a._v("selector")]),a._v("，selector 在 Linux 上的实现机制是 epoll，而在 Windows 平台上的实现机制是 select。因此在这一点上将 Kafka 部署在 Linux 上是有优势的，因为能够获得更高效的 I/O 性能。")])])]),a._v(" "),s("li",[a._v("数据网络传输效率\n"),s("ul",[s("li",[a._v("零拷贝（Zero Copy）技术")]),a._v(" "),s("li",[a._v("当数据在磁盘和网络进行传输时避免昂贵的内核态数据拷贝从而实现快速的数据传输")]),a._v(" "),s("li",[a._v("在 Linux 部署 Kafka 能够享受到零拷贝技术所带来的快速数据传输特性。")])])]),a._v(" "),s("li",[a._v("社区支持度\n"),s("ul",[s("li",[a._v("windows版本社区不做任何承诺")])])])]),a._v(" "),s("h3",{attrs:{id:"磁盘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#磁盘"}},[a._v("#")]),a._v(" 磁盘")]),a._v(" "),s("p",[a._v("使用普通机械硬盘即可")]),a._v(" "),s("p",[a._v("Kafka是 顺序读写操作，一定程度上规避了"),s("strong",[a._v("机械磁盘")]),a._v("最大的劣势，即"),s("strong",[a._v("随机读写操作")]),a._v("慢")]),a._v(" "),s("p",[a._v("这一点，SSD没有任何优势")]),a._v(" "),s("h4",{attrs:{id:"是否使用raid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是否使用raid"}},[a._v("#")]),a._v(" 是否使用RAID")]),a._v(" "),s("p",[a._v("raid的优势")]),a._v(" "),s("ol",[s("li",[a._v("提供冗余的磁盘存储空间\n"),s("ol",[s("li",[a._v("kafka： 自己实现了冗余机制来提供高可靠性")])])]),a._v(" "),s("li",[a._v("提供负载均衡\n"),s("ol",[s("li",[a._v("kafka： 分区的概念，提供负载均衡")])])])]),a._v(" "),s("h4",{attrs:{id:"建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#建议"}},[a._v("#")]),a._v(" 建议")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("追求性价比的公司可以不搭建 RAID，使用普通磁盘组成存储空间即可。")])]),a._v(" "),s("li",[s("p",[a._v("使用机械磁盘完全能够胜任 Kafka 线上环境。")])])]),a._v(" "),s("h3",{attrs:{id:"磁盘容量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#磁盘容量"}},[a._v("#")]),a._v(" 磁盘容量")]),a._v(" "),s("p",[a._v("Kafka 集群发送 1 亿条消息，每条消息保存两份以防止数据丢失，另外消息默认保存两周时间。现在假设消息的平均大小是 1KB，Kafka 集群需要为这个业务预留多少磁盘空间吗？")]),a._v(" "),s("p",[a._v("每天 1 亿条 1KB 大小的消息，保存两份且留存两周的时间，那么总的空间大小就等于")]),a._v(" "),s("p",[s("strong",[a._v("1 亿 * 1KB * 2 / 1000 / 1000 = 200GB。")])]),a._v(" "),s("p",[a._v("一般情况下 Kafka 集群除了消息数据还有其他类型的数据，比如索引数据等，故我们再为这些数据预留出 10% 的磁盘空间，")]),a._v(" "),s("p",[s("strong",[a._v("因此总的存储容量就是 220GB。")])]),a._v(" "),s("p",[a._v("既然要保存两周，那么整体容量即为")]),a._v(" "),s("p",[s("strong",[a._v("220GB * 14，大约 3TB 左右。")])]),a._v(" "),s("p",[a._v("Kafka 支持数据的压缩，假设压缩比是 0.75，那么最后你需要规划的存储空间就是")]),a._v(" "),s("p",[s("strong",[a._v("0.75 * 3 = 2.25TB。")])]),a._v(" "),s("h4",{attrs:{id:"考虑的点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#考虑的点"}},[a._v("#")]),a._v(" 考虑的点：")]),a._v(" "),s("ol",[s("li",[a._v("新增消息数")]),a._v(" "),s("li",[a._v("消息留存时间")]),a._v(" "),s("li",[a._v("平均消息大小")]),a._v(" "),s("li",[a._v("备份数")]),a._v(" "),s("li",[a._v("是否启用压缩")])]),a._v(" "),s("h3",{attrs:{id:"带宽"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带宽"}},[a._v("#")]),a._v(" 带宽")]),a._v(" "),s("p",[a._v("带宽也主要有两种：1Gbps 的千兆网络（一般公司标配）和 10Gbps 的万兆网络")]),a._v(" "),s("p",[a._v("带宽资源的"),s("strong",[a._v("规划")]),a._v("，其实真正要"),s("strong",[a._v("规划")]),a._v("的是所需的 "),s("strong",[a._v("Kafka")]),a._v(" 服务器的数量")]),a._v(" "),s("p",[a._v("机房环境是千兆网络，即 1Gbps，现在你有个业务，其业务目标或 SLA 是在 "),s("strong",[a._v("1 小时内处理 1TB")]),a._v(" 的业务数据。你到底需要多少台 Kafka 服务器来完成这个业务呢？")]),a._v(" "),s("p",[a._v("带宽是 1Gbps，即每秒处理 1Gb 的数据")]),a._v(" "),s("p",[a._v("如果机器kafka独享，kafka能用到70%的宽带资源，每台服务器 700Mb的宽带资源")]),a._v(" "),s("p",[a._v("不能让kafka常规性的使用这么多宽带资源，预留2/3的资源,则 700Mb/3 = 240Mbps")]),a._v(" "),s("p",[a._v("1 小时内处理 1TB 数据 ,则每秒钟需要处理 1TB x 1000 x 1000 / 60 / 60 =  277MB")]),a._v(" "),s("p",[a._v("1B = 8b  则 277MB = 277x8 = 2300+Mb")]),a._v(" "),s("p",[a._v("2300/240 约等于 10 ，如果还需要额外复制三个副本 则需要乘以3 30 台")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-12-99a5253aef92b25771cbcc559ad692a1.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_07-最最最重要的集群参数配置-上"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_07-最最最重要的集群参数配置-上"}},[a._v("#")]),a._v(" 07 | 最最最重要的集群参数配置（上）")]),a._v(" "),s("h3",{attrs:{id:"broker-端参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#broker-端参数"}},[a._v("#")]),a._v(" Broker 端参数")]),a._v(" "),s("h4",{attrs:{id:"存储相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储相关"}},[a._v("#")]),a._v(" 存储相关")]),a._v(" "),s("p",[a._v("log.dirs   若干个文件目录路径 配置多个目录，最好每个目录挂在不同的磁盘上。 好处：")]),a._v(" "),s("ol",[s("li",[a._v("提升读写性能")]),a._v(" "),s("li",[a._v("故障转移 1.1版本引入功能，之前磁盘挂掉，broker停止运行，之后，可以将挂掉的磁盘数据转移到正常的上面去。")])]),a._v(" "),s("h4",{attrs:{id:"zookeeper相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper相关"}},[a._v("#")]),a._v(" ZooKeeper相关")]),a._v(" "),s("p",[a._v("分布式协调框架，负责协调管理并保存 Kafka 集群的所有元数据信息，比如集群都有哪些 Broker 在运行、创建了哪些 Topic，每个 Topic 都有多少分区以及这些分区的 Leader 副本都在哪些机器上等信息。")]),a._v(" "),s("p",[a._v("zookeeper.connect  zk链接地址")]),a._v(" "),s("h4",{attrs:{id:"broker-连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#broker-连接"}},[a._v("#")]),a._v(" Broker 连接")]),a._v(" "),s("p",[s("strong",[a._v("listeners")]),a._v("： 监听器，其实就是告诉外部连接者要通过什么协议访问指定主机名和端口开放的 Kafka 服务。")]),a._v(" "),s("p",[s("strong",[a._v("advertised.listeners")]),a._v(" ： 多了个advertised，就是broker 用于对外发布的")]),a._v(" "),s("p",[a._v("host.name/port: 忘了她，过期了，不用制定")]),a._v(" "),s("p",[s("strong",[a._v("监听器")])]),a._v(" "),s("p",[a._v("若干个逗号分隔的三元组，每个三元组的格式为<协议名称，主机名，端口号>")]),a._v(" "),s("p",[a._v("PLAINTEXT 表示明文传输、SSL 表示使用 SSL 或 TLS 加密传输等")]),a._v(" "),s("h5",{attrs:{id:"主机名这个设置中我到底使用-ip-地址还是主机名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主机名这个设置中我到底使用-ip-地址还是主机名"}},[a._v("#")]),a._v(" 主机名这个设置中我到底使用 IP 地址还是主机名？")]),a._v(" "),s("p",[a._v("最好全部使用"),s("strong",[a._v("主机名")]),a._v("，即 Broker 端和 Client 端应用配置中全部填写主机名。 Broker 源代码中也使用的是主机名，如果你在某些地方使用了 IP 地址进行连接，可能会发生无法连接的问题。")]),a._v(" "),s("h4",{attrs:{id:"topic管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#topic管理"}},[a._v("#")]),a._v(" Topic管理")]),a._v(" "),s("p",[s("strong",[a._v("auto.create.topics.enable")]),a._v("：是否允许自动创建 Topic。")]),a._v(" "),s("p",[a._v("建议 false。防止乱建")]),a._v(" "),s("p",[s("strong",[a._v("unclean.leader.election.enable")]),a._v("：是否允许 Unclean Leader 选举。")]),a._v(" "),s("p",[a._v("建议设置为false")]),a._v(" "),s("p",[a._v("kafka每个分区都有多个副本来提供高可用。在这些副本中只能有一个副本对外提供服务，即所谓的 Leader 副本。")]),a._v(" "),s("p",[a._v("只有保存数据比较多的副本才有资格选举leader，如果这些数据较多副本都挂了怎么办了？ 如果是false，不允许落后太多副本选举，则这个分区不可用。因为没有leader。")]),a._v(" "),s("p",[a._v("反之如果是true，则可以选举，但是有些数据可能丢了。副本保存的本来就不全。")]),a._v(" "),s("p",[s("strong",[a._v("auto.leader.rebalance.enable")]),a._v("：是否允许定期进行 Leader 选举。")]),a._v(" "),s("p",[a._v("建议为false，因为这个会定期选举，本来好好的，去选举，选举开销较大。")]),a._v(" "),s("h4",{attrs:{id:"数据留存方面的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据留存方面的"}},[a._v("#")]),a._v(" 数据留存方面的")]),a._v(" "),s("p",[a._v("log.retention.{hours|minutes|ms}：这是个“三兄弟”，都是控制一条消息数据被保存多长时间。")]),a._v(" "),s("p",[a._v("一般设置成  log.retention.hours=168表示默认保存 7 天的数据")]),a._v(" "),s("p",[a._v("log.retention.bytes：这是指定 Broker 为消息保存的总磁盘容量大小。")]),a._v(" "),s("p",[a._v("默认是-1，保存多少数据都可以。")]),a._v(" "),s("p",[a._v("message.max.bytes：控制 Broker 能够接收的最大消息大小。")]),a._v(" "),s("p",[a._v("默认 1000012  不到 1MB。比较小")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-16-1667fab587c23c20082542a6019b2b52.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_08-最最最重要的集群参数配置-下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_08-最最最重要的集群参数配置-下"}},[a._v("#")]),a._v(" 08 | 最最最重要的集群参数配置（下）")]),a._v(" "),s("h3",{attrs:{id:"topic-级别参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#topic-级别参数"}},[a._v("#")]),a._v(" Topic 级别参数")]),a._v(" "),s("p",[a._v("Topic 级别参数会覆盖全局 Broker 参数的值")]),a._v(" "),s("p",[a._v("retention.ms：规定了该 Topic 消息被保存的时长。默认是 7 天，即该 Topic 只保存最近 7 天的消息。一旦设置了这个值，它会覆盖掉 Broker 端的全局参数值。retention.bytes：规定了要为该 Topic 预留多大的磁盘空间。和全局参数作用相似，这个值通常在多租户的 Kafka 集群中会有用武之地。当前默认值是 -1，表示可以无限使用磁盘空间。")]),a._v(" "),s("p",[a._v("max.message.bytes。它决定了 Kafka Broker 能够正常接收该 Topic 的最大消息大小")]),a._v(" "),s("h3",{attrs:{id:"设置方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置方式"}},[a._v("#")]),a._v(" 设置方式")]),a._v(" "),s("h4",{attrs:{id:"创建的时候设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建的时候设置"}},[a._v("#")]),a._v(" 创建的时候设置")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic transaction --partitions "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" --replication-factor "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" --config retention.ms"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("15552000000")]),a._v(" --config max.message.bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5242880")]),a._v("\n")])])]),s("h4",{attrs:{id:"修改-topic-时设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改-topic-时设置"}},[a._v("#")]),a._v(" 修改 Topic 时设置")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("bin/kafka-configs.sh --zookeeper localhost:2181 --entity-type topics --entity-name transaction --alter --add-config max.message.bytes"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10485760")]),a._v("\n")])])]),s("h3",{attrs:{id:"jvm-参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm-参数"}},[a._v("#")]),a._v(" JVM 参数")]),a._v(" "),s("p",[a._v("不建议 jdk6 和 jdk7 jdk6太老了")]),a._v(" "),s("p",[a._v("2.0.0 版本开始，已经正式摒弃对 Java 7 只少java8")]),a._v(" "),s("h4",{attrs:{id:"堆大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆大小"}},[a._v("#")]),a._v(" 堆大小")]),a._v(" "),s("p",[a._v("将你的 JVM 堆大小设置成 6GB 吧，默认1GB，太小了。")]),a._v(" "),s("h4",{attrs:{id:"gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[a._v("#")]),a._v(" GC")]),a._v(" "),s("p",[a._v("Java7")]),a._v(" "),s("p",[a._v("CPU资源充足，CMS -XX:+UseCurrentMarkSweepGC ，否则 "),s("strong",[a._v("吞吐量收集器")]),a._v("。开启方法是指定-XX:+UseParallelGC。")]),a._v(" "),s("p",[a._v("Java 8")]),a._v(" "),s("p",[a._v("手动设置G1，更少的Full GC")]),a._v(" "),s("h4",{attrs:{id:"如何设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何设置"}},[a._v("#")]),a._v(" 如何设置")]),a._v(" "),s("p",[a._v("在启动之前，执行下面设置环境变量")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("$"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("KAFKA_HEAP_OPTS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("--Xms6g  --Xmx6g\n$"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("KAFKA_JVM_PERFORMANCE_OPTS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" -server -XX:+UseG1GC -XX:MaxGCPauseMillis"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),a._v(" -XX:InitiatingHeapOccupancyPercent"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("35")]),a._v(" -XX:+ExplicitGCInvokesConcurrent -Djava.awt.headless"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true\n$"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" bin/kafka-server-start.sh config/server.properties\n")])])]),s("h3",{attrs:{id:"操作系统参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作系统参数"}},[a._v("#")]),a._v(" 操作系统参数")]),a._v(" "),s("h4",{attrs:{id:"文件描述符限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件描述符限制"}},[a._v("#")]),a._v(" 文件描述符限制")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("ulimit")]),a._v(" -n\n")])])]),s("p",[a._v("调大了，没什么影响。，搞到 1000000 ，设置大一些，否则经常 “Too many open files”")]),a._v(" "),s("h4",{attrs:{id:"文件系统类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件系统类型"}},[a._v("#")]),a._v(" 文件系统类型")]),a._v(" "),s("p",[a._v("XFS强于EXT4")]),a._v(" "),s("h4",{attrs:{id:"swappiness"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#swappiness"}},[a._v("#")]),a._v(" Swappiness")]),a._v(" "),s("p",[a._v("有些人直接设置成0，不建议设置成0，为0的话，内存耗尽会出发 OOM Killer组建，随机挑选进程kill，没有预警，")]),a._v(" "),s("p",[a._v("设置一个较小值，比如1，当耗尽的时候，broker性能急剧下降，给一个调优和诊断问题的时间。")]),a._v(" "),s("h4",{attrs:{id:"提交时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交时间"}},[a._v("#")]),a._v(" 提交时间")]),a._v(" "),s("p",[a._v("想kafka发送数据，不是落盘，才认为成功，而是 只要数据被写入到操作系统的页缓存（Page Cache）上就可。")]),a._v(" "),s("p",[a._v("随后操作系统就会根据 LRU算法，定期将 页缓存落盘。这个定期就有提交时间确定，默认是5秒。")]),a._v(" "),s("p",[a._v("人为太频繁了，可以适当增加提交时间降低物理磁盘些操作。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-16-fa590b7dd72bf963d2162c63caf07eb0.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_09-生产者消息分区机制原理剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_09-生产者消息分区机制原理剖析"}},[a._v("#")]),a._v(" 09 | 生产者消息分区机制原理剖析")]),a._v(" "),s("h3",{attrs:{id:"为什么分区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么分区"}},[a._v("#")]),a._v(" 为什么分区")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-22-9c66506d6f93b46816fb2675d046046c.png",alt:"image"}})]),a._v(" "),s("p",[a._v("分区的作用就是提供"),s("strong",[a._v("负载均衡")]),a._v("的能力，或者说对数据进行分区的主要原因，就是为了实现系统的"),s("strong",[a._v("高伸缩性（Scalability）")])]),a._v(" "),s("p",[s("strong",[a._v("Kafka")]),a._v(" 中叫分区，在 MongoDB 和 Elasticsearch 中就叫分片 Shard，而在 HBase 中则叫 Region，在 Cassandra 中又被称作 vnode")]),a._v(" "),s("p",[a._v("还可以实现业务界别的消息顺序的问题。")]),a._v(" "),s("h3",{attrs:{id:"分区策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分区策略"}},[a._v("#")]),a._v(" 分区策略")]),a._v(" "),s("p",[a._v("所谓分区策略是决定生产者将消息发送到哪个分区的算法。")]),a._v(" "),s("p",[a._v("partitioner.class   org.apache.kafka.clients.producer.Partitioner")]),a._v(" "),s("h4",{attrs:{id:"轮询策略-round-robin-顺序分配-默认的分区策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轮询策略-round-robin-顺序分配-默认的分区策略"}},[a._v("#")]),a._v(" 轮询策略 Round-robin 顺序分配，默认的分区策略")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-22-6511323409ecbcaf8a07615199530ffe.png",alt:"image"}})]),a._v(" "),s("p",[s("strong",[a._v("轮询策略有非常优秀的负载均衡表现，它总是能保证消息最大限度地被平均分配到所有分区上，故默认情况下它是最合理的分区策略，也是我们最常用的分区策略之一。")])]),a._v(" "),s("h4",{attrs:{id:"随机策略-randomness"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#随机策略-randomness"}},[a._v("#")]),a._v(" 随机策略 Randomness，")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-22-93f48d1d0144070d3cc2b33a33dbafcd.png",alt:"image"}})]),a._v(" "),s("p",[a._v("也是力求均匀，但是表现没有轮询策略好， "),s("strong",[a._v("如果追求数据的均匀分布，还是使用轮询策略比较好")])]),a._v(" "),s("h4",{attrs:{id:"按消息键保序策略-key-ordering-策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按消息键保序策略-key-ordering-策略"}},[a._v("#")]),a._v(" 按消息键保序策略  Key-ordering 策略")]),a._v(" "),s("p",[a._v("消息都有key，有明确业务含义的字符串，客户代码、部门编号、业务ID等。 特别 kafka不支持时间戳的肩带，我经常将创建时间封装在key里面。")]),a._v(" "),s("p",[a._v("同一个key的消息都进入到相同的分区  "),s("strong",[a._v("每个分区的消息处理都是有顺序的")]),a._v("，所以 被称为 "),s("strong",[a._v("按照消息键保序策略")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-22-1ab0f3026b8c630a52619c24e8c8cb5e.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("Kafka 默认分区策略实际上同时实现了两种策略：如果指定了 Key，那么默认实现按消息键保序策略；如果没有指定 Key，则使用轮询策略。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-22-d186abb4f1a54f6120aecbbc72b6c200.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_10-生产者压缩算法面面观"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-生产者压缩算法面面观"}},[a._v("#")]),a._v(" 10 | 生产者压缩算法面面观")]),a._v(" "),s("p",[a._v("压缩（compression） 时间换空间的经典 trade-off 思想 ，CPU时间换取 磁盘空间和网络I/O传输量，")]),a._v(" "),s("h3",{attrs:{id:"怎么压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么压缩"}},[a._v("#")]),a._v(" 怎么压缩")]),a._v(" "),s("p",[a._v("Kafka 共有两大类消息格式，社区分别称之为 V1 版本和 V2 版本。V2 版本是 Kafka 0.11.0.0 中正式引入的。")]),a._v(" "),s("p",[a._v("任何版本 Kafka 的消息层次都分为两层："),s("strong",[a._v("消息集合（message set）以及消息（message）")]),a._v("。一个消息集合中包含若干条日志项（record item），而日志项才是真正封装消息的地方")]),a._v(" "),s("p",[a._v("kafka通常不会直接操作一条条消息，而是在消息集合上面操作")]),a._v(" "),s("h4",{attrs:{id:"v2和v1有什么区别-做了什么改进"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v2和v1有什么区别-做了什么改进"}},[a._v("#")]),a._v(" v2和v1有什么区别？做了什么改进？")]),a._v(" "),s("p",[a._v("消息的公共部分抽取出来放到外层消息集合里面，这样就不用每条消息都保存这些信息了。")]),a._v(" "),s("p",[a._v("v1每条消息都需要CRC校验(CRC会变的)，而在v2中，消息的crc校验移到了"),s("strong",[a._v("消息集合")]),a._v("这一层了")]),a._v(" "),s("h4",{attrs:{id:"压缩方式的变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩方式的变化"}},[a._v("#")]),a._v(" 压缩方式的变化")]),a._v(" "),s("p",[a._v("V1 版本中保存压缩消息的方法是把多条消息进行压缩然后保存到外层消息的消息体字段中")]),a._v(" "),s("p",[a._v("V2 版本的做法是对整个消息集合进行压缩，显然压缩效果更好")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-22-bd39fa706998854efece4c9162418199.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"什么时候压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么时候压缩"}},[a._v("#")]),a._v(" 什么时候压缩")]),a._v(" "),s("p",[a._v("生产者和消费者。")]),a._v(" "),s("p",[a._v("生产者配置 compression.type")]),a._v(" "),s("p",[a._v("broker端的压缩")]),a._v(" "),s("p",[a._v("大部分情况下 Broker 从 Producer 端接收到消息后仅仅是原封不动地保存而不会对其进行任何修改。 有两个李伟：")]),a._v(" "),s("ol",[s("li",[a._v("Broker 端指定了和 Producer 端不同的压缩算法。\n"),s("ol",[s("li",[a._v("可能会发生预料之外的压缩 / 解压缩操作，通常表现为 Broker 端 CPU 使用率飙升。")])])]),a._v(" "),s("li",[a._v("Broker 端发生了消息格式转换。\n"),s("ol",[s("li",[a._v("兼容老版本的消费者程序")]),a._v(" "),s("li",[a._v("丧失了Zero copy特性")])])])]),a._v(" "),s("h3",{attrs:{id:"何时解压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时解压缩"}},[a._v("#")]),a._v(" 何时解压缩？")]),a._v(" "),s("h4",{attrs:{id:"消费者程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费者程序"}},[a._v("#")]),a._v(" 消费者程序")]),a._v(" "),s("p",[a._v("通常是在消费者程序中。通过消息体来的值压缩算法")]),a._v(" "),s("p",[a._v("Producer 端压缩、Broker 端保持、Consumer 端解压缩。")]),a._v(" "),s("h4",{attrs:{id:"broker端解压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#broker端解压缩"}},[a._v("#")]),a._v(" broker端解压缩")]),a._v(" "),s("p",[a._v("和前面消息格式转换发生解压缩不同，  每个压缩过的消息集合在 Broker 端写入时都要发生解压缩操作，目的就是为了对消息执行各种验证 ，的确会影响性能。")]),a._v(" "),s("p",[a._v("消息娇艳是非常重要的。")]),a._v(" "),s("h3",{attrs:{id:"压缩算法对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#压缩算法对比"}},[a._v("#")]),a._v(" 压缩算法对比")]),a._v(" "),s("p",[a._v("Kafka 支持 3 种压缩算法：GZIP、Snappy 和 LZ4。从 2.1.0 开始，Kafka 正式支持 Zstandard 算法（简写为 zstd），提供超高压缩比")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-22-906bbfef5fabe89f6d5005ef3d200b44.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("zstd 算法有着最高的压缩比，而在吞吐量上的表现只能说中规中矩。反观 LZ4 算法，它在吞吐量方面则是毫无疑问的执牛耳者")])]),a._v(" "),s("h3",{attrs:{id:"最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[a._v("#")]),a._v(" 最佳实践")]),a._v(" "),s("p",[a._v("如果客户端机器 CPU 资源有很多富余，强烈建议你开启 "),s("strong",[a._v("zstd")]),a._v(" 压缩，这样能极大地节省网络资源消耗。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static001.geekbang.org/resource/image/ab/df/ab1578f5b970c08b9ec524c0304bbedf.jpg",alt:"img"}})]),a._v(" "),s("h3",{attrs:{id:"消息结构的描述补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息结构的描述补充"}},[a._v("#")]),a._v(" 消息结构的描述补充：")]),a._v(" "),s("p",[a._v("消息（v1叫message，v2叫record）是分批次（batch）读写的，batch是kafka读写（网络传输和文件读写）的基本单位，不同版本，对相同（或者叫相似）的概念，叫法不一样。\nv1（kafka 0.11.0之前）:message set, message\nv2（kafka 0.11.0以后）:record batch,record\n其中record batch对英语message set，record对应于message。\n一个record batch（message set）可以包含多个record（message）。")]),a._v(" "),s("p",[a._v("对于每个版本的消息结构的细节，可以参考kafka官方文档的5.3 Message Format 章，里面对消息结构列得非常清楚。")]),a._v(" "),s("h3",{attrs:{id:"qa-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa-5"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("假如一个消息集合里有10条消息，并且被压缩，但是消费端配置每次只poll 5条消息。这种情况下，消费端怎么解压缩？矛盾点是 如果只取5条消息，需要broker帮助解压缩；如果取整个消息集合10条消息，会有贷款等资源的浪费？")]),a._v(" "),s("p",[a._v("答：目前java consumer的设计是一次取出一批，缓存在客户端内存中，然后再过滤出max.poll.records条消息返给你，也不算太浪费吧，毕竟下次可以直接从缓存中取，不用再发请求了。")])]),a._v(" "),s("li",[s("p",[a._v("broker在接收producer消息并落盘这块貌似没有用零拷贝啊！只有传输给consumer时用了，求解答")]),a._v(" "),s("p",[a._v("答： 就是你理解的那样。Kafka使用Zero Copy优化将页缓存中的数据直接传输到Socket——这的确是发生在broker到consumer的链路上。这种优化能成行的前提是consumer端能够识别磁盘上的消息格式。")])])]),a._v(" "),s("h2",{attrs:{id:"_11-无消息丢失配置怎么实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-无消息丢失配置怎么实现"}},[a._v("#")]),a._v(" 11 | 无消息丢失配置怎么实现？")]),a._v(" "),s("h3",{attrs:{id:"那-kafka-到底在什么情况下才能保证消息不丢失呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#那-kafka-到底在什么情况下才能保证消息不丢失呢"}},[a._v("#")]),a._v(" 那 Kafka 到底在什么情况下才能保证消息不丢失呢？")]),a._v(" "),s("p",[a._v("一句话概括，Kafka 只对“已提交”的消息（committed message）做有限度的持久化保证。")]),a._v(" "),s("h4",{attrs:{id:"已提交的消息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已提交的消息"}},[a._v("#")]),a._v(" 已提交的消息")]),a._v(" "),s("p",[a._v("当 Kafka 的若干个 Broker 成功地接收到一条消息并写入到日志文件后，它们会告诉生产者程序这条消息已成功提交。此时，这条消息在 Kafka 看来就正式变为“已提交”消息了。")]),a._v(" "),s("blockquote",[s("p",[a._v("若干个：")]),a._v(" "),s("p",[a._v("选择只要有一个 Broker 成功保存该消息就算是已提交，也可以是令所有 Broker 都成功保存该消息才算是已提交")])]),a._v(" "),s("h3",{attrs:{id:"有限度的持久化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有限度的持久化"}},[a._v("#")]),a._v(" 有限度的持久化")]),a._v(" "),s("p",[a._v("Kafka 不可能保证在任何情况下都做到不丢失消息 ，地球不存在了了。")]),a._v(" "),s("p",[a._v("是有前提条件的，如果消息存在N个broker上，前提是至少要有一个存活。 这个条件成立，就能保证永远不丢失。")]),a._v(" "),s("p",[s("strong",[a._v("kafka 是能做到不丢失消息的，只不过这些消息必须是已提交的消息，而且还要满足一定的条件")])]),a._v(" "),s("p",[a._v("“丢失案例”")]),a._v(" "),s("h3",{attrs:{id:"案例-1-生产者程序丢失数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例-1-生产者程序丢失数据"}},[a._v("#")]),a._v(" 案例 1：生产者程序丢失数据")]),a._v(" "),s("p",[a._v("最常见。")]),a._v(" "),s("h4",{attrs:{id:"原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[a._v("#")]),a._v(" 原因")]),a._v(" "),s("p",[a._v("kafka produer 是异步发送消息的。也就是 send(msg) 这个API，通常立即返回的。但是此时你不能认为发送成功了。")]),a._v(" "),s("p",[a._v("“fire and forget”，翻译一下就是“发射后不管” 有很多情况导致发送失败")]),a._v(" "),s("ol",[s("li",[a._v("网络dousing")]),a._v(" "),s("li",[a._v("消息不合格，消息太大了。")])]),a._v(" "),s("h4",{attrs:{id:"解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决"}},[a._v("#")]),a._v(" 解决")]),a._v(" "),s("p",[a._v("Producer 永远要使用带有回调通知的发送 API，也就是说不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)，能够得知是否提交成功。")]),a._v(" "),s("p",[a._v("瞬间错误，重试就可以了，格式问题，调整格式。")]),a._v(" "),s("h3",{attrs:{id:"案例-2-消费者程序丢失数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#案例-2-消费者程序丢失数据"}},[a._v("#")]),a._v(" 案例 2：消费者程序丢失数据")]),a._v(" "),s("p",[a._v("Consumer 端要消费的消息不见了，位移的概念，表示要消费的位置。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-23-701edb755ce247f6482f1e857b8d3421.png",alt:"image"}})]),a._v(" "),s("p",[a._v("应对这种情况的消息丢失")]),a._v(" "),s("p",[s("strong",[a._v("维持先消费消息（阅读），再更新位移（书签）的顺序")]),a._v("，可能会带来的问题是重复处理。")]),a._v(" "),s("p",[a._v("另一种情况")]),a._v(" "),s("p",[a._v("这就好比 Consumer 程序从 Kafka 获取到消息后开启了多个线程异步处理消息，而 Consumer 程序自动地向前更新位移。假如其中某个线程运行失败了，它负责的消息没有被成功处理，但位移已经被更新了，因此这条消息对于 Consumer 而言实际上是丢失了。")]),a._v(" "),s("p",[a._v("解决办法：")]),a._v(" "),s("p",[s("strong",[a._v("如果是多线程异步处理消费消息，Consumer 程序不要开启自动提交位移，而是要应用程序手动提交位移")])]),a._v(" "),s("h3",{attrs:{id:"最佳实践-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践-2"}},[a._v("#")]),a._v(" 最佳实践")]),a._v(" "),s("ol",[s("li",[a._v("不要使用 producer.send(msg)，而要使用 producer.send(msg, callback)。记住，一定要使用带有回调通知的 send 方法。")]),a._v(" "),s("li",[a._v("设置 acks = all。acks 是 Producer 的一个参数，代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。")]),a._v(" "),s("li",[a._v("设置 retries 为一个较大的值。这里的 retries 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries > 0 的 Producer 能够自动重试消息发送，避免消息丢失。")]),a._v(" "),s("li",[a._v("设置 unclean.leader.election.enable = false。这是 Broker 端的参数，它控制的是哪些 Broker 有资格竞选分区的 Leader。如果一个 Broker 落后原先的 Leader 太多，那么它一旦成为新的 Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false，即不允许这种情况的发生。")]),a._v(" "),s("li",[a._v("设置 replication.factor >= 3。这也是 Broker 端的参数。其实这里想表述的是，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。")]),a._v(" "),s("li",[a._v("设置 min.insync.replicas > 1。这依然是 Broker 端参数，控制的是消息至少要被写入到多少个副本才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。")]),a._v(" "),s("li",[a._v("确保 replication.factor > min.insync.replicas。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 replication.factor = min.insync.replicas + 1。")]),a._v(" "),s("li",[a._v("确保消息消费完成再提交。Consumer 端有个参数 enable.auto.commit，最好把它设置成 false，并采用手动提交位移的方式。就像前面说的，这对于单 Consumer 多线程处理的场景而言是至关重要的。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-23-a3d09751b3d4bd16c07b70b5042ea27e.png",alt:"image"}})]),a._v(" "),s("p",[a._v("ISR : In-Sync Replicas，这是一个副本集合，里面的所有副本都是和Leader副本保持同步的")]),a._v(" "),s("h3",{attrs:{id:"qa-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa-6"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("ack=1的时候，min.insync.replicas还会生效吗？或者说还有必要吗")]),a._v(" "),s("p",[a._v("不生效，min.insync.replicas只有在acks=-1时才生效")]),a._v(" "),s("p",[a._v("acks 指定了必须要多少个分区副本收到消息，生产者才会认为消息写入是成功的。")]),a._v(" "),s("ol",[s("li",[a._v("acks=0 不会等待任何来自服务器的响应，可能会丢消息，但是又更大的吞吐量")]),a._v(" "),s("li",[a._v("acks=1 只要首领leader收到消息，就会收到成功响应（如果leader节点异常了，一个没有收到消息的节点成为新leader，还是会丢失）")]),a._v(" "),s("li",[a._v("acks=all 只有参与复制的节点全部收到消息，才会收到成功响应 延迟较高")])])]),a._v(" "),s("li",[s("p",[a._v("如果我有10个副本，isr=10，然后我配置ack=all，min.insync.replicas=5，这时候这两个参数以谁为准，生产一个消息，必须是全部副本都同步才算提交，还是只要5个副本才算提交？")]),a._v(" "),s("p",[a._v("min.insync.replicas是保证下限的。acks=all的含义是producer会等ISR中所有副本都写入成功才返回，但如果不设置min.insync.replicas = 5，默认是1，那么假设    ISR中只有1个副本，只要写入这个副本成功producer也算其正常写入，因此min.insync.replicas保证的写入副本的下限。")])])]),a._v(" "),s("p",[a._v("​       acks=all表示消息要写入所有ISR副本，但没要求ISR副本有多少个。min.insync.replicas做了这样的保证")]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("replication.factor 和 min.insync.replicas为什么不能相等呢，假如都是2，不可以吗，挂掉一个副本还有一个副本可用啊。")])]),a._v(" "),s("p",[a._v("​      没有说不可以相等。如果都是2，挂掉一个副本，producer也就无法写入了，因为不满足min.insync.replicas的要求了")]),a._v(" "),s("h2",{attrs:{id:"_12-客户端都有哪些不常见但是很高级的功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-客户端都有哪些不常见但是很高级的功能"}},[a._v("#")]),a._v(" 12 | 客户端都有哪些不常见但是很高级的功能？")]),a._v(" "),s("h3",{attrs:{id:"什么是拦截器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是拦截器"}},[a._v("#")]),a._v(" 什么是拦截器？")]),a._v(" "),s("p",[a._v("基本思想就是允许应用程序在不修改逻辑的情况下，动态地实现一组可插拔的事件处理逻辑链路")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-29-fc6a0d43c88e1bbb4ceebfba230a32d6.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"kafka-拦截器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-拦截器"}},[a._v("#")]),a._v(" Kafka 拦截器")]),a._v(" "),s("p",[a._v("Kafka 拦截器分为生产者拦截器和消费者拦截器")]),a._v(" "),s("p",[a._v("生产者拦截器允许你在"),s("strong",[a._v("发送消息前")]),a._v("以及"),s("strong",[a._v("消息提交成功后")]),a._v("植入你的拦截器逻辑")]),a._v(" "),s("p",[a._v("消费者拦截器支持在"),s("strong",[a._v("消费消息前")]),a._v("以及"),s("strong",[a._v("提交位移后")]),a._v("编写特定逻辑")]),a._v(" "),s("p",[a._v("使用配置。interceptor.classes")]),a._v(" "),s("p",[a._v("org.apache.kafka.clients.producer.ProducerInterceptor 发送拦截器实现")]),a._v(" "),s("ol",[s("li",[a._v("onSend  发送之前被调用")]),a._v(" "),s("li",[a._v("onAcknowledgement  消息成功提交或发送失败之后被调用  ，调用要早于 callback")])]),a._v(" "),s("p",[a._v("org.apache.kafka.clients.consumer.ConsumerInterceptor")]),a._v(" "),s("ol",[s("li",[a._v("onConsume")]),a._v(" "),s("li",[a._v("onCommit")])]),a._v(" "),s("h4",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[a._v("#")]),a._v(" 应用场景")]),a._v(" "),s("p",[a._v("客户端监控、端到端系统性能检测、消息审计等")]),a._v(" "),s("p",[a._v("端到端的监控。")]),a._v(" "),s("p",[a._v("Kafka 默认提供的监控指标都是针对单个客户端或 Broker 的，你很难从具体的消息维度去追踪集群间消息的流转路径。同时，如何监控一条消息从生产到最后消费的端到端延时也是很多 Kafka 用户迫切需要解决的问题")]),a._v(" "),s("h3",{attrs:{id:"拦截器案例-消息端到端处理的延时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拦截器案例-消息端到端处理的延时"}},[a._v("#")]),a._v(" 拦截器案例 - 消息端到端处理的延时")]),a._v(" "),s("p",[a._v("业务消息从被生产出来到最后被消费的平均总时长是多少 ，需要有一个公共的地方保存，放在redis中")]),a._v(" "),s("p",[a._v("消费者拦截器中，我们在真正消费一批消息前首先更新了它们的总延时，方法就是用当前的时钟时间减去封装在消息中的创建时间，然后累计得到这批消息总的端到端处理延时并更新到 Redis 中。之后的逻辑就很简单了，我们分别从 Redis 中读取更新过的总延时和总消息数，两者相除即得到端到端消息的平均处理延时。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AvgLatencyProducerInterceptor")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ProducerInterceptor")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Jedis")]),a._v(" jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 省略Jedis初始化")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ProducerRecord")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onSend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ProducerRecord")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("record")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("incr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"totalSentMessage"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("record")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onAcknowledgement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RecordMetadata")]),a._v(" metadata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" exception"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("configure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" configs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AvgLatencyConsumerInterceptor")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConsumerInterceptor")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Jedis")]),a._v(" jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//省略Jedis初始化")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConsumerRecords")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onConsume")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConsumerRecords")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" records"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" lantency "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConsumerRecord")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("record")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" records"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            lantency "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentTimeMillis")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("record")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("timestamp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("incrBy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"totalLatency"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" lantency"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" totalLatency "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"totalLatency"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" totalSentMsgs "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Long")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("parseLong")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"totalSentMessage"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        jedis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"avgLatency"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("totalLatency "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" totalSentMsgs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" records"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("onCommit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TopicPartition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("OffsetAndMetadata")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" offsets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("configure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" configs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-29-de8af4eb4bacf84dad1151d700774f39.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_13-java生产者是如何管理tcp连接的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-java生产者是如何管理tcp连接的"}},[a._v("#")]),a._v(" 13 | Java生产者是如何管理TCP连接的？")]),a._v(" "),s("p",[a._v("Kafka 是基于 TCP 的，而不是基于 HTTP 或其他协议 生产者、消费者，还是 Broker 之间的通信都是如此")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Properties")]),a._v(" props "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Properties")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nprops"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("“参数"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" “参数"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("的值”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("；\nprops"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("“参数"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" “参数"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("的值”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("；\n……\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Producer")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" producer "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("KafkaProducer")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ProducerRecord")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("……"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  ……\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"何时创建-tcp-连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时创建-tcp-连接"}},[a._v("#")]),a._v(" 何时创建 TCP 连接？")]),a._v(" "),s("p",[a._v("在创建 KafkaProducer 实例时，生产者应用会在后台创建并启动一个名为 Sender 的线程，该 Sender 线程开始运行时首先会创建与 Broker 的连接")]),a._v(" "),s("p",[a._v("Producer 会连接 bootstrap.servers 参数指定的所有 Broker")]),a._v(" "),s("p",[a._v("如果为这个参数指定了 1000 个 Broker 连接信息，那么很遗憾，你的 Producer 启动时会首先创建与这 1000 个 Broker 的 TCP 连接。")]),a._v(" "),s("p",[a._v("不建议把集群中所有的 Broker 信息都配置到 bootstrap.servers 中，通常你指定 3～4 台就足以了，知道一台broker就能拿到整个集群的broker信息。")]),a._v(" "),s("p",[a._v("TCP 连接是在创建 KafkaProducer 实例时建立的")]),a._v(" "),s("p",[a._v("TCP 连接还可能在两个地方被创建：一个是在更新元数据后，另一个是在消息发送时")]),a._v(" "),s("h3",{attrs:{id:"何时关闭-tcp-连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时关闭-tcp-连接"}},[a._v("#")]),a._v(" 何时关闭 TCP 连接？")]),a._v(" "),s("p",[a._v("一种是用户主动关闭；一种是 Kafka 自动关闭。")]),a._v(" "),s("p",[a._v("这里的主动关闭实际上是广义的主动关闭")]),a._v(" "),s("p",[a._v("第二种是 Kafka 帮你关闭，这与 Producer 端参数 connections.max.idle.ms 的值有关。默认情况下该参数值是 9 分钟，即如果在 9 分钟内没有任何请求“流过”某个 TCP 连接，那么 Kafka 会主动帮你把该 TCP 连接关闭。")]),a._v(" "),s("h3",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),s("ol",[s("li",[a._v("KafkaProducer 实例创建时启动 Sender 线程，从而创建与 bootstrap.servers 中所有 Broker 的 TCP 连接。")]),a._v(" "),s("li",[a._v("KafkaProducer 实例首次更新元数据信息之后，还会再次创建与集群中所有 Broker 的 TCP 连接。")]),a._v(" "),s("li",[a._v("如果 Producer 端发送消息到某台 Broker 时发现没有与该 Broker 的 TCP 连接，那么也会立即创建连接。")]),a._v(" "),s("li",[a._v("如果设置 Producer 端 connections.max.idle.ms 参数大于 0，则步骤 1 中创建的 TCP 连接会被自动关闭；")]),a._v(" "),s("li",[a._v("如果设置该参数 =-1，那么步骤 1 中创建的 TCP 连接将无法被关闭，从而成为“僵尸”连接。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-30-5a57423e6d7620a9ae08ecab241bc5e8.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"qa-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa-7"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[a._v("Kafka的元数据信息是存储在zookeeper中的，而Producer是通过broker来获取元数据信息的，那么这个过程是否是这样的，Producer向Broker发送一个获取元数据的请求给Broker，之后Broker再向zookeeper请求这个信息返回给Producer?\n"),s("ol",[s("li",[a._v("集群元数据持久化在ZooKeeper中，同时也缓存在每台Broker的内存中，因此不需要请求ZooKeeper")])])]),a._v(" "),s("li",[a._v("如果Producer在获取完元数据信息之后要和所有的Broker建立连接，那么假设一个Kafka集群中有1000台Broker，对于一个只需要与5台Broker交互的Producer，它连接池中的链接数量是不是从1000->5->1000->5?这样不是显得非常得浪费连接池资源？\n"),s("ol",[s("li",[a._v("就我个人认为，的确有一些不高效。所以我说这里有优化的空间的。")])])]),a._v(" "),s("li",[a._v("Kafka集群的元数据信息是保存在哪里的呢，以CDH集群为例\n"),s("ol",[s("li",[a._v("最权威的数据保存在ZooKeeper中，Controller会从ZooKeeper中读取并保存在它自己的内存中，然后同步部分元数据给集群所有Broker")])])])]),a._v(" "),s("h2",{attrs:{id:"_14-幂等生产者和事务生产者是一回事吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-幂等生产者和事务生产者是一回事吗"}},[a._v("#")]),a._v(" 14 | 幂等生产者和事务生产者是一回事吗？")]),a._v(" "),s("blockquote",[s("p",[a._v("Kafka 消息交付可靠性保障以及精确处理一次语义的实现。")])]),a._v(" "),s("h3",{attrs:{id:"消息交付可靠性保障-是指-kafka-对-producer-和-consumer-要处理的消息提供什么样的承诺"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消息交付可靠性保障-是指-kafka-对-producer-和-consumer-要处理的消息提供什么样的承诺"}},[a._v("#")]),a._v(" 消息交付可靠性保障，是指 Kafka 对 Producer 和 Consumer 要处理的消息提供什么样的承诺")]),a._v(" "),s("p",[a._v("常见三种")]),a._v(" "),s("ol",[s("li",[a._v("最多一次（at most once）：消息可能会丢失，但绝不会被重复发送。")]),a._v(" "),s("li",[a._v("至少一次（at least once）：消息不会丢失，但有可能被重复发送。")]),a._v(" "),s("li",[a._v("精确一次（exactly once）：消息不会丢失，也不会被重复发送。")])]),a._v(" "),s("p",[a._v("默认可靠性保证是第二种。“已经提交”的含义： 只有broker成功提交消息并且producer接收到 broker的应答才会认为消息成功发送。 如果 消息成功提交，但是produer没有收到应答（网络抖动），那么produer就无法确定消息是否真的提交了。因此只能充实。可能发送相同的消息。")]),a._v(" "),s("p",[a._v("Kafka 是怎么做到精确一次的呢？简单来说，这是通过两种机制：幂等性（Idempotence）和事务（Transaction）")]),a._v(" "),s("h3",{attrs:{id:"什么是幂等性-idempotence"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是幂等性-idempotence"}},[a._v("#")]),a._v(" 什么是幂等性（Idempotence）？")]),a._v(" "),s("p",[a._v("数学领域中的概念，指的是某些操作或函数能够被执行多次，但每次得到的结果都是不变的。")]),a._v(" "),s("p",[a._v("幂等性有很多好处，其最大的优势在于我们可以安全地重试任何幂等性操作，反正它们也不会破坏我们的系统状态")]),a._v(" "),s("h4",{attrs:{id:"幂等性-producer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#幂等性-producer"}},[a._v("#")]),a._v(" 幂等性 Producer")]),a._v(" "),s("p",[a._v("Producer 默认不是幂等性的")]),a._v(" "),s("p",[a._v("可以创建幂等性 Producer。它其实是 0.11.0.0 版本引入的新功能")]),a._v(" "),s("p",[a._v("之前可能一条消息发送多次，导致消息重复的情况")]),a._v(" "),s("p",[a._v("在 0.11 之后，指定  props.put(“enable.idempotence”, ture)")]),a._v(" "),s("p",[a._v("然后producer自动升级成幂等性 Producer。其他逻辑代码都不需要改变，kafka自动帮你做消息的重复去重")]),a._v(" "),s("p",[a._v("底层代码逻辑： 经典用空间换时间的优化思路，即在broker端多保存一些字段，档producer发送了相同字段值的消息后，brokder自动知晓消息重复，后台默默把她们丢弃掉。实际原理比较复杂。")]),a._v(" "),s("h4",{attrs:{id:"幂等性-producer作用范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#幂等性-producer作用范围"}},[a._v("#")]),a._v(" 幂等性 Producer作用范围")]),a._v(" "),s("ol",[s("li",[a._v("它只能保证单分区上的幂等性，即一个幂等性 Producer 能够保证某个主题的一个分区上不出现重复消息，它无法实现多个分区的幂等性")]),a._v(" "),s("li",[a._v("只能实现单会话的幂等性 ，不能实现多会话幂等性， 理解为党producer一次运行，重启了之后，这种幂等性 就小时了。")])]),a._v(" "),s("p",[a._v("如果我想实现"),s("strong",[a._v("多分区以及多会话上的消息无重复")]),a._v("，？答案就是事务（transaction）或者依赖事务型 Producer。这也是幂等性 Producer 和事务型 Producer 的最大区别！")]),a._v(" "),s("h3",{attrs:{id:"事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[a._v("#")]),a._v(" 事务")]),a._v(" "),s("p",[a._v("Kafka 的事务概念类似于我们熟知的数据库提供的事务。在数据库领域，事务提供的安全性保障是经典的 ACID，即原子性（Atomicity）、一致性 (Consistency)、隔离性 (Isolation) 和持久性 (Durability)。")]),a._v(" "),s("p",[a._v("Kafka 自 0.11 版本开始也提供了对事务的支持，目前主要是在 read committed 隔离级别上做事情。它能保证多条消息原子性地写入到目标分区，同时也能保证 Consumer 只能看到事务成功提交的消息。下面我们就来看看 Kafka 中的事务型 Producer。")]),a._v(" "),s("h3",{attrs:{id:"事务性producer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务性producer"}},[a._v("#")]),a._v(" 事务性Producer")]),a._v(" "),s("p",[a._v("事务型 Producer 能够保证将消息原子性地写入到多个分区中。这批消息要么全部写入成功，要么全部失败。另外，事务型 Producer 也不惧进程的重启。Producer 重启回来后，Kafka 依然保证它们发送消息的精确一次处理。")]),a._v(" "),s("p",[a._v("两个步骤")]),a._v(" "),s("ol",[s("li",[a._v("和幂等性 Producer 一样，开启 enable.idempotence = true。")]),a._v(" "),s("li",[a._v("设置 Producer 端参数 transactional. id。最好为其设置一个有意义的名字。")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\nproducer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("initTransactions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("beginTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("record1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("record2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commitTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("KafkaException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("abortTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("消费端也要修改设置，比如上面 两个记录，即使失败，也会写入底层的日志中， 消费者短需要设置 isolation.level")]),a._v(" "),s("p",[a._v("两个取值")]),a._v(" "),s("ol",[s("li",[a._v("read_uncommitted：默认值，表明 Consumer 能够读取到 Kafka 写入的任何消息，不论事务型 Producer 提交事务还是终止事务，其写入的消息都可以读取。很显然，如果你用了事务型 Producer，那么对应的 Consumer 就不要使用这个值。")]),a._v(" "),s("li",[a._v("read_committed：表明 Consumer 只会读取事务型 Producer 成功提交事务写入的消息。当然了，它也能看到非事务型 Producer 写入的所有消息。")])]),a._v(" "),s("h3",{attrs:{id:"小结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),s("p",[a._v("幂等性 Producer 只能保证单分区、单会话上的消息幂等性；")]),a._v(" "),s("p",[a._v("而事务能够保证跨分区、跨会话间的幂等性。从交付语义上来看，自然是事务型 Producer 能做的更多。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-03-30-12bd866140eec2fa3bddd78870f77efa.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"qa-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa-8"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[a._v("幂等性为什么只保证单分区有效？是因为下一次消息重试指不定发送到哪个分区么。如果这样的话是不是可以采用按消息键保序的方式？这样重试消息还发送到同一个分区。\n"),s("ol",[s("li",[a._v("重启之后标识producer的PID就变化了，broker就不认识了。要想认识就要让broker和producer做更多的事，也就是事务机制做的那些事。")])])]),a._v(" "),s("li",[a._v("事务型producer不会重复发送消息吗？如果发送的这一批到broker了，但是broker返回的确认消息producer没有收到，再次尝试，broker会去重吗？或者consumer端会去重啊？\n1.")])]),a._v(" "),s("h2",{attrs:{id:"_15-消费者组到底是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-消费者组到底是什么"}},[a._v("#")]),a._v(" 15 | 消费者组到底是什么？")]),a._v(" "),s("p",[a._v("Consumer Group 是 Kafka 提供的可扩展且具有容错性的消费者机制")]),a._v(" "),s("p",[a._v("Kafka 仅仅使用 Consumer Group 这一种机制，却同时实现了传统消息引擎系统的两大模型：如果所有实例都属于同一个 Group，那么它实现的就是消息队列模型；如果所有实例分别属于不同的 Group，那么它实现的就是发布 / 订阅模型。")]),a._v(" "),s("p",[a._v("老版本的offset 放在zk中，zk不适合频繁读写，所以新版本就没放在zk中了")]),a._v(" "),s("p",[a._v("新版本的会放在 __consumer_offsets  内部主题中")]),a._v(" "),s("h3",{attrs:{id:"rebalance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebalance"}},[a._v("#")]),a._v(" Rebalance")]),a._v(" "),s("p",[a._v("Rebalance 本质上是一种协议，规定了一个 Consumer Group 下的所有 Consumer 如何达成一致，来分配订阅 Topic 的每个分区")]),a._v(" "),s("p",[a._v("Rebalance 的触发条件有 3 个")]),a._v(" "),s("ol",[s("li",[a._v("组成员数发生变更 有新进，或者有 consumer 崩溃了。")]),a._v(" "),s("li",[a._v("订阅主题数发生变更。比如用正则订阅主题， 有新增的主题了。")]),a._v(" "),s("li",[a._v("订阅主题的分区数发生变更 只允许新增")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-01-5da52290ed23628603a535eb6a313955.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"rebalance缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebalance缺点"}},[a._v("#")]),a._v(" Rebalance缺点")]),a._v(" "),s("p",[a._v("万物静止，类似于JVM的STW，在Rebalance过程中，所有consumer都会停止消费，等待rebalcance完成")]),a._v(" "),s("p",[a._v("目前是所有consumer共同参与，但是更新高效的应该是尽量减少变动，比如A消费1，2，3，分配后还是1，2，3，这样这些事分区所在broker的tcp链接就可以继续用，不用重新闯劲")]),a._v(" "),s("p",[a._v("Rebalance比较满。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-01-4ac3c58587f49d53cced939b25cd0d31.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_16-揭开神秘的-位移主题-面纱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-揭开神秘的-位移主题-面纱"}},[a._v("#")]),a._v(" 16 | 揭开神秘的“位移主题”面纱")]),a._v(" "),s("p",[a._v("将 Consumer 的位移数据作为一条条普通的 Kafka 消息，提交到 __consumer_offsets 中。可以这么说，__consumer_offsets 的主要作用是保存 Kafka 消费者的位移信息。")]),a._v(" "),s("h3",{attrs:{id:"设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计"}},[a._v("#")]),a._v(" 设计")]),a._v(" "),s("p",[a._v("Key-value 键值对")]),a._v(" "),s("p",[a._v("位移主题的 Key 中应该保存 3 部分内容：。<Group ID，主题名，分区号 >")]),a._v(" "),s("p",[a._v("value就是存的offset信息，可以这么简单理解")]),a._v(" "),s("h3",{attrs:{id:"创建时机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建时机"}},[a._v("#")]),a._v(" 创建时机")]),a._v(" "),s("p",[a._v("当 Kafka 集群中的第一个 Consumer 程序启动时，Kafka 会自动创建位移主题")]),a._v(" "),s("p",[a._v("Broker 端参数 offsets.topic.num.partitions 的取值了。它的默认值是 50")]),a._v(" "),s("p",[a._v("如果位移主题是 Kafka 自动创建的，那么该主题的分区数是 50，副本数是 3。")]),a._v(" "),s("h3",{attrs:{id:"怎么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么用"}},[a._v("#")]),a._v(" 怎么用")]),a._v(" "),s("p",[a._v("Kafka Consumer 提交位移的方式有两种：自动提交位移和手动提交位移。")]),a._v(" "),s("p",[a._v("consumer端参数 enable.auto.commit，如果是ture，consumer在后台默默提交位移，auto.commit.interval.ms 控制提交间隔")]),a._v(" "),s("p",[a._v("自动提交的优点：\n省事，你不用操心位移提交的事情，就能保证消息消费不会丢失。\n缺点：\n太省事了，丧失灵活度 没法把控 Consumer 端的位移管理。")]),a._v(" "),s("p",[a._v("手动提交位移，即设置 enable.auto.commit = false\nconsumer.commitSync")]),a._v(" "),s("h3",{attrs:{id:"compact策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compact策略"}},[a._v("#")]),a._v(" Compact策略")]),a._v(" "),s("p",[a._v("一直发消息，比如 没有消息了，consumer一直发送 位移为100的消息，如果不处理，会撑爆，所以kafka使用 compact策略，删除位移主题的过期消息")]),a._v(" "),s("blockquote",[s("p",[a._v("对于同一个 Key 的两条消息 M1 和 M2，如果 M1 的发送时间早于 M2，那么 M1 就是过期消息")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-01-9292fa523a38191d7916aaa0fe7aff31.png",alt:"image"}})]),a._v(" "),s("p",[a._v("Kafka 提供了专门的后台线程定期地巡检待 Compact 的主题，看看是否存在满足条件的可删除数据。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-01-08158ce44581f271972be1df3e0a642f.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_17-消费者组重平衡能避免吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-消费者组重平衡能避免吗"}},[a._v("#")]),a._v(" 17 | 消费者组重平衡能避免吗？")]),a._v(" "),s("p",[a._v("Rebalance 就是让一个 Consumer Group 下所有的 Consumer 实例就如何消费订阅主题的所有分区达成共识的过程 ,这个过程中，所有实例不能消费任何消息，对consumer的tps影响非常大。")]),a._v(" "),s("h3",{attrs:{id:"协调者"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协调者"}},[a._v("#")]),a._v(" 协调者")]),a._v(" "),s("p",[a._v("协调者，在 Kafka 中对应的术语是 Coordinator，它专门为 Consumer Group 服务，负责为 Group 执行 Rebalance 以及提供位移管理和组成员管理等。")]),a._v(" "),s("p",[a._v("Consumer 端应用程序在提交位移时，其实是向 Coordinator 所在的 Broker 提交位移。同样地，当 Consumer 应用启动时，也是向 Coordinator 所在的 Broker 发送各种请求，然后由 Coordinator 负责执行消费者组的注册、成员管理记录等元数据管理操作。")]),a._v(" "),s("p",[a._v("broker 启动的时候，开启相应 coordinate组件 所有 Broker 都有各自的 Coordinator 组件")]),a._v(" "),s("h3",{attrs:{id:"如何确定-consumer-group-为他服务的-协调者在哪个broker上呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何确定-consumer-group-为他服务的-协调者在哪个broker上呢"}},[a._v("#")]),a._v(" 如何确定 consumer group 为他服务的 协调者在哪个broker上呢？")]),a._v(" "),s("p",[a._v("答案就在 __consumer_offsets 两个步骤")]),a._v(" "),s("ol",[s("li",[a._v("确定由位移主题的哪个分区来保存该 Group 数据：partitionId=Math.abs(groupId.hashCode() % offsetsTopicPartitionCount)")]),a._v(" "),s("li",[a._v("找出该分区 Leader 副本所在的 Broker，该 Broker 即为对应的 Coordinator。")])]),a._v(" "),s("p",[a._v("Consumer 应用程序，特别是 Java Consumer API，能够自动发现并连接正确的 Coordinator\n这个算法能够帮助我们定位问题，快速找到对应的broker")]),a._v(" "),s("h3",{attrs:{id:"rebalance-弊端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebalance-弊端"}},[a._v("#")]),a._v(" Rebalance 弊端")]),a._v(" "),s("ol",[s("li",[a._v("Rebalance 影响 Consumer 端 TPS")]),a._v(" "),s("li",[a._v("Rebalance 很慢。group 下成员很多的时候。")]),a._v(" "),s("li",[a._v("Rebalance 效率不高。 每次 Rebalance 时，Group 下的所有成员都要参与进来，而且通常不会考虑局部性原理，但局部性原理对提升系统性能是特别重要的。\n"),s("ol",[s("li",[a._v("就是有一个消费者退出，他消费的分区不能均匀分配给其他分区，而是必须重新分配，到之后 tcp链接的浪费。0.11.0.0 有一个 StickyAssigneor 粘性 分配，有一些bug")])])])]),a._v(" "),s("h3",{attrs:{id:"如何避免"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何避免"}},[a._v("#")]),a._v(" 如何避免")]),a._v(" "),s("h4",{attrs:{id:"发生的时机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发生的时机"}},[a._v("#")]),a._v(" 发生的时机")]),a._v(" "),s("ol",[s("li",[a._v("组成员变化")]),a._v(" "),s("li",[a._v("订阅主题数量发生变化")]),a._v(" "),s("li",[a._v("订阅主题分区数发生了变化")])]),a._v(" "),s("p",[a._v("后面两个无法避免")]),a._v(" "),s("h3",{attrs:{id:"组成员数量变化而引发的-rebalance-该如何避免。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组成员数量变化而引发的-rebalance-该如何避免。"}},[a._v("#")]),a._v(" 组成员数量变化而引发的 Rebalance 该如何避免。")]),a._v(" "),s("p",[a._v("新增消费者无可厚非，计划内的。  更在意的是 Group 下实例数减少这件事。\n如果你就是要停掉某些 Consumer 实例，那自不必说，\n关键是在某些情况下，Consumer 实例会被 Coordinator 错误地认为“已停止”从而被“踢出”Group。")]),a._v(" "),s("p",[a._v("Coordinator 会在什么情况下认为某个 Consumer 实例已挂从而要退组呢？")]),a._v(" "),s("p",[a._v("session.timeout.ms ，完成 rebalance后，consumer会定期向协调者发送 心跳，表明存活。 session.timeout.ms 超时时间，默认10s，如果10s内没有收到心跳，就会认为已经挂了。")]),a._v(" "),s("p",[a._v("heartbeat.interval.ms 控制发送频率。每隔多少ms发送一次。")]),a._v(" "),s("p",[a._v("max.poll.interval.ms 限定了 Consumer 端应用程序两次调用 poll 方法的最大时间间隔，默认5分钟，如果在5分钟内，无法消费完poll的消息，那么consumer会主动发起离开组的请求。会开启新一轮的rebalance")]),a._v(" "),s("p",[a._v("第一类非必要 Rebalance 是因为未能及时发送心跳，导致 Consumer 被“踢出”Group 而引发的  仔细设置  session.timeout.ms 和 heartbeat.interval.ms 的值")]),a._v(" "),s("ul",[s("li",[a._v("设置 session.timeout.ms = 6s。")]),a._v(" "),s("li",[a._v("设置 heartbeat.interval.ms = 2s。")])]),a._v(" "),s("p",[a._v("第二类非必要 Rebalance 是 Consumer 消费时间过长导致的  max.poll.interval.ms ，比如写mongo这种比较重的操作，设置大一些，比最长的消费时间要大一些")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-06-03f8dd9da1b6e1df327528f25bf9806c.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_18-kafka中位移提交那些事儿"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-kafka中位移提交那些事儿"}},[a._v("#")]),a._v(" 18 | Kafka中位移提交那些事儿")]),a._v(" "),s("p",[a._v("Consumer Offset  它记录了 Consumer 要消费的"),s("strong",[a._v("下一条")]),a._v("消息的位移")]),a._v(" "),s("p",[a._v("Consumer 需要向 Kafka 汇报自己的位移数据，这个汇报过程被称为提交位移（Committing Offsets）Consumer 需要为分配给它的每个分区提交各自的位移数据。\n位移提交的语义保障是由你来负责的，Kafka 只会“无脑”地接受你提交的位移。")]),a._v(" "),s("p",[a._v("从用户的角度来说，位移提交分为自动提交和手动提交；从 Consumer 端的角度来说，位移提交分为同步提交和异步提交。")]),a._v(" "),s("p",[a._v("enable.auto.commit  默认值是true，\nauto.commit.interval.ms 默认值是5s，自动模式下生效")]),a._v(" "),s("p",[a._v("手动提交 KafkaConsumer#commitSync()，会提交poll返回回来的最新的位移，是一个 "),s("strong",[a._v("同步操作")])]),a._v(" "),s("h3",{attrs:{id:"自动提交的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动提交的问题"}},[a._v("#")]),a._v(" 自动提交的问题")]),a._v(" "),s("p",[a._v("设置自动提交，kafka会保证在开始调用poll方法的时候，提交上次poll返回的消息\n顺序是 ，poll 方法的逻辑是先提交上一批消息的位移，再处理下一批消息。\n因此保证不出现消息丢失的情况")]),a._v(" "),s("p",[a._v("问题是。他可能会出现 "),s("strong",[a._v("重复消费")])]),a._v(" "),s("p",[a._v("比如提交offset 3 秒之后，")]),a._v(" "),s("h3",{attrs:{id:"手动提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动提交"}},[a._v("#")]),a._v(" 手动提交")]),a._v(" "),s("p",[a._v("如果过早提交了offset，消息还没处理完成，则有可能丢失数据。\n好处是 "),s("strong",[a._v("更加灵活，自己控制offset的提交时机和频率")]),a._v("\n缺陷是 调用 commitSync的时候，consumer会阻塞状态，知道broker返回结果。会影响应用的tps。\n如果降低提交频率，一旦consumer重启的时候，就有更多的消息被重新消费。")]),a._v(" "),s("p",[a._v("有另外一个 commitAsync，异步提交，提供 callback回调，不能替代 commitSync ，因为出现问题不会自动充实， 因为如果重试，提交的offset可能是过期的或者不是最新的值了。")]),a._v(" "),s("p",[a._v("需要将两者结合,在consumer退出的时候，执行 手动提交。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConsumerRecords")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" records "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" \n                                    consumer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Duration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ofSeconds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("process")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("records"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 处理消息")]),a._v("\n                        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commitAysnc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使用异步提交规避阻塞")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Exception")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 处理异常")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("finally")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                        consumer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("commitSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 最后一次提交使用同步阻塞式提交")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("finally")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       consumer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-06-cd8052898b153d1349d0a6e3bd45fee7.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"qa-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qa-9"}},[a._v("#")]),a._v(" QA")]),a._v(" "),s("ol",[s("li",[a._v("auto.commit.interval.ms设置为5s，也就是说consumer每5秒才提交一次位移信息，那consumer如果每消费一条数据，但是没有达到自动提交的时间，这个位移信息该如何管理？consumer自己做维护吗？但是也需要跟broker端进行位移信息同步的吧？ 不然可能会造成数据的重复消费？还是每5s的提交和consumer自动提交的时候都会伴随位移信息的同步？是我的理解有问题吗？\n"),s("blockquote",[s("p",[a._v("如果没有达到提交时间就不会提交，自动提交完全由consumer自行维护，确实可能造成数据的重复消费。你的理解完全没有问题：）\n目前单纯依赖consumer是无法避免消息的重复消费的，Kafka默认提供的消息处理语义就是至少一次处理。")])])])]),a._v(" "),s("h2",{attrs:{id:"_20-多线程开发消费者实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-多线程开发消费者实例"}},[a._v("#")]),a._v(" 20 | 多线程开发消费者实例")]),a._v(" "),s("h3",{attrs:{id:"多线程方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程方案"}},[a._v("#")]),a._v(" 多线程方案")]),a._v(" "),s("p",[a._v("，KafkaConsumer 类不是线程安全的 (thread-safe) ，不能多个线程共享 ，否则ConcurrentModificationException")]),a._v(" "),s("h4",{attrs:{id:"方案一"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方案一"}},[a._v("#")]),a._v(" 方案一")]),a._v(" "),s("p",[a._v(".消费者程序启动多个线程，每个线程维护专属的 KafkaConsumer 实例，负责完整的消息获取、消息处理流程")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-06-28059ce9dca34add4e7f380815337182.png",alt:"image"}})]),a._v(" "),s("p",[a._v("优势：")]),a._v(" "),s("ol",[s("li",[a._v("实现简单。")])]),a._v(" "),s("h4",{attrs:{id:"方案二"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方案二"}},[a._v("#")]),a._v(" 方案二")]),a._v(" "),s("p",[a._v("消费者程序使用单或多线程获取消息，同时创建多个消费线程执行消息处理逻辑。获取消息的线程可以是一个，也可以是多个，每个线程维护专属的 KafkaConsumer 实例，处理消息则交由特定的线程池来做，")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-06-a13b724a6f4c9cf01a776fe17f48763d.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[a._v("#")]),a._v(" 对比")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-06-12a2adb25c1d7422659929663b6a3792.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-06-ca450ccc72d7294cb4212339f9eb3794.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_21-java-消费者是如何管理tcp连接的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-java-消费者是如何管理tcp连接的"}},[a._v("#")]),a._v(" 21 | Java 消费者是如何管理TCP连接的?")]),a._v(" "),s("h3",{attrs:{id:"何时创建-tcp-连接-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时创建-tcp-连接-2"}},[a._v("#")]),a._v(" 何时创建 TCP 连接？")]),a._v(" "),s("p",[a._v("。和生产者不同的是，构建 KafkaConsumer 实例时是不会创建任何 TCP 连接的，\nTCP 连接是在调用 KafkaConsumer.poll 方法时被创建的")]),a._v(" "),s("p",[a._v("三个时机创建")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("发起 FindCoordinator 请求时。\npoll的时候，需要发起一个 FindCoordinator 告诉它哪个broker管理它的链接\n向负载最小的broker发送这个请求（这个是从待发送的请求的数量角度，单向的）")])]),a._v(" "),s("li",[s("p",[a._v("连接协调者时。")]),a._v(" "),s("p",[a._v("知道后，创建连向该 Broker 的 Socket 连接。只有成功连入协调者，协调者才能开启正常的组协调操作，比如加入组、等待组分配方案 心跳请求处理、位移获取、位移提交等。")])]),a._v(" "),s("li",[s("p",[a._v("消息消费的时候\n与该分区的领导者副本所在broker创建tcp链接")])])]),a._v(" "),s("h3",{attrs:{id:"何时关闭-tcp-连接-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何时关闭-tcp-连接-2"}},[a._v("#")]),a._v(" 何时关闭 TCP 连接？")]),a._v(" "),s("p",[a._v("主动关闭\n手动调用 KafkaConsumer.close() 方法，或者是执行 Kill 命令，不论是 Kill -2 还是 Kill -9")]),a._v(" "),s("p",[a._v("Kafka 自动关闭")]),a._v(" "),s("p",[a._v("消费者端参数 connection.max.idle.ms 控制的，默认九分钟，如果九分钟没有任何请求过境，消费者会强行杀掉 socket链接")]),a._v(" "),s("p",[a._v("如果是循环调用poll方法消费，那么 会定期有请求， 因此这些socket 链接有请求，实现了场链接")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-06-83de5a56574a519deaab3b8cb6571827.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_22-消费者组消费进度监控都怎么实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-消费者组消费进度监控都怎么实现"}},[a._v("#")]),a._v(" 22 | 消费者组消费进度监控都怎么实现？")]),a._v(" "),s("h3",{attrs:{id:"kafka-jmx-监控指标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kafka-jmx-监控指标"}},[a._v("#")]),a._v(" Kafka JMX 监控指标")]),a._v(" "),s("p",[a._v("afka 消费者提供了一个名为 kafka.consumer:type=consumer-fetch-manager-metrics,client-id=“{client-id}”的 JMX 指标 ：records-lag-max 和 records-lead-min，它们分别表示此消费者在测试窗口时间内曾经达到的最大的 Lag 值和最小的 Lead 值。")]),a._v(" "),s("p",[a._v("这里的 Lead 值是指消费者最新消费消息的位移与分区当前第一条消息位移的差值。很显然，Lag 和 Lead 是一体的两个方面：Lag 越大的话，Lead 就越小，反之也是同理。")]),a._v(" "),s("p",[a._v("在实际生产环境中，请你一定要同时监控 Lag 值和 Lead 值")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-07-e151de59807402774611888a0edb01da.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_23-kafka副本机制详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-kafka副本机制详解"}},[a._v("#")]),a._v(" 23 | Kafka副本机制详解")]),a._v(" "),s("h3",{attrs:{id:"副本机制的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#副本机制的优点"}},[a._v("#")]),a._v(" 副本机制的优点")]),a._v(" "),s("ol",[s("li",[a._v("提高数据冗余")]),a._v(" "),s("li",[a._v("提供高伸缩性")]),a._v(" "),s("li",[a._v("改善数据局部性")])]),a._v(" "),s("p",[a._v("kafka 只能提供第一种")]),a._v(" "),s("h3",{attrs:{id:"副本定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#副本定义"}},[a._v("#")]),a._v(" 副本定义")]),a._v(" "),s("p",[a._v("所谓副本（Replica），本质就是一个只能追加写消息的提交日志，同分区所有副本保存相同的消息序列。\n"),s("img",{attrs:{src:"https://static.lovedata.net/21-04-07-6be2d81d14bf20346e95a6d321554904.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"副本角色"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#副本角色"}},[a._v("#")]),a._v(" 副本角色")]),a._v(" "),s("p",[a._v("如何保证副本的所有数据是一致的呢？\n基于领导者的（leader-based）的副本机制")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-07-197607c6f0ac280b4ac958d0695cfb5a.png",alt:"image"}})]),a._v(" "),s("ol",[s("li",[a._v("副本两类： 领导者和追随者副本(leader. follower)，每个分区一个领导者副本，其余自动是追随者副本")]),a._v(" "),s("li",[a._v("追随者副本不提供任何读写服务。追随者唯一任务就是从领导者副本 "),s("strong",[a._v("异步拉取")]),a._v("消息，并存入到自己的提交日志中，从而实现同步\n这就是kafka不能提供读操作的横向扩展以及改善局部性，和mysql不同，有两个好处\n"),s("ol",[s("li",[a._v("方便实现 read-your-writers  写了就可以见到，如果副本堵，可能就看不到")]),a._v(" "),s("li",[a._v("方便实现单调读（Monotonic reads）对某一个消费着而言，在多次消费消息的时候，不会存在消息一会看得到，一会看不到。")])])]),a._v(" "),s("li",[a._v("当leader挂了，或者leader所在broker挂掉了， kafka依托于zk的监控功能能够实时感知，并开启新一轮领导者选举，从副本中选取一个新的领导者，老得leader回来后，只能作为追随者加入")])]),a._v(" "),s("h3",{attrs:{id:"in-sync-replicas-isr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#in-sync-replicas-isr"}},[a._v("#")]),a._v(" In-sync replicas(ISR)")]),a._v(" "),s("p",[a._v("追随者副本 拉取数据是 异步的，就存在着可能不与 Leader 实时同步的风险")]),a._v(" "),s("p",[a._v("需要理解什么是同步，怎么才算于leader同步")]),a._v(" "),s("p",[a._v("基于这个 kafka引入了 ISR, isr中的副本都是与leader同步的，反之亦然")]),a._v(" "),s("p",[a._v("ISR 不只是追随者副本集合，它必然包括 Leader 副本。甚至在某些情况下，ISR 只有 Leader 这一个副本。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-07-feb3b44bffb825b33ce034295c31b6f6.png",alt:"image"}})]),a._v(" "),s("p",[a._v("kafka判定follower 是否与leader同步的标准，不是看相差的条数")]),a._v(" "),s("p",[a._v("这个标准就是 Broker 端参数 replica.lag.time.max.ms 参数值 含义是 Follower 副本能够落后 Leader 副本的最长时间间隔，当前默认值是 10 秒。 只要一个 Follower 副本落后 Leader 副本的时间不连续超过 10 秒，那么 Kafka 就认为该 Follower 副本与 Leader 是同步的，即使此时 Follower 副本中保存的消息明显少于 Leader 副本中的消息。")]),a._v(" "),s("p",[s("strong",[a._v("replica.lag.time.max.ms")]),a._v("\n这个配置项的意思是follower要同时满足以下两个条件才不会被踢出Isr，默认10000ms（10s）")]),a._v(" "),s("ol",[s("li",[a._v("距离上次发送fetch请求不超过这个时间")]),a._v(" "),s("li",[a._v("在这个时间follower要赶上主的LEO(log end offset )")])]),a._v(" "),s("h3",{attrs:{id:"unclean-领导者选举-unclean-leader-election"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unclean-领导者选举-unclean-leader-election"}},[a._v("#")]),a._v(" Unclean 领导者选举（Unclean Leader Election）")]),a._v(" "),s("p",[a._v("出现 ISR 为空，说明leader也挂掉了。需要重新选leader")]),a._v(" "),s("p",[a._v("都为空了，怎么选 Kafka 把所有不在 ISR 中的存活副本都称为非同步副本")]),a._v(" "),s("p",[a._v("选举这种副本的过程称为 Unclean 领导者选举。Broker 端参数 unclean.leader.election.enable 控制是否允许 Unclean 领导者选举。")]),a._v(" "),s("p",[a._v("开启后 可能会数据丢失。 好处是： 使得leader副本一致存在，不至于停止对外提供服务 ，提升了高可用行，反之禁用 维护了数据一致性，避免消息丢失，但牺牲了高可用行")]),a._v(" "),s("p",[a._v("墙裂建议不要开启它。")]),a._v(" "),s("p",[a._v("![image](https://static.lovedata.net/21-04-07-c16302146c37e45b16dc18c01f8f8ecc.png")]),a._v(" "),s("h2",{attrs:{id:"_24-请求是怎么被处理的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-请求是怎么被处理的"}},[a._v("#")]),a._v(" 24 | 请求是怎么被处理的？")]),a._v(" "),s("h3",{attrs:{id:"reactor模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactor模式"}},[a._v("#")]),a._v(" Reactor模式")]),a._v(" "),s("p",[a._v("http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf")]),a._v(" "),s("p",[a._v("Reactor 模式是事件驱动架构的一种实现方式，特别适合应用于处理多个客户端并发向服务器端发送请求的场景")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-42ba38619079d69e2ffc9c0cd209833f.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-0d7b5be09bf06e8c001387a42f9b2c61.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("Kafka 的 Broker 端有个 SocketServer 组件，类似于 Reactor 模式中的 Dispatcher，它也有对应的 Acceptor 线程和一个工作线程池，只不过在 Kafka 中，这个工作线程池有个专属的名字，叫网络线程池。Kafka 提供了 Broker 端参数 num.network.threads，用于调整该网络线程池的线程数。其默认值是 3，表示每台 Broker 启动时会创建 3 个网络线程，专门处理客户端发送的请求。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-387ff47380e1d3bb548916dccc16a436.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"purgatory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#purgatory"}},[a._v("#")]),a._v(" Purgatory")]),a._v(" "),s("p",[a._v("著名的“炼狱”组件。它是用来缓存延时请求（Delayed Request）的。所谓延时请求，就是那些一时未满足条件不能立刻处理的请求。")]),a._v(" "),s("p",[a._v("比如 acks=all, 该请求必须等待ISR中所有副本都接受消息才能返回。此时请求的io线程必须等待其他broker写入结果。 当不能立即处理， 会暂存在Purgatory中，满足条件后，io线程会继续处理该请求，并将response放入到对应的网络线程响应队列中。")]),a._v(" "),s("h2",{attrs:{id:"_25-消费者组重平衡全流程解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-消费者组重平衡全流程解析"}},[a._v("#")]),a._v(" 25 | 消费者组重平衡全流程解析")]),a._v(" "),s("h3",{attrs:{id:"触发与通知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#触发与通知"}},[a._v("#")]),a._v(" 触发与通知")]),a._v(" "),s("ol",[s("li",[a._v("数量发生变化。")]),a._v(" "),s("li",[a._v("订阅主题数量发生变化。")]),a._v(" "),s("li",[a._v("订阅主题的分区数发生变化。")])]),a._v(" "),s("h3",{attrs:{id:"如何通知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何通知"}},[a._v("#")]),a._v(" 如何通知")]),a._v(" "),s("p",[a._v("重平衡过程是如何通知到其他消费者实例的？答案就是，靠消费者端的心跳线程（Heartbeat Thread）。")]),a._v(" "),s("p",[a._v("重平衡的通知机制正是通过心跳线程来完成的")]),a._v(" "),s("p",[a._v("当协调者决定开启新一轮重平衡后，它会将“REBALANCE_IN_PROGRESS”封装进心跳请求的响应中，发还给消费者实例  然后消费者就知道了。")]),a._v(" "),s("p",[a._v("heartbeat.interval.ms 心跳时间。 但这个参数的真正作用是控制重平衡通知的频率")]),a._v(" "),s("h3",{attrs:{id:"消费者组状态机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费者组状态机"}},[a._v("#")]),a._v(" 消费者组状态机")]),a._v(" "),s("p",[a._v("Kafka 设计了一套消费者组状态机（State Machine），来帮助协调者完成整个重平衡流程。")]),a._v(" "),s("p",[a._v("它能够帮助你搞懂消费者组的设计原理，比如消费者组的过期位移（Expired Offsets）删除等。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-8702e6a755e7b1a20e76af3a044ecd28.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-68522f708e72b42d00cf0619671c3171.png",alt:"image"}})]),a._v(" "),s("p",[a._v("一个消费者组最开始是 Empty 状态，当重平衡过程开启后，它会被置于 PreparingRebalance 状态等待成员加入，之后变更到 CompletingRebalance 状态等待分配方案，最后流转到 Stable 状态完成重平衡。当有新成员加入或已有成员退出时，消费者组的状态从 Stable 直接跳到 PreparingRebalance 状态，此时，所有现存成员就必须重新申请加入组。当所有成员都退出组后，消费者组状态变更为 Empty。Kafka 定期自动删除过期位移的条件就是，组要处于 Empty 状态。因此，如果你的消费者组停掉了很长时间（超过 7 天），那么 Kafka 很可能就把该组的位移数据删除了。")]),a._v(" "),s("h3",{attrs:{id:"消费者端重平衡流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费者端重平衡流程"}},[a._v("#")]),a._v(" 消费者端重平衡流程")]),a._v(" "),s("h4",{attrs:{id:"消费者端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#消费者端"}},[a._v("#")]),a._v(" 消费者端")]),a._v(" "),s("p",[a._v("分别是加入组和等待领导者消费者（Leader Consumer）分配方案。这两个步骤分别对应两类特定的请求：JoinGroup 请求和 SyncGroup 请求。")]),a._v(" "),s("p",[a._v("组内成员加入组时，它会向协调者发送 JoinGroup 请求\n一旦收集了全部成员的 JoinGroup 请求后，协调者会从这些成员中选择一个担任这个消费者组的领导者。\n通常 第一个发送 JoinGroup 请求的成员自动成为领导者。\n领导者消费者的任务是收集所有成员的订阅信息，然后根据这些信息，制定具体的分区消费分配方案。")]),a._v(" "),s("p",[a._v("选出领导者之后，协调者会把消费者组订阅信息封装进 JoinGroup 请求的响应体中，然后发给领导者，由领导者统一做出分配方案后，进入到下一步：发送 SyncGroup 请求")]),a._v(" "),s("p",[a._v("领导者向协调者发送 SyncGroup 请求，将刚刚做出的分配方案发给协调者，其他组成员也会发送，只不过请求题是空的， 这一步是让协调者接受分配方案，然后以SyncGroup响应体的方式返回给所有成员")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-5420970d7b970c89fe6c6c4b6d0cbce8.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-9dd67f2e7b0d3aa8a3eae74f2cadfdee.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"broker-端重平衡场景剖析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#broker-端重平衡场景剖析"}},[a._v("#")]),a._v(" Broker 端重平衡场景剖析")]),a._v(" "),s("h4",{attrs:{id:"场景一-新成员入组。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景一-新成员入组。"}},[a._v("#")]),a._v(" 场景一：新成员入组。")]),a._v(" "),s("p",[a._v("讨论的是，组稳定了之后有新成员加入的情形。")]),a._v(" "),s("p",[a._v("协调者收到新的 JoinGroup 请求后，它会通过心跳请求响应的方式通知组内现有的所有成员，强制它们开启新一轮的重平衡")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-9692516a34a97ef0ff6fbbc8e4002637.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"场景二-组成员主动离组。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景二-组成员主动离组。"}},[a._v("#")]),a._v(" 场景二：组成员主动离组。")]),a._v(" "),s("p",[a._v("就是指消费者实例所在线程或进程调用 close() 方法主动通知协调者它要退出")]),a._v(" "),s("p",[a._v("发送 LeaveGroup\n"),s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-2f961cba0436a3b304dba41f0d0f4059.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"场景三-组成员崩溃离组。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景三-组成员崩溃离组。"}},[a._v("#")]),a._v(" 场景三：组成员崩溃离组。")]),a._v(" "),s("p",[a._v("崩溃离组是指消费者实例出现严重故障，突然宕机导致的离组")]),a._v(" "),s("p",[a._v("崩溃离组是被动的，协调者通常需要等待一段时间才能感知到，这段时间一般是由消费者端参数 session.timeout.ms 控制的")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-4784b44fd6a1ab737194943a6159abd6.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"场景四-重平衡时协调者对组内成员提交位移的处理。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景四-重平衡时协调者对组内成员提交位移的处理。"}},[a._v("#")]),a._v(" 场景四：重平衡时协调者对组内成员提交位移的处理。")]),a._v(" "),s("p",[a._v("每个组内成员都会定期汇报位移给协调者。当重平衡开启时，协调者会给予成员一段缓冲时间，要求每个成员必须在这段时间内快速地上报自己的位移信息，然后再开启正常的 JoinGroup/SyncGroup 请求发送")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-3ea6e6300d56d0867ca1ee77eb9d1e20.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-12-1ba0ab2ca7620c4481a5ef42dcfc8635.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"_27-关于高水位和leader-epoch的讨论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-关于高水位和leader-epoch的讨论"}},[a._v("#")]),a._v(" 27 | 关于高水位和Leader Epoch的讨论")]),a._v(" "),s("p",[a._v("Leader Epoch 是社区在 0.11 版本中新推出的，主要是为了弥补高水位机制的一些缺陷。")]),a._v(" "),s("h3",{attrs:{id:"什么是高水位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是高水位"}},[a._v("#")]),a._v(" 什么是高水位？")]),a._v(" "),s("p",[a._v("“Streaming System”一书则是这样表述水位的：水位是一个单调增加且表征最早未完成工作（oldest work not yet completed）的时间戳。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-19f6a3e58986f6d703893b2dffe4b46a.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"高水位作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高水位作用"}},[a._v("#")]),a._v(" 高水位作用")]),a._v(" "),s("ol",[s("li",[a._v("定义消息可见性，即用来标识分区下的哪些消息是可以被消费者消费的。")]),a._v(" "),s("li",[a._v("帮助 Kafka 完成副本同步。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-8582fdaaa3eb10d0d3dd78876598de60.png",alt:"image"}})]),a._v(" "),s("p",[a._v("在分区高水位以下的消息被认为是已提交消息，反之就是未提交消息。消费者只能消费已提交消息，即图中位移小于 8 的所有消息。注意 （没涉及到kafka实物，实物影响消费者看到消息的范围，不仅仅简单以来高水位来判断，以来一个LSO(log stable offset) 来判断事物的可见性）")]),a._v(" "),s("p",[a._v("位移值等于高水位的消息也属于未提交消息。也就是说，高水位上的消息是不能被消费者消费的。")]),a._v(" "),s("p",[a._v("Log End Offset，简写是 LEO。它表示副本写入下一条消息的位移值")]),a._v(" "),s("p",[a._v("同一个副本对象，其高水位值不会大于 LEO 值。")]),a._v(" "),s("p",[a._v("kafka 所有副本都有对应的高水位和 LEO 值，而不仅仅是 Leader 副本。 kafka使用leader副本的高水位来定义所在分区的 "),s("strong",[a._v("高水位")]),a._v("   分区的高水位就是其 Leader 副本的高水位。")]),a._v(" "),s("h3",{attrs:{id:"高水位的更新机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高水位的更新机制"}},[a._v("#")]),a._v(" 高水位的更新机制")]),a._v(" "),s("p",[a._v("在 Leader 副本所在的 Broker 上，还保存了其他 Follower 副本的 LEO 值。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-c7dad78669048359df370a75f36a5e2c.png",alt:"image"}})]),a._v(" "),s("p",[a._v("Kafka 把 Broker 0 上保存的这些 Follower 副本又称为远程副本（Remote Replica）")]),a._v(" "),s("p",[a._v("kafka 副本机制在运行过程中，会更新 Broker 1 上 Follower 副本的高水位和 LEO 值，同时也会更新 Broker 0 上 Leader 副本的高水位和 LEO 以及所有远程副本的 LEO，但它不会更新远程副本的高水位值（灰色部分）")]),a._v(" "),s("p",[a._v("作用： 帮助 Leader 副本确定其高水位，也就是分区高水位。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-72e1fdf726c0c18dfce616163177c711.png",alt:"image"}})]),a._v(" "),s("p",[a._v("Broker 0.上远程副本L EO Follower副本从eader副本拉取消息时，会告诉L eader副本从哪个位\n移处开始拉取。L eader副本会使用这个位移值来更新远程副本的LEO。因为follower副本已经明确从这里拉取了，肯定副本的LEO是确定是这个值了。")]),a._v(" "),s("p",[a._v("什么叫与 Leader 副本保持同步，有两个条件")]),a._v(" "),s("ol",[s("li",[a._v("该远程 Follower 副本在 ISR 中。")]),a._v(" "),s("li",[a._v("该远程 Follower 副本 LEO 值落后于 Leader 副本 LEO 值的时间，不超过 Broker 端参数 replica.lag.time.max.ms 的值。如果使用默认值的话，就是不超过 10 秒。")])]),a._v(" "),s("h3",{attrs:{id:"hw和leo的更新机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hw和leo的更新机制"}},[a._v("#")]),a._v(" HW和LEO的更新机制")]),a._v(" "),s("h4",{attrs:{id:"leader副本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leader副本"}},[a._v("#")]),a._v(" Leader副本")]),a._v(" "),s("ol",[s("li",[a._v("写入消息到本地磁盘。")]),a._v(" "),s("li",[a._v("更新分区高水位值。")]),a._v(" "),s("li",[a._v("i. 获取 Leader 副本所在 Broker 端保存的所有远程副本 LEO 值（LEO-1，LEO-2，……，LEO-n）。\n2.ii. 获取 Leader 副本高水位值：currentHW。\n3.iii. 更新 currentHW = max{currentHW, min（LEO-1, LEO-2, ……，LEO-n）}。")])]),a._v(" "),s("p",[a._v("处理 Follower 副本拉取消息的逻辑如下：")]),a._v(" "),s("ol",[s("li",[a._v("读取磁盘（或页缓存）中的消息数据。")]),a._v(" "),s("li",[a._v("使用 Follower 副本发送请求中的位移值更新远程副本 LEO 值。")]),a._v(" "),s("li",[a._v("更新分区高水位值（具体步骤与处理生产者请求的步骤相同）。")])]),a._v(" "),s("h4",{attrs:{id:"follower-副本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#follower-副本"}},[a._v("#")]),a._v(" Follower 副本")]),a._v(" "),s("ol",[s("li",[a._v("从 Leader 拉取消息的处理逻辑如下：写入消息到本地磁盘。")]),a._v(" "),s("li",[a._v("更新 LEO 值。")]),a._v(" "),s("li",[a._v("更新高水位值。\n"),s("ol",[s("li",[a._v("i. 获取 Leader 发送的高水位值：currentHW。")]),a._v(" "),s("li",[a._v("ii. 获取步骤 2 中更新过的 LEO 值：currentLEO。")]),a._v(" "),s("li",[a._v("iii. 更新高水位为 min(currentHW, currentLEO)。")])])])]),a._v(" "),s("h3",{attrs:{id:"副本同步机制解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#副本同步机制解析"}},[a._v("#")]),a._v(" 副本同步机制解析")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-c4cf04bedcee0a9ffe7dac2bd8130847.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-de8fd48948f480d00ce1f0d9788c8cda.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-befea41afa06d46f9cf6d15970eeb10a.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("Follower 副本也成功地更新 LEO 为 1。此时，Leader 和 Follower 副本的 LEO 都是 1，但各自的高水位依然是 0，还没有被更新。它们需要在下一轮的拉取中被更新，如下图所示：")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-080cbeee61019b3c1123bb3eeca6ff26.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("在新一轮的拉取请求中，由于位移值是 0 的消息已经拉取成功，因此 Follower 副本这次请求拉取的是位移值 =1 的消息。Leader 副本接收到此请求后，更新远程副本 LEO 为 1，然后更新 Leader 高水位为 1。做完这些之后，它会将当前已更新过的高水位值 1 发送给 Follower 副本。Follower 副本接收到以后，也将自己的高水位值更新成 1")])]),a._v(" "),s("h3",{attrs:{id:"leader-epoch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leader-epoch"}},[a._v("#")]),a._v(" Leader Epoch")]),a._v(" "),s("p",[a._v("Leader Epoch，我们大致可以认为是 Leader 版本。它由两部分数据组成。")]),a._v(" "),s("ol",[s("li",[a._v("Epoch。一个单调增加的版本号。每当副本领导权发生变更时，都会增加该版本号。小版本号的 Leader 被认为是过期 Leader，不能再行使 Leader 权力。")]),a._v(" "),s("li",[a._v("起始位移（Start Offset）。Leader 副本在该 Epoch 值上写入的首条消息的位移。")])]),a._v(" "),s("h4",{attrs:{id:"单纯依赖hw-数据丢失场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单纯依赖hw-数据丢失场景"}},[a._v("#")]),a._v(" 单纯依赖HW 数据丢失场景")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-785ea11a7d69f63825870d73697253be.png",alt:"image"}})]),a._v(" "),s("p",[a._v("倘若此时副本 B 所在的 Broker 宕机，当它重启回来后，副本 B 会执行日志截断操作，将 LEO 值调整为之前的高水位值，也就是 1。这就是说，位移值为 1 的那条消息被副本 B 从磁盘中删除，此时副本 B 的底层磁盘文件中只保存有 1 条消息，即位移值为 0 的那条消息。")]),a._v(" "),s("p",[a._v("执行完截断操作后，副本 B 开始从 A 拉取消息，执行正常的消息同步。如果就在这个节骨眼上，副本 A 所在的 Broker 宕机了，那么 Kafka 就别无选择，只能让副本 B 成为新的 Leader，此时，当 A 回来后，需要执行相同的日志截断操作，即将高水位调整为与 B 相同的值，也就是 1。这样操作之后，位移值为 1 的那条消息就从这两个副本中被永远地抹掉了")]),a._v(" "),s("h4",{attrs:{id:"leader-epoch-规避"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leader-epoch-规避"}},[a._v("#")]),a._v(" Leader Epoch 规避")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-4983d7f651b643af2cdc21c5de5870e2.png",alt:"image"}})]),a._v(" "),s("p",[a._v("只不过引用 Leader Epoch 机制后，Follower 副本 B 重启回来后，需要向 A 发送一个特殊的请求去获取 Leader 的 LEO 值  B 发现该 LEO 值不比它自己的 LEO 值小，而且缓存中也没有保存任何起始位移值 > 2 的 Epoch 条目，因此 B 无需执行任何日志截断操作")]),a._v(" "),s("p",[a._v("A宕机后，B成为leader 当 A 重启回来后，执行与 B 相同的逻辑判断，发现也不用执行日志截断\n后面当生产者程序向 B 写入新消息时，副本 B 所在的 Broker 缓存中，会生成新的 Leader Epoch 条目：[Epoch=1, Offset=2]。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-d62c6c5073960a4cc21b1e07f9df994c.png",alt:"image"}})]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/huxi2b/p/7453543.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Kafka水位(high watermark)与leader epoch的讨论 - huxihx - 博客园"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/46658003",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入分析Kafka高可用性 - 知乎"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-04-13-c71d499b8919e692df97f137b96dc576.png",alt:"image"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);