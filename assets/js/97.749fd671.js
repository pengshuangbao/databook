(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{557:function(a,e,t){"use strict";t.r(e);var s=t(14),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"hbase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase"}},[a._v("#")]),a._v(" Hbase")]),a._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#hbase-架构讲解"}},[a._v("hbase 架构讲解")])]),t("li",[t("a",{attrs:{href:"#hbase-热点现象及解决办法"}},[a._v("Hbase  热点现象及解决办法")])]),t("li",[t("a",{attrs:{href:"#rowkey的设计原则"}},[a._v("RowKey的设计原则?")]),t("ul",[t("li",[t("a",{attrs:{href:"#参考"}},[a._v("参考")])]),t("li",[t("a",{attrs:{href:"#一条数据的hbase之旅"}},[a._v("一条数据的HBase之旅")])])])]),t("li",[t("a",{attrs:{href:"#hbase-blockcache的理解"}},[a._v("Hbase BlockCache的理解")])]),t("li",[t("a",{attrs:{href:"#行式存储和列式存储的优劣势"}},[a._v("行式存储和列式存储的优劣势?")])]),t("li",[t("a",{attrs:{href:"#hbase-二级索引实现"}},[a._v("Hbase 二级索引实现")])]),t("li",[t("a",{attrs:{href:"#hbase-master和regionserver的交互"}},[a._v("HBase Master和Regionserver的交互；")])]),t("li",[t("a",{attrs:{href:"#hbase的ha-zookeeper在其中的作用"}},[a._v("HBase的HA,Zookeeper在其中的作用；")])]),t("li",[t("a",{attrs:{href:"#master宕机的时候-哪些能正常工作-读写数据"}},[a._v("Master宕机的时候,哪些能正常工作,读写数据；")])]),t("li",[t("a",{attrs:{href:"#region分裂的过程"}},[a._v("region分裂的过程?")])]),t("li",[t("a",{attrs:{href:"#hbase-列簇的设计原则"}},[a._v("Hbase 列簇的设计原则")])]),t("li",[t("a",{attrs:{href:"#hbase性能解决方案"}},[a._v("hbase性能解决方案：")])]),t("li",[t("a",{attrs:{href:"#bulkload原理"}},[a._v("bulkload原理？")])])])]),t("p"),a._v(" "),t("p",[t("img",{attrs:{src:"https://static.lovedata.net/jpg/2018/6/20/7620334c24d3e79d5ec4954bd5003e87.jpg",alt:"知识图谱"}})]),a._v(" "),t("h2",{attrs:{id:"hbase-架构讲解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase-架构讲解"}},[a._v("#")]),a._v(" hbase 架构讲解")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static.lovedata.net/jpg/2018/6/20/08bd66f5cd400fe609a745de9bd16dab.jpg",alt:"image"}})]),a._v(" "),t("p",[a._v("参考\n"),t("a",{attrs:{href:"http://www.blogjava.net/DLevin/archive/2015/08/22/426877.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入HBase架构解析（一） - 上善若水 - BlogJava"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"hbase-热点现象及解决办法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase-热点现象及解决办法"}},[a._v("#")]),a._v(" Hbase  热点现象及解决办法")]),a._v(" "),t("h2",{attrs:{id:"rowkey的设计原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rowkey的设计原则"}},[a._v("#")]),a._v(" RowKey的设计原则?")]),a._v(" "),t("h3",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/cpsX0j7IVfi54CjVWpGoqg",target:"_blank",rel:"noopener noreferrer"}},[a._v("一条数据的HBase之旅，简明HBase入门教程-Write全流程"),t("OutboundLink")],1)])]),a._v(" "),t("p",[a._v("rowkey的设计原则：各个列簇数据平衡，长度原则、相邻原则，创建表的时候设置表放入regionserver缓存中，避免自动增长和时间，使用字节数组代替string，最大长度64kb，最好16字节以内，按天分表，两个字节散列，四个字节存储时分毫秒。")]),a._v(" "),t("h3",{attrs:{id:"一条数据的hbase之旅"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一条数据的hbase之旅"}},[a._v("#")]),a._v(" 一条数据的HBase之旅")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static.lovedata.net/21-06-24-6ced89348e9fe3f935d157b2155109d8.png",alt:"image"}})]),a._v(" "),t("p",[t("strong",[a._v("RowKey Format 1")]),a._v("： Mobile1 + StartTime")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static.lovedata.net/21-06-24-9f309ead4a06ecbc6055c002379a2a93.png",alt:"image"}})]),a._v(" "),t("p",[t("strong",[a._v("RowKey Format 2")]),a._v("： StartTime + Mobile1")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static.lovedata.net/21-06-24-b81236fc6bcef828f71cb20c7e34e7c8.png",alt:"image"}})]),a._v(" "),t("blockquote",[t("p",[a._v('我们将RowKey中的第一个字段称之为"'),t("strong",[a._v("先导字段")]),a._v('"。')])]),a._v(" "),t("p",[t("mark",[a._v('第一种设计，有利于查询"手机号码XXX的在某时间范围内的数据记录"，但不利于查询"某段时间范围内有哪些手机号码拨出了电话？"，而第二种设计却恰好相反。')])]),a._v(" "),t("p",[a._v("两种设计都是两个字段的直接组合，这种设计在实际应用中，会带来读写"),t("mark",[t("strong",[a._v("热点")])]),a._v("问题，难以保障数据读写请求在所有Regions之间的负载均衡。避免热点的常见方法有如下几种：")]),a._v(" "),t("p",[t("strong",[a._v("Reversing")])]),a._v(" "),t("p",[a._v("如果先导字段本身会带来热点问题，但该字段尾部的信息却具备良好的随机性，此时，可以考虑将先导字段做反转处理，将尾部几位直接提前到前面，或者直接将整个字段完全反转。")]),a._v(" "),t("p",[a._v("将"),t("strong",[a._v("先导字段")]),a._v("Mobile1翻转后，就具备非常好的随机性。")]),a._v(" "),t("p",[a._v("例如：")]),a._v(" "),t("p",[a._v("13400001111^201803010800")]),a._v(" "),t("p",[a._v("将先导字段Mobile1反转后的RowKey变为：")]),a._v(" "),t("p",[a._v("11110000431^201803010800")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static.lovedata.net/21-06-24-f1baaad1a12c4c16b45dcb8a495fcd11.png",alt:"image"}})]),a._v(" "),t("p",[a._v("RowKey应该为： "),t("strong",[a._v("66660000431^201803011300")])]),a._v(" "),t("p",[a._v('因为创建表时预设的Region与RowKey强相关，我们现在才可以给出本文样例所需要创建的表的"'),t("strong",[a._v("Region分割点")]),a._v('"信息：')]),a._v(" "),t("p",[a._v('假设，Region分割点为"1,2,3,4,5,6,7,8,9"，基于这9个分割点，可以预先创建10个Region，这10个Region的StartKey和StopKey如下所示：')]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static.lovedata.net/21-06-24-99a3b4a08e693548868500ce05dae1c9.png",alt:"image"}})]),a._v(" "),t("p",[a._v("由于Mobile1字段的最后一位是0~9之间的随机数字，因此，可以均匀打散到这10个Region中")]),a._v(" "),t("p",[t("strong",[a._v("Salting")])]),a._v(" "),t("p",[a._v("Salting的原理是在RowKey的前面添加固定长度的随机Bytes，随机Bytes能保障数据在所有Regions间的负载均衡。")]),a._v(" "),t("p",[a._v("能够分散，但是对于读取不是很友好，查询并不知道前面添加的是什么，所以包含 A B C的regions都得去查一下")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static.lovedata.net/21-06-24-1f2837243b460dbf3189a0af48211485.png",alt:"image"}})]),a._v(" "),t("p",[t("strong",[a._v("Hashing")])]),a._v(" "),t("p",[a._v("Hashing是将一个RowKey通过一个Hash函数生成一组固定长度的bytes，Hash函数能保障所生成的随机bytes具备良好的离散度，从而也能够均匀打散到各个Region中")]),a._v(" "),t("p",[a._v("Hashing既有利于"),t("strong",[a._v("随机写入")]),a._v("，又利于基于知道"),t("strong",[a._v("RowKey各字段")]),a._v("的确切信息之后的"),t("strong",[a._v("随机读取")]),a._v("操作，但如果是基于"),t("strong",[a._v("RowKey范围的Scan或者是RowKey的模糊信息")]),a._v("进行查询的话，就会带来显著的"),t("strong",[a._v("性能问题")]),a._v("，因为原来在字典顺序相邻的RowKey列表，通过Hashing打散后导致这些数据被"),t("strong",[a._v("分散")]),a._v("到了多个Region中")]),a._v(" "),t("h2",{attrs:{id:"hbase-blockcache的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase-blockcache的理解"}},[a._v("#")]),a._v(" Hbase BlockCache的理解")]),a._v(" "),t("p",[a._v("BlockCache也称为读缓存，HBase会将一次文件查找的Block块缓存到Cache中，以便后续同一请求或者邻近数据查找请求直接从内存中获取，避免昂贵的IO操作，重要性不言而喻。BlockCache有两种实现机制：LRUBlockCache和BucketCache（通常是off-heap）")]),a._v(" "),t("ol",[t("li",[a._v("BlockCache的内容")])]),a._v(" "),t("h2",{attrs:{id:"行式存储和列式存储的优劣势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#行式存储和列式存储的优劣势"}},[a._v("#")]),a._v(" 行式存储和列式存储的优劣势?")]),a._v(" "),t("h2",{attrs:{id:"hbase-二级索引实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase-二级索引实现"}},[a._v("#")]),a._v(" Hbase 二级索引实现")]),a._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://juejin.im/entry/5bae42f7f265da0aa5291913",target:"_blank",rel:"noopener noreferrer"}},[a._v("技术分享 | HBase二级索引实现方案 - 后端 - 掘金"),t("OutboundLink")],1),a._v(" "),t("ol",[t("li",[t("img",{attrs:{src:"https://static.lovedata.net/20-06-30-d0a62c86d8017f664384df7850ea85c9.png",alt:"image"}})]),a._v(" "),t("li",[t("strong",[a._v("IndexTable的创建过程如下：")]),a._v(" "),t("ol",[t("li",[a._v("获取DataTable的所有RegionInfo，得到所有DataTable Region的StartKey。")]),a._v(" "),t("li",[a._v("结合索引定义和DataTable Region的StartKey信息，调用HBaseAdmin的createTable(final HTableDescriptor desc, byte [][] splitKeys)方法创建索引表。")]),a._v(" "),t("li",[a._v("通过以上两步便建立了IndexTable Region和DataTable Region的以StartKey为依据的一一对应关系。")])])]),a._v(" "),t("li",[t("strong",[a._v("IndexTable RowKey")])]),a._v(" "),t("li",[t("img",{attrs:{src:"https://static.lovedata.net/20-06-30-a687eca5fb78d81e08f143ba69b47dc6.png",alt:"image"}})])])])]),a._v(" "),t("h2",{attrs:{id:"hbase-master和regionserver的交互"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase-master和regionserver的交互"}},[a._v("#")]),a._v(" HBase Master和Regionserver的交互；")]),a._v(" "),t("h2",{attrs:{id:"hbase的ha-zookeeper在其中的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase的ha-zookeeper在其中的作用"}},[a._v("#")]),a._v(" HBase的HA,Zookeeper在其中的作用；")]),a._v(" "),t("h2",{attrs:{id:"master宕机的时候-哪些能正常工作-读写数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#master宕机的时候-哪些能正常工作-读写数据"}},[a._v("#")]),a._v(" Master宕机的时候,哪些能正常工作,读写数据；")]),a._v(" "),t("h2",{attrs:{id:"region分裂的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#region分裂的过程"}},[a._v("#")]),a._v(" region分裂的过程?")]),a._v(" "),t("h2",{attrs:{id:"hbase-列簇的设计原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase-列簇的设计原则"}},[a._v("#")]),a._v(" Hbase 列簇的设计原则")]),a._v(" "),t("p",[a._v("列族的设计原则：尽可能少（按照列族进行存储，按照region进行读取，不必要的io操作），经常和不经常使用的两类数据放入不同列族中，列族名字尽可能短。")]),a._v(" "),t("h2",{attrs:{id:"hbase性能解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hbase性能解决方案"}},[a._v("#")]),a._v(" hbase性能解决方案：")]),a._v(" "),t("p",[a._v("1、hbase怎么给web前台提供接口来访问?\nhbase有一个web的默认端口60010，是提供客户端用来访问hbase的")]),a._v(" "),t("p",[a._v("2、hbase有没有并发问题?")]),a._v(" "),t("p",[a._v("3、Hbase中的metastore用来做什么的?\nHbase的metastore是用来保存数据的，其中保存数据的方式有有三种第一种与第二种是本地储存，第三种是远程储存这一种企业用的比较多")]),a._v(" "),t("p",[a._v("4、HBase在进行模型设计时重点在什么地方?一张表中定义多少个Column Family最合适?为什么?\n具体看表的数据，一般来说划分标准是根据数据访问频度，如一张表里有些列访问相对频繁，而另一些列访问很少，这时可以把这张表划分成两个列族，分开存储，提高访问效率")]),a._v(" "),t("p",[a._v("5、如何提高HBase客户端的读写性能?请举例说明。\n①开启bloomfilter过滤器，开启bloomfilter比没开启要快3、4倍\n②Hbase对于内存有特别的嗜好，在硬件允许的情况下配足够多的内存给它\n③通过修改hbase-env.sh中的\nexport HBASE_HEAPSIZE=3000 #这里默认为1000m\n④增大RPC数量\n通过修改hbase-site.xml中的\nhbase.regionserver.handler.count属性，可以适当的放大。默认值为10有点小")]),a._v(" "),t("p",[a._v("6、直接将时间戳作为行健，在写入单个region 时候会发生热点问题，为什么呢?\nHBase的rowkey在底层是HFile存储数据的，以键值对存放到SortedMap中。并且region中的rowkey是有序存储，若时间比较集中。就会存储到一个region中，这样一个region的数据变多，其它的region数据很好，加载数据就会很慢。直到region分裂可以解决。")]),a._v(" "),t("h2",{attrs:{id:"bulkload原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bulkload原理"}},[a._v("#")]),a._v(" bulkload原理？")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("HBase BulkLoad批量写入数据实战")]),a._v(" "),t("ol",[t("li",[t("blockquote",[t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/smartloli/p/9501887.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("HBase BulkLoad批量写入数据实战 - 哥不是小萝莉 - 博客园"),t("OutboundLink")],1)])])]),a._v(" "),t("li",[t("p",[t("img",{attrs:{src:"https://static.lovedata.net/21-06-17-ae9f2d5008d9edfbf10bec552bc9e0b7.png",alt:"image"}})])]),a._v(" "),t("li",[t("p",[a._v('hbase底层文件夹格式 " /hbase/data/default/<tbl_name>/<region_id>/<cf>/<hfile_id>"')])]),a._v(" "),t("li",[t("p",[a._v("按照hbase的底层文件存储在hdfs的原理，使用MR直接生成HFile格式的数据文件 然后通过RS将hfile移动到对应的region中去,HFileOutputFormat2.configureIncrementalLoad(job, table);")])])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);