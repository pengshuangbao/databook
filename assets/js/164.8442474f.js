(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{624:function(a,t,s){"use strict";s.r(t);var e=s(14),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"第十七章、垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第十七章、垃圾回收器"}},[a._v("#")]),a._v(" 第十七章、垃圾回收器")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#gc分类与性能指标"}},[a._v("GC分类与性能指标")]),s("ul",[s("li",[s("a",{attrs:{href:"#_13-1-1-垃圾回收器概述"}},[a._v("13.1.1. 垃圾回收器概述")])]),s("li",[s("a",{attrs:{href:"#垃圾回收器分类"}},[a._v("垃圾回收器分类")]),s("ul",[s("li",[s("a",{attrs:{href:"#按照线程数分类"}},[a._v("按照线程数分类")])]),s("li",[s("a",{attrs:{href:"#按照工作模式"}},[a._v("按照工作模式")])]),s("li",[s("a",{attrs:{href:"#按照碎片处理方式分"}},[a._v("按照碎片处理方式分")])])])]),s("li",[s("a",{attrs:{href:"#评估垃圾回收器性能指标"}},[a._v("评估垃圾回收器性能指标")])]),s("li",[s("a",{attrs:{href:"#吞吐量"}},[a._v("吞吐量")])]),s("li",[s("a",{attrs:{href:"#暂停时间-注重低延迟"}},[a._v("暂停时间(注重低延迟)")]),s("ul",[s("li",[s("a",{attrs:{href:"#吞吐量-vs-暂停时间"}},[a._v("吞吐量 vs 暂停时间")])])])])])]),s("li",[s("a",{attrs:{href:"#不同垃圾回收器概述"}},[a._v("不同垃圾回收器概述")]),s("ul",[s("li",[s("a",{attrs:{href:"#_13-2-1-垃圾回收器发展史"}},[a._v("13.2.1. 垃圾回收器发展史")])]),s("li",[s("a",{attrs:{href:"#_7款经典垃圾回收器"}},[a._v("7款经典垃圾回收器")])]),s("li",[s("a",{attrs:{href:"#七款垃圾回收器和垃圾分代之间的关系"}},[a._v("七款垃圾回收器和垃圾分代之间的关系")])]),s("li",[s("a",{attrs:{href:"#垃圾收集器的组合关系"}},[a._v("垃圾收集器的组合关系")])]),s("li",[s("a",{attrs:{href:"#为什么需要这么多垃圾收集器"}},[a._v("为什么需要这么多垃圾收集器？")])]),s("li",[s("a",{attrs:{href:"#默认垃圾回收器"}},[a._v("默认垃圾回收器")]),s("ul",[s("li",[s("a",{attrs:{href:"#jdk8默认是使用parallel-scavage-回收器-老年代也就默认配套使用parallel-old-gc"}},[a._v("JDK8默认是使用Parallel Scavage 回收器，老年代也就默认配套使用Parallel Old GC")])]),s("li",[s("a",{attrs:{href:"#jdk9默认使用g1"}},[a._v("JDK9默认使用G1")])])])])])]),s("li",[s("a",{attrs:{href:"#serial回收器-串行回收"}},[a._v("Serial回收器：串行回收")])]),s("li",[s("a",{attrs:{href:"#parnew回收器-并行回收"}},[a._v("ParNew回收器：并行回收")]),s("ul",[s("li",[s("a",{attrs:{href:"#jdk9已经deprecated"}},[a._v("JDK9已经Deprecated")])]),s("li",[s("a",{attrs:{href:"#jdk8"}},[a._v("JDK8")])])])]),s("li",[s("a",{attrs:{href:"#parallel回收器-吞吐量优先"}},[a._v("Parallel回收器：吞吐量优先")]),s("ul",[s("li",[s("a",{attrs:{href:"#自适应调节策略是parallel和parnew的一个重要区别"}},[a._v("自适应调节策略是Parallel和ParNew的一个重要区别")])])])]),s("li",[s("a",{attrs:{href:"#cms回收器-低延迟"}},[a._v("CMS回收器：低延迟")]),s("ul",[s("li",[s("a",{attrs:{href:"#工作原理"}},[a._v("工作原理")])]),s("li",[s("a",{attrs:{href:"#优缺点"}},[a._v("优缺点")])]),s("li",[s("a",{attrs:{href:"#_13-6-1-cms的优点"}},[a._v("13.6.1. CMS的优点")])]),s("li",[s("a",{attrs:{href:"#_13-6-2-cms的弊端"}},[a._v("13.6.2. CMS的弊端")])]),s("li",[s("a",{attrs:{href:"#_13-6-3-设置的参数"}},[a._v("13.6.3. 设置的参数")])]),s("li",[s("a",{attrs:{href:"#小结"}},[a._v("小结")])]),s("li",[s("a",{attrs:{href:"#参数配置"}},[a._v("参数配置")])]),s("li",[s("a",{attrs:{href:"#小结"}},[a._v("小结")])]),s("li",[s("a",{attrs:{href:"#cms后续的变化"}},[a._v("CMS后续的变化")])]),s("li",[s("a",{attrs:{href:"#jdk后续版本中cms的变化"}},[a._v("JDK后续版本中CMS的变化")])])])]),s("li",[s("a",{attrs:{href:"#g1回收器-区域化分代式"}},[a._v("G1回收器：区域化分代式")]),s("ul",[s("li",[s("a",{attrs:{href:"#g1出现的原因"}},[a._v("G1出现的原因")])]),s("li",[s("a",{attrs:{href:"#为什么叫g1"}},[a._v("为什么叫G1")])]),s("li",[s("a",{attrs:{href:"#g1区域分代化"}},[a._v("G1区域分代化")])]),s("li",[s("a",{attrs:{href:"#g1特点和优势"}},[a._v("G1特点和优势")]),s("ul",[s("li",[s("a",{attrs:{href:"#并行与并发"}},[a._v("并行与并发")])]),s("li",[s("a",{attrs:{href:"#分代收集"}},[a._v("分代收集")])]),s("li",[s("a",{attrs:{href:"#空间整合"}},[a._v("空间整合")])]),s("li",[s("a",{attrs:{href:"#可预测的停顿时间模型-即-软实时soft-real-time"}},[a._v("可预测的停顿时间模型（即：软实时soft real-time）")])])])]),s("li",[s("a",{attrs:{href:"#g1缺点"}},[a._v("G1缺点")])]),s("li",[s("a",{attrs:{href:"#g1参数设置"}},[a._v("G1参数设置")])]),s("li",[s("a",{attrs:{href:"#g1常见操作步骤"}},[a._v("G1常见操作步骤")])]),s("li",[s("a",{attrs:{href:"#g1适用场景"}},[a._v("G1适用场景")])]),s("li",[s("a",{attrs:{href:"#g1-region分代-化整为0"}},[a._v("G1 Region分代-化整为0")])]),s("li",[s("a",{attrs:{href:"#g1主要回收过程"}},[a._v("G1主要回收过程")])]),s("li",[s("a",{attrs:{href:"#remmenbered-set-rset-记忆集"}},[a._v("Remmenbered Set（Rset）记忆集")])]),s("li",[s("a",{attrs:{href:"#_13-7-9-g1回收过程一-年轻代gc"}},[a._v("13.7.9. G1回收过程一：年轻代GC")])]),s("li",[s("a",{attrs:{href:"#_13-7-10-g1回收过程二-并发标记过程"}},[a._v("13.7.10. G1回收过程二：并发标记过程")])]),s("li",[s("a",{attrs:{href:"#_13-7-11-g1回收过程三-混合回收"}},[a._v("13.7.11. G1回收过程三：混合回收")])]),s("li",[s("a",{attrs:{href:"#_13-7-12-g1回收可选的过程四-full-gc"}},[a._v("13.7.12. G1回收可选的过程四：Full GC")]),s("ul",[s("li",[s("a",{attrs:{href:"#补充"}},[a._v("补充")])])])]),s("li",[s("a",{attrs:{href:"#优化建议"}},[a._v("优化建议")])])])]),s("li",[s("a",{attrs:{href:"#垃圾回收器总结"}},[a._v("垃圾回收器总结")]),s("ul",[s("li",[s("a",{attrs:{href:"#_13-8-1-7种经典垃圾回收器总结"}},[a._v("13.8.1. 7种经典垃圾回收器总结")])]),s("li",[s("a",{attrs:{href:"#发展阶段"}},[a._v("发展阶段")])]),s("li",[s("a",{attrs:{href:"#如何选择"}},[a._v("如何选择")])]),s("li",[s("a",{attrs:{href:"#面试"}},[a._v("面试")])])])]),s("li",[s("a",{attrs:{href:"#gc日志分析"}},[a._v("GC日志分析")]),s("ul",[s("li",[s("a",{attrs:{href:"#prin-tgc"}},[a._v("Prin tGC")])]),s("li",[s("a",{attrs:{href:"#pringgcdetails"}},[a._v("PringGCDetails")])]),s("li",[s("a",{attrs:{href:"#printtimestamps-printdatestamps"}},[a._v("PrintTimeStamps,PrintDateStamps")])]),s("li",[s("a",{attrs:{href:"#gc日志补充说明"}},[a._v("GC日志补充说明")]),s("ul",[s("li",[s("a",{attrs:{href:"#新生代"}},[a._v("新生代")])]),s("li",[s("a",{attrs:{href:"#老年代"}},[a._v("老年代")])])])]),s("li",[s("a",{attrs:{href:"#gc-log-测试"}},[a._v("GC log 测试")]),s("ul",[s("li",[s("a",{attrs:{href:"#jdk7"}},[a._v("JDK7")])]),s("li",[s("a",{attrs:{href:"#jdk8"}},[a._v("jdk8")])])])]),s("li",[s("a",{attrs:{href:"#gc日志分析工具"}},[a._v("GC日志分析工具")])]),s("li",[s("a",{attrs:{href:"#xloggc"}},[a._v("Xloggc")])])])]),s("li",[s("a",{attrs:{href:"#垃圾回收器的新发展"}},[a._v("垃圾回收器的新发展")]),s("ul",[s("li",[s("a",{attrs:{href:"#jdk11新特性"}},[a._v("jdk11新特性")])]),s("li",[s("a",{attrs:{href:"#zgc"}},[a._v("zgc")])]),s("li",[s("a",{attrs:{href:"#_13-x-2-open-jdk12的shenandoash-gc"}},[a._v("13.X.2. Open JDK12的Shenandoash GC")])]),s("li",[s("a",{attrs:{href:"#_13-x-3-令人震惊、革命性的zgc"}},[a._v("13.X.3. 令人震惊、革命性的ZGC")])]),s("li",[s("a",{attrs:{href:"#_13-x-4-其他垃圾回收器-aligc"}},[a._v("13.X.4. 其他垃圾回收器：AliGC")])])])]),s("li",[s("a",{attrs:{href:"#最后寄语"}},[a._v("最后寄语")])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"gc分类与性能指标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc分类与性能指标"}},[a._v("#")]),a._v(" GC分类与性能指标")]),a._v(" "),s("h3",{attrs:{id:"_13-1-1-垃圾回收器概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-1-垃圾回收器概述"}},[a._v("#")]),a._v(" 13.1.1. 垃圾回收器概述")]),a._v(" "),s("p",[a._v("垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。")]),a._v(" "),s("p",[a._v("由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。")]),a._v(" "),s("p",[a._v("从不同角度分析垃圾收集器，可以将GC分为不同的类型。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-3ba42ec896747fcb7e7fd9e3d4b17ae0.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-dc0374d5867e9efdb51102d91010dbf6.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"垃圾回收器分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器分类"}},[a._v("#")]),a._v(" 垃圾回收器分类")]),a._v(" "),s("h4",{attrs:{id:"按照线程数分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照线程数分类"}},[a._v("#")]),a._v(" 按照线程数分类")]),a._v(" "),s("p",[a._v("按"),s("mark",[a._v("线程数")]),a._v("分，可以分为"),s("mark",[a._v("串行垃圾回收器")]),a._v("和"),s("mark",[a._v("并行垃圾回收器")]),a._v("。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-e7581ce2bc0e263db793f5bffdbb29d6.png",alt:"image"}})]),a._v(" "),s("p",[a._v("串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。")]),a._v(" "),s("ul",[s("li",[a._v("在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，"),s("mark",[a._v("串行回收默认被应用在客户端的Client模式下的JVM中")])]),a._v(" "),s("li",[a._v("在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器。")])]),a._v(" "),s("p",[a._v("和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“Stop-the-World”机制。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-abee3db08b05ca7755a09f0b3063d26a.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"按照工作模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照工作模式"}},[a._v("#")]),a._v(" 按照工作模式")]),a._v(" "),s("p",[a._v("按照"),s("mark",[a._v("工作模式")]),a._v("分，可以分为"),s("mark",[a._v("并发式垃圾回收器")]),a._v("和"),s("mark",[a._v("独占式垃圾回收器")]),a._v("。")]),a._v(" "),s("ul",[s("li",[a._v("并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。")]),a._v(" "),s("li",[a._v("独占式垃圾回收器（Stop the world）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-ff3f35845b7b2f54aa4c4c06115c7462.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"按照碎片处理方式分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照碎片处理方式分"}},[a._v("#")]),a._v(" 按照碎片处理方式分")]),a._v(" "),s("p",[a._v("按"),s("mark",[a._v("碎片处理方式")]),a._v("分，可分为"),s("mark",[a._v("压缩式垃圾回收器")]),a._v("和"),s("mark",[a._v("非压缩式垃圾回收器")]),a._v("。")]),a._v(" "),s("ul",[s("li",[a._v("压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。")]),a._v(" "),s("li",[a._v("非压缩式的垃圾回收器不进行这步操作。")])]),a._v(" "),s("p",[a._v("按"),s("mark",[a._v("工作的内存区间")]),a._v("分，又可分为"),s("mark",[a._v("年轻代垃圾回收器")]),a._v("和"),s("mark",[a._v("老年代垃圾回收器")]),a._v("。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-0eebc3223549270904867673f2af4291.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"评估垃圾回收器性能指标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#评估垃圾回收器性能指标"}},[a._v("#")]),a._v(" 评估垃圾回收器性能指标")]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("吞吐量")]),a._v("：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）")]),a._v(" "),s("li",[s("mark",[a._v("垃圾收集开销")]),a._v("：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。")]),a._v(" "),s("li",[s("mark",[a._v("暂停时间")]),a._v("：执行垃圾收集时，程序的工作线程被暂停的时间。")]),a._v(" "),s("li",[s("mark",[a._v("收集频率")]),a._v("：相对于应用程序的执行，收集操作发生的频率。")]),a._v(" "),s("li",[s("mark",[a._v("内存占用")]),a._v("：Java堆区所占的内存大小。")]),a._v(" "),s("li",[s("mark",[a._v("快速")]),a._v("：一个对象从诞生到被回收所经历的时间。")])]),a._v(" "),s("p",[a._v("吞吐量、暂停时间、内存占用 这三者共同构成一个“不可能三角”。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。")]),a._v(" "),s("p",[a._v("这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。")]),a._v(" "),s("p",[a._v("简单来说，主要抓住两点：吞吐量、暂停时间")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-854cdd2b9ef485452d20671788d7251e.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-1c6c469b9bfcd5dafee058ca9689c23e.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"吞吐量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量"}},[a._v("#")]),a._v(" 吞吐量")]),a._v(" "),s("blockquote",[s("p",[a._v("注重吞吐量，用户代码运行的事件越长越好，不在意一次gc的暂停时间，注重在单位时间内，stw的时间最短")])]),a._v(" "),s("p",[a._v("吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间+垃圾收集时间）。比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。")]),a._v(" "),s("p",[a._v("这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的")]),a._v(" "),s("p",[a._v("吞吐量优先，意味着在单位时间内，STW的时间最短：0.2 + 0.2 = 0.4")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-81dd85b48fa05885d91599967708ac29.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-28bbdc8444f026df8db956dc6521e21e.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"暂停时间-注重低延迟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂停时间-注重低延迟"}},[a._v("#")]),a._v(" 暂停时间(注重低延迟)")]),a._v(" "),s("p",[a._v("“暂停时间”是指一个时间段内应用程序线程暂停，让GC线程执行的状态。")]),a._v(" "),s("p",[a._v("例如，GC期间100毫秒的暂停时间意味着在这100毫秒期间内没有应用程序线程是活动的。")]),a._v(" "),s("p",[a._v("暂停时间优先，意味着尽可能让单次STW的时间最短：0.1 + 0.1 + 0.1 + 0.1 + 0.1 = 0.5")]),a._v(" "),s("blockquote",[s("p",[a._v("每次暂停时间短，但是回收次数比较多,尽可能让每次stw的时间最短")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-35df5a9dbc2424f141c52a8b8190b5fd.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"吞吐量-vs-暂停时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量-vs-暂停时间"}},[a._v("#")]),a._v(" 吞吐量 vs 暂停时间")]),a._v(" "),s("p",[a._v("高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。")]),a._v(" "),s("p",[a._v("低暂停时间（低延迟）较好因为从最终用户的角度来看不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，"),s("mark",[a._v("有时候甚至短暂的200毫秒暂停都可能打断终端用户体验")]),a._v("。因此，具有低的较大暂停时间是非常重要的，特别是对于一个"),s("mark",[a._v("交互式应用程序")]),a._v("。")]),a._v(" "),s("p",[a._v("不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）。")]),a._v(" "),s("ul",[s("li",[a._v("因为如果选择以吞吐量优先，那么"),s("mark",[a._v("必然需要降低内存回收的执行频率")]),a._v("，但是这样会导致GC需要更长的暂停时间来执行内存回收。")]),a._v(" "),s("li",[a._v("相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也"),s("mark",[a._v("只能频繁地执行内存回收")]),a._v("，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。")])]),a._v(" "),s("p",[a._v("在设计（或使用）GC算法时，我们必须确定我们的目标：一个GC算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。")]),a._v(" "),s("p",[a._v("现在标准："),s("mark",[a._v("在最大吞吐量优先的情况下，降低停顿时间")])]),a._v(" "),s("blockquote",[s("p",[a._v("吞吐量和暂停时间是一对矛盾体")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-30-e6bb0e9cc380297c3524c0acf7169243.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-70e0ea74b4e8ef445d7329331fa82cfa.png",alt:"image"}})]),a._v(" "),s("p",[a._v("G1的标准：在最大吞吐量优先的情况下，降低吞吐量，在可控的时间范围之内，比如10ms，极可能的提交吞吐量。")]),a._v(" "),s("h2",{attrs:{id:"不同垃圾回收器概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同垃圾回收器概述"}},[a._v("#")]),a._v(" 不同垃圾回收器概述")]),a._v(" "),s("p",[a._v("垃圾收集机制是Java的招牌能力，极大地提高了开发效率。这当然也是面试的热点。")]),a._v(" "),s("h3",{attrs:{id:"_13-2-1-垃圾回收器发展史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-2-1-垃圾回收器发展史"}},[a._v("#")]),a._v(" 13.2.1. 垃圾回收器发展史")]),a._v(" "),s("p",[a._v("有了虚拟机，就一定需要收集垃圾的机制，这就是Garbage Collection，对应的产品我们称为Garbage Collector。")]),a._v(" "),s("ul",[s("li",[a._v("1999年随JDK1.3.1一起来的是串行方式的serialGc，它是第一款GC。ParNew垃圾收集器是Serial收集器的多线程版本")]),a._v(" "),s("li",[a._v("2002年2月26日，Parallel GC和Concurrent Mark Sweep GC跟随JDK1.4.2一起发布·")]),a._v(" "),s("li",[a._v("Parallel GC在JDK6之后成为HotSpot默认GC。")]),a._v(" "),s("li",[a._v("2012年，在JDK1.7u4版本中，G1可用。")]),a._v(" "),s("li",[a._v("2017年，JDK9中G1变成默认的垃圾收集器，以替代CMS。")]),a._v(" "),s("li",[a._v("2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。")]),a._v(" "),s("li",[a._v('2018年9月，JDK11发布。引入Epsilon 垃圾回收器，又被称为 "No-Op(无操作)“ 回收器。同时，引入ZGC：可伸缩的低延迟垃圾回收器（Experimental）')]),a._v(" "),s("li",[a._v("2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC：低停顿时间的GC（Experimental）。·")]),a._v(" "),s("li",[a._v("2019年9月，JDK13发布。增强ZGC，自动返回未用堆内存给操作系统。")]),a._v(" "),s("li",[a._v("2020年3月，JDK14发布。删除CMS垃圾回收器。扩展ZGC在macos和Windows上的应用")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-6a6fe35edd31c6cd98495e740ad29f9b.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-c9f7e43bfc8484a3a471b95787ba3c67.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"_7款经典垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7款经典垃圾回收器"}},[a._v("#")]),a._v(" 7款经典垃圾回收器")]),a._v(" "),s("ul",[s("li",[a._v("串行回收器：Serial、Serial Old")]),a._v(" "),s("li",[a._v("并行回收器：ParNew、Parallel Scavenge、Parallel old")]),a._v(" "),s("li",[a._v("并发回收器：CMS、G1")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-0f8e8b8c1c4199d1b348d43af8c610f1.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-729594fa70e38192d92b617ad8c22c06.png",alt:"image"}})]),a._v(" "),s("p",[a._v("官方手册："),s("a",{attrs:{href:"https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"七款垃圾回收器和垃圾分代之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七款垃圾回收器和垃圾分代之间的关系"}},[a._v("#")]),a._v(" 七款垃圾回收器和垃圾分代之间的关系")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-99f4af02f00ee5b956f7cdfc2f2fad3c.png",alt:"image"}})]),a._v(" "),s("ul",[s("li",[s("p",[a._v("新生代收集器：Serial、ParNew、Parallel Scavenge；")])]),a._v(" "),s("li",[s("p",[a._v("老年代收集器：Serial Old、Parallel Old、CMS；")])]),a._v(" "),s("li",[s("p",[a._v("整堆收集器：G1；")])])]),a._v(" "),s("h3",{attrs:{id:"垃圾收集器的组合关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器的组合关系"}},[a._v("#")]),a._v(" 垃圾收集器的组合关系")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-0ce3e89aed0fc3d9f1f0a3a8b09a0922.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("后备方案，cms是并发的，需要提前回收，垃圾回收的同时，用户线程还在执行，用户还在制造垃圾 。如果回收的比较晚了，活着垃圾制造的速度比垃圾回收还要快，会出现失败情况，失败了，则使用Serial old作为后备方案，触发Full GC， 停止用户线程。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-76010eb30f388c4b69473290c1b074bd.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("这两个组合，在jdk8中标记为deprecated，在jdk9中，直接删除了")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-4b1e5637739f758994e1313ee55399fb.png",alt:"image"}})]),a._v(" "),s("ol",[s("li",[a._v("两个收集器间有连线，表明它们可以搭配使用：Serial/Serial Old、Serial/CMS、ParNew/Serial Old、ParNew/CMS、Parallel Scavenge/Serial Old、Parallel Scavenge/Parallel Old、G1；")]),a._v(" "),s("li",[a._v('其中Serial Old作为CMS出现"'),s("code",[a._v("Concurrent Mode Failure")]),a._v('"失败的后备预案。')]),a._v(" "),s("li",[a._v("（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial Old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214），即：移除。")]),a._v(" "),s("li",[a._v("（绿色虚线）JDK14中：弃用Parallel Scavenge和Serialold GC组合（JEP366）")]),a._v(" "),s("li",[a._v("（绿色虚框）JDK14中：删除CMS垃圾回收器（JEP363）")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-89133872f1c6b356a0215b5fde1baa77.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("疑问：为什么CMS不能和Parallel Scavenge GC 组合使用？")]),a._v(" "),s("p",[a._v("答：因为底层使用的垃圾回收框架不同，导致无法兼容，却能和ParNew GC 组合使用，性能上ParNew和Parallel Scavenge G差不太多")])]),a._v(" "),s("h3",{attrs:{id:"为什么需要这么多垃圾收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要这么多垃圾收集器"}},[a._v("#")]),a._v(" 为什么需要这么多垃圾收集器？")]),a._v(" "),s("p",[a._v("为什么要有很多收集器，一个不够吗？因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。")]),a._v(" "),s("p",[a._v("虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以"),s("mark",[a._v("我们选择的只是对具体应用最合适的收集器")]),a._v("。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-12-31-3689ebe8594a9bbeb130523c01eb4267.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"默认垃圾回收器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认垃圾回收器"}},[a._v("#")]),a._v(" 默认垃圾回收器")]),a._v(" "),s("p",[s("code",[a._v("-XX:+PrintCommandLineFlags")]),a._v("：查看命令行相关参数（包含使用的垃圾收集器）")]),a._v(" "),s("p",[a._v("使用命令行指令："),s("code",[a._v("jinfo -flag 相关垃圾回收器参数 进程ID")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-883060c0b4db25dace771b1823299af8.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"jdk8默认是使用parallel-scavage-回收器-老年代也就默认配套使用parallel-old-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk8默认是使用parallel-scavage-回收器-老年代也就默认配套使用parallel-old-gc"}},[a._v("#")]),a._v(" JDK8默认是使用Parallel Scavage 回收器，老年代也就默认配套使用Parallel Old GC")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-33a8d643caf826f97a1aa9e8bc55bb42.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-e9386120bbd7eb1a536bb0e88dd9e1d4.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"jdk9默认使用g1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk9默认使用g1"}},[a._v("#")]),a._v(" JDK9默认使用G1")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-dfa50b0d6940f63273c903d1d745db9e.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-a962c03992d44723434a6192855c5919.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"serial回收器-串行回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#serial回收器-串行回收"}},[a._v("#")]),a._v(" Serial回收器：串行回收")]),a._v(" "),s("p",[a._v("Serial收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3之前回收新生代唯一的选择。")]),a._v(" "),s("p",[a._v("Serial收集器作为HotSpot中client模式下的默认新生代垃圾收集器。")]),a._v(" "),s("p",[s("mark",[a._v('Serial收集器采用复制算法、串行回收和"stop-the-World"机制的方式执行内存回收。')])]),a._v(" "),s("p",[a._v("除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial Old收集器。"),s("mark",[a._v('Serial Old收集器同样也采用了串行回收和"Stop the World"机制，只不过内存回收算法使用的是标记-压缩算法。')])]),a._v(" "),s("ul",[s("li",[a._v("Serial old是运行在Client模式下默认的老年代的垃圾回收器")]),a._v(" "),s("li",[a._v("Serial 0ld在Server模式下主要有两个用途：① 与新生代的Parallel scavenge配合使用 ② 作为老年代CMS收集器的后备垃圾收集方案")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-13de8f7b3791a23b5a487ea7440e0304.png",alt:"image"}})]),a._v(" "),s("p",[a._v("这个收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅说明它只会"),s("mark",[a._v("使用一个CPU或一条收集线程去完成垃圾收集工作")]),a._v("，更重要的是在它进行垃圾收集时，"),s("mark",[a._v("必须暂停其他所有的工作线程")]),a._v("，直到它收集结束（Stop The World）")]),a._v(" "),s("p",[a._v("优势："),s("mark",[a._v("简单而高效")]),a._v("（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。运行在Client模式下的虚拟机是个不错的选择。")]),a._v(" "),s("p",[a._v("在用户的桌面应用场景中，可用内存一般不大（几十MB至一两百MB），可以在较短时间内完成垃圾收集（几十ms至一百多ms），只要不频繁发生，使用串行回收器是可以接受的。")]),a._v(" "),s("p",[a._v("在HotSpot虚拟机中，使用"),s("code",[a._v("-XX:+UseSerialGC")]),a._v("参数可以指定年轻代和老年代都使用串行收集器。等价于新生代用Serial GC，且老年代用Serial Old GC")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-ec4be9159b6ac5c134bb6f0000399987.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-f327a8dd69decacbd47a7e388731f788.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-53e314182cc82eab45f3a7f9385d92ce.png",alt:"image"}})]),a._v(" "),s("p",[s("strong",[a._v("总结")])]),a._v(" "),s("p",[a._v("这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核cpu才可以用。现在都不是单核的了。")]),a._v(" "),s("p",[a._v("对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java web应用程序中是不会采用串行垃圾收集器的。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-cd624647a4f5dce9fbcae2e88163c239.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"parnew回收器-并行回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parnew回收器-并行回收"}},[a._v("#")]),a._v(" ParNew回收器：并行回收")]),a._v(" "),s("p",[a._v("如果说Serial GC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是Serial收集器的多线程版本。Par是Parallel的缩写，New：只能处理的是新生代")]),a._v(" "),s("p",[a._v("ParNew 收集器除了采用"),s("mark",[a._v("并行回收")]),a._v("的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是采用"),s("mark",[a._v('复制算法、"Stop-the-World"机制')]),a._v("。")]),a._v(" "),s("p",[a._v("ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-8deb78908ae54d82968cbfc523bc0571.png",alt:"image"}})]),a._v(" "),s("ul",[s("li",[a._v("对于新生代，回收次数频繁，使用并行方式高效。")]),a._v(" "),s("li",[a._v("对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）")])]),a._v(" "),s("p",[a._v("由于ParNew收集器是基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比serial收集器更高效？")]),a._v(" "),s("ul",[s("li",[a._v("ParNew 收集器运行在多CPU的环境下，由于可以充分利用多CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。")]),a._v(" "),s("li",[a._v("但是"),s("mark",[a._v("在单个CPU的环境下，ParNew收集器不比Serial 收集器更高效")]),a._v("。虽然Serial收集器是基于串行回收，但是由于CPU不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销。")])]),a._v(" "),s("p",[a._v("因为除Serial外，目前只有ParNew GC能与CMS收集器配合工作")]),a._v(" "),s("p",[a._v('在程序中，开发人员可以通过选项"'),s("code",[a._v("-XX:+UseParNewGC")]),a._v('"手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。')]),a._v(" "),s("p",[s("code",[a._v("-XX:ParallelGCThreads")]),a._v("限制线程数量，默认开启和CPU数据相同的线程数。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-e0eac9cd7764a18d12becc795b4ccb05.png",alt:"image"}})]),a._v(" "),s("p",[a._v("![image-20210103100712756](/Users/apple/Library/Application Support/typora-user-images/image-20210103100712756.png)")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-c1d34fd77cba5de8ebb59575563f8146.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"jdk9已经deprecated"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk9已经deprecated"}},[a._v("#")]),a._v(" JDK9已经Deprecated")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-7ac04afad16fadc0957620bb0bd626a2.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"jdk8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk8"}},[a._v("#")]),a._v(" JDK8")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-ce3d30992584d17254bd27be15ed708d.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-60415cb57107f5e335f663714d9a31ee.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-d58446d675891e5e9972b4d6e81778fb.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-7a83b38b3f8e7ab5500bf20cb9bb0d9b.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"parallel回收器-吞吐量优先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parallel回收器-吞吐量优先"}},[a._v("#")]),a._v(" Parallel回收器：吞吐量优先")]),a._v(" "),s("h4",{attrs:{id:"自适应调节策略是parallel和parnew的一个重要区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自适应调节策略是parallel和parnew的一个重要区别"}},[a._v("#")]),a._v(" 自适应调节策略是Parallel和ParNew的一个重要区别")]),a._v(" "),s("p",[a._v("HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallel Scavenge收集器同样也采用了"),s("mark",[a._v('复制算法、并行回收和"Stop the World"机制')]),a._v("。")]),a._v(" "),s("p",[a._v("那么Parallel 收集器的出现是否多此一举？")]),a._v(" "),s("ul",[s("li",[a._v("和ParNew收集器不同，ParallelScavenge收集器的目标则是达到一个"),s("mark",[a._v("可控制的吞吐量")]),a._v("（Throughput），它也被称为吞吐量优先的垃圾收集器。")]),a._v(" "),s("li",[a._v("自适应调节策略也是Parallel Scavenge与ParNew一个重要区别。")])]),a._v(" "),s("p",[a._v("高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要"),s("mark",[a._v("适合在后台运算而不需要太多交互的任务")]),a._v("。因此，常见在服务器环境中使用。"),s("mark",[a._v("例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序")]),a._v("。")]),a._v(" "),s("p",[a._v("Parallel 收集器在JDK1.6时提供了用于执行老年代垃圾收集的Parallel Old收集器，用来代替老年代的Serial Old收集器。")]),a._v(" "),s("p",[a._v("Parallel Old收集器采用了"),s("mark",[a._v("标记-压缩算法")]),a._v("，但同样也是基于"),s("mark",[a._v('并行回收和"Stop-the-World"机制')]),a._v("。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-80ab22efde21111d9974c0fb461ed2a6.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-5c90ade92b27555240d8574dbe7d6433.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-e1224755ac54539d037c0c68cd42ee4e.png",alt:"image"}})]),a._v(" "),s("p",[a._v("在程序吞吐量优先的应用场景中，Parallel 收集器和Parallel Old收集器的组合，在Server模式下的内存回收性能很不错。在Java8中，默认是此垃圾收集器。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-7eb779a6a587b3355d8a3758d1ca5953.png",alt:"image"}})]),a._v(" "),s("p",[s("strong",[a._v("参数配置")])]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("-XX:+UseParallelGC")]),a._v(" 手动指定年轻代使用Parallel并行收集器执行内存回收任务。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:+UseParallelOldGC")]),a._v(" 手动指定老年代都是使用并行回收收集器。")]),a._v(" "),s("ul",[s("li",[a._v("分别适用于新生代和老年代。默认jdk8是开启的。")]),a._v(" "),s("li",[a._v("上面两个参数，默认开启一个，另一个也会被开启。（互相激活）")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:ParallelGCThreads")]),a._v(" 设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。")]),a._v(" "),s("p",[a._v("$$ ParallelGCThreads =  \\begin{cases}  CPU_Count & \\text (CPU_Count <= 8) \\  3 + (5 * CPU＿Count / 8) & \\text (CPU_Count > 8)  \\end{cases} $$")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:MaxGCPauseMillis")]),a._v(" 设置垃圾收集器最大停顿时间（即STw的时间）。单位是毫秒。")]),a._v(" "),s("ul",[s("li",[a._v("为了尽可能地把停顿时间控制在MaxGCPauseMills以内，收集器在工作时会调整Java堆大小或者其他一些参数。")]),a._v(" "),s("li",[a._v("对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。")]),a._v(" "),s("li",[s("mark",[a._v("该参数使用需谨慎")]),a._v("。")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:GCTimeRatio")]),a._v(" 垃圾收集时间占总时间的比例（=1/（N+1））。用于衡量吞吐量的大小。")]),a._v(" "),s("ul",[s("li",[a._v("取值范围（0, 100）。默认值99，也就是垃圾回收时间不超过1%。")]),a._v(" "),s("li",[a._v("与前一个"),s("code",[a._v("-XX:MaxGCPauseMillis")]),a._v("参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:+UseAdaptivesizePolicy")]),a._v(" 设置Parallel Scavenge收集器具有"),s("mark",[a._v("自适应调节策略")])]),a._v(" "),s("ul",[s("li",[a._v("在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。")]),a._v(" "),s("li",[a._v("在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（"),s("code",[a._v("GCTimeRatio")]),a._v("）和停顿时间（"),s("code",[a._v("MaxGCPauseMills")]),a._v("），让虚拟机自己完成调优工作。")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-5589d5c7e117ed1bb02b04a5ecf48985.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-dcc2175b84bd40771d3e8c43c6215f43.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-602e9b8282d0a3546ac4b7f753116f54.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-e957ae5690d0dba7562236147fd5f3d8.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"cms回收器-低延迟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms回收器-低延迟"}},[a._v("#")]),a._v(" CMS回收器：低延迟")]),a._v(" "),s("p",[a._v("在JDK1.5时期，Hotspot推出了一款在"),s("mark",[a._v("强交互应用")]),a._v("中几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，"),s("mark",[a._v("这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作")]),a._v("。")]),a._v(" "),s("p",[a._v("CMS收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。")]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短")]),a._v("，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。")])]),a._v(" "),s("p",[a._v("CMS的垃圾收集算法采用"),s("mark",[a._v("标记-清除算法")]),a._v('，并且也会"Stop-the-World"')]),a._v(" "),s("p",[a._v("不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。")]),a._v(" "),s("p",[a._v("在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-0988e0f0b9003df376cb43d45c270cd7.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-14f1c0b37372177c133e45b598811696.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[a._v("#")]),a._v(" 工作原理")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-d5e01b034df295c54e71ca5d7269a8aa.png",alt:"image"}})]),a._v(" "),s("p",[a._v("CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("初始标记")]),a._v("（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，这个阶段的主要任务"),s("mark",[a._v("仅仅只是标记出GCRoots能直接关联到的对象")]),a._v("。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的"),s("mark",[a._v("速度非常快")]),a._v("。")]),a._v(" "),s("li",[s("strong",[a._v("并发标记")]),a._v("（Concurrent-Mark）阶段：从GC Roots的"),s("mark",[a._v("直接关联对象开始遍历整个对象图的过程")]),a._v("，这个过程耗时较长但是"),s("mark",[a._v("不需要停顿用户线程")]),a._v("，可以与垃圾收集线程一起并发运行。")]),a._v(" "),s("li",[s("strong",[a._v("重新标记")]),a._v("（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了"),s("mark",[a._v("修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录")]),a._v("，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。")]),a._v(" "),s("li",[s("strong",[a._v("并发清除")]),a._v("（Concurrent-Sweep）阶段：此阶段"),s("mark",[a._v("清理删除掉标记阶段判断的已经死亡的对象，释放内存空间")]),a._v("。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的")])]),a._v(" "),s("p",[a._v("尽管CMS收集器采用的是并发回收（非独占式），但是"),s("mark",[a._v("在其初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制")]),a._v("暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“stop-the-World”，只是尽可能地缩短暂停时间。")]),a._v(" "),s("p",[s("mark",[a._v("由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。")])]),a._v(" "),s("p",[a._v("另外，由于在垃圾收集阶段用户线程没有中断，"),s("mark",[a._v("所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用")]),a._v("。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是"),s("mark",[a._v("当堆内存使用率达到某一阈值时，便开始进行回收")]),a._v("，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“"),s("code",[a._v("Concurrent Mode Failure")]),a._v("” 失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。")]),a._v(" "),s("p",[a._v("CMS收集器的垃圾收集算法采用的是标记清除算法，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会"),s("mark",[a._v("产生一些内存碎片")]),a._v("。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-26a53860266340a653a7c875470df65f.png",alt:"image"}})]),a._v(" "),s("p",[a._v("![image-20210103104139722](/Users/apple/Library/Application Support/typora-user-images/image-20210103104139722.png)")]),a._v(" "),s("h3",{attrs:{id:"优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[a._v("#")]),a._v(" 优缺点")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-387f523784a2d04f306ec08769871acb.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-099e8f0dc8ac195baa75769e59b172f1.png",alt:"image"}})]),a._v(" "),s("p",[s("strong",[a._v("有人会觉得既然Mark Sweep会造成内存碎片，那么为什么不把算法换成Mark Compact？")])]),a._v(" "),s("p",[a._v("答案其实很简单，因为当并发清除的时候，用Compact整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact更适合“Stop the World” 这种场景下使用")]),a._v(" "),s("h3",{attrs:{id:"_13-6-1-cms的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-6-1-cms的优点"}},[a._v("#")]),a._v(" 13.6.1. CMS的优点")]),a._v(" "),s("ul",[s("li",[a._v("并发收集")]),a._v(" "),s("li",[a._v("低延迟")])]),a._v(" "),s("h3",{attrs:{id:"_13-6-2-cms的弊端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-6-2-cms的弊端"}},[a._v("#")]),a._v(" 13.6.2. CMS的弊端")]),a._v(" "),s("ul",[s("li",[s("mark",[a._v("会产生内存碎片")]),a._v("，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发FullGC。")]),a._v(" "),s("li",[s("mark",[a._v("CMS收集器对CPU资源非常敏感")]),a._v("。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。")]),a._v(" "),s("li",[s("mark",[a._v("CMS收集器无法处理浮动垃圾")]),a._v("。可能出现“"),s("code",[a._v("Concurrent Mode Failure")]),a._v('"失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么'),s("mark",[a._v("在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收")]),a._v("，从而只能在下一次执行GC时释放这些之前未被回收的内存空间。")])]),a._v(" "),s("h3",{attrs:{id:"_13-6-3-设置的参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-6-3-设置的参数"}},[a._v("#")]),a._v(" 13.6.3. 设置的参数")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("-XX:+UseConcMarkSweepGC")]),a._v("手动指定使用CMS收集器执行内存回收任务。")]),a._v(" "),s("p",[a._v("开启该参数后会自动将"),s("code",[a._v("-xx:+UseParNewGC")]),a._v("打开。即：ParNew（Young区用）+CMS（Old区用）+ Serial Old的组合。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:CMSInitiatingOccupanyFraction")]),a._v(" 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。")]),a._v(" "),s("ul",[s("li",[a._v("JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次CMS回收。"),s("mark",[a._v("JDK6及以上版本默认值为92%")])]),a._v(" "),s("li",[a._v("如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Ful1Gc的执行次数。")])])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:+UseCMSCompactAtFullCollection")]),a._v(" 用于指定在执行完Full GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:CMSFullGCsBeforeCompaction")]),a._v(" 设置在执行多少次Full GC后对内存空间进行压缩整理。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:ParallelcMSThreads")]),a._v(" 设置CMS的线程数量。")]),a._v(" "),s("ul",[s("li",[a._v("CMS默认启动的线程数是（ParallelGCThreads+3）/4，ParallelGCThreads是年轻代并行收集器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。")])])])]),a._v(" "),s("h3",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),s("p",[a._v("HotSpot有这么多的垃圾回收器，那么如果有人问，Serial GC、Parallel GC、Concurrent Mark Sweep GC这三个Gc有什么不同呢？")]),a._v(" "),s("p",[a._v("请记住以下口令：")]),a._v(" "),s("ul",[s("li",[a._v("如果你想要最小化地使用内存和并行开销，请选Serial GC；")]),a._v(" "),s("li",[a._v("如果你想要最大化应用程序的吞吐量，请选Parallel GC；")]),a._v(" "),s("li",[a._v("如果你想要最小化GC的中断或停顿时间，请选CMS GC。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-e6ebad618a9d6ac84a2b8bf98c2180a8.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-38f29f86bc4949da224a97cb3fe7addf.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"参数配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数配置"}},[a._v("#")]),a._v(" 参数配置")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-2f1df6bf4d1d48045b1c67ff7529f03e.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-96e76a9c4cdaafd289f092fe7aa166cb.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"小结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-f686eb4e44404d3c8f910836fb3c0cec.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"cms后续的变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms后续的变化"}},[a._v("#")]),a._v(" CMS后续的变化")]),a._v(" "),s("h3",{attrs:{id:"jdk后续版本中cms的变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk后续版本中cms的变化"}},[a._v("#")]),a._v(" JDK后续版本中CMS的变化")]),a._v(" "),s("p",[a._v("JDK9新特性：CMS被标记为Deprecate了（JEP291）")]),a._v(" "),s("ul",[s("li",[a._v("如果对JDK9及以上版本的HotSpot虚拟机使用参数"),s("code",[a._v("-XX: +UseConcMarkSweepGC")]),a._v("来开启CMS收集器的话，用户会收到一个警告信息，提示CMS未来将会被废弃。")])]),a._v(" "),s("p",[a._v("JDK14新特性：删除CMS垃圾回收器（JEP363）")]),a._v(" "),s("ul",[s("li",[a._v("移除了CMS垃圾收集器，如果在JDK14中使用 "),s("code",[a._v("-XX:+UseConcMarkSweepGC")]),a._v("的话，JVM不会报错，只是给出一个warning信息，但是不会exit。JVM会自动回退以默认GC方式启动JVM")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-1184850925fee4b8679baca99709a132.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"g1回收器-区域化分代式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器-区域化分代式"}},[a._v("#")]),a._v(" G1回收器：区域化分代式")]),a._v(" "),s("h3",{attrs:{id:"g1出现的原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1出现的原因"}},[a._v("#")]),a._v(" G1出现的原因")]),a._v(" "),s("p",[s("strong",[a._v("既然我们已经有了前面几个强大的GC，为什么还要发布Garbage First（G1）？")])]),a._v(" "),s("p",[a._v("原因就在于应用程序所应对的"),s("mark",[a._v("业务越来越庞大、复杂，用户越来越多")]),a._v("，没有GC就不能保证应用程序正常进行，而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。G1（Garbage-First）垃圾回收器是在Java7 update4之后引入的一个新的垃圾回收器，是当今收集器技术发展的最前沿成果之一。")]),a._v(" "),s("p",[a._v("与此同时，为了适应现在"),s("mark",[a._v("不断扩大的内存和不断增加的处理器数量")]),a._v("，进一步降低暂停时间（pause time），同时兼顾良好的吞吐量。")]),a._v(" "),s("p",[s("mark",[a._v("官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-f51410592a87ad733b8b91c7634b36c1.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"为什么叫g1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么叫g1"}},[a._v("#")]),a._v(" 为什么叫G1")]),a._v(" "),s("p",[a._v("因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的Region来表示Eden、幸存者0区，幸存者1区，老年代等。")]),a._v(" "),s("p",[a._v("G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，"),s("mark",[a._v("每次根据允许的收集时间，优先回收价值最大的Region")]),a._v("。")]),a._v(" "),s("p",[a._v("由于这种方式的侧重点在于回收垃圾最大量的区间（Region），所以我们给G1一个名字：垃圾优先（Garbage First）。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-37e9375e1ebe233587d37236fcf7dc35.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"g1区域分代化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1区域分代化"}},[a._v("#")]),a._v(" G1区域分代化")]),a._v(" "),s("p",[a._v("G1（Garbage-First）是一款面向服务端应用的垃圾收集器，"),s("mark",[a._v("主要针对配备多核CPU及大容量内存的机器")]),a._v("，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。")]),a._v(" "),s("p",[a._v("在JDK1.7版本正式启用，移除了Experimenta1的标识，是"),s("mark",[a._v("JDK9以后的默认垃圾回收器")]),a._v("，取代了CMS回收器以及Parallel+Parallel Old组合。被Oracle官方称为“"),s("mark",[a._v("全功能的垃圾收集器")]),a._v("”。")]),a._v(" "),s("p",[a._v("与此同时，CMS已经在JDK9中被标记为废弃（deprecated）。在jdk8中还不是默认的垃圾回收器，需要使用"),s("code",[a._v("-XX:+UseG1GC")]),a._v("来启用。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-17779940c8769b96a9dccbd4f0db68c3.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"g1特点和优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1特点和优势"}},[a._v("#")]),a._v(" G1特点和优势")]),a._v(" "),s("p",[a._v("与其他GC收集器相比，G1使用了全新的分区算法，其特点如下所示：")]),a._v(" "),s("h4",{attrs:{id:"并行与并发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行与并发"}},[a._v("#")]),a._v(" 并行与并发")]),a._v(" "),s("ul",[s("li",[a._v("并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW")]),a._v(" "),s("li",[a._v("并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况")])]),a._v(" "),s("h4",{attrs:{id:"分代收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分代收集"}},[a._v("#")]),a._v(" 分代收集")]),a._v(" "),s("ul",[s("li",[a._v("从分代上看，"),s("mark",[a._v("G1依然属于分代型垃圾回收器")]),a._v("，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。")]),a._v(" "),s("li",[a._v("将"),s("mark",[a._v("堆空间分为若干个区域（Region），这些区域中包含了逻辑上的年轻代和老年代")]),a._v("。")]),a._v(" "),s("li",[a._v("和之前的各类回收器不同，它同时"),s("mark",[a._v("兼顾年轻代和老年代")]),a._v("。对比其他回收器，或者工作在年轻代，或者工作在老年代；")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-e0ccfe6c3bbd80b2e44591e4f06762ed.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-751861363df6d977d77c512dbc0a3da9.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"空间整合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空间整合"}},[a._v("#")]),a._v(" 空间整合")]),a._v(" "),s("ul",[s("li",[a._v("CMS：“标记-清除”算法、内存碎片、若干次Gc后进行一次碎片整理")]),a._v(" "),s("li",[a._v("G1将内存划分为一个个的region。内存的回收是以region作为基本单位的。"),s("mark",[a._v("Region之间是复制算法")]),a._v("，但整体上实际可看作是"),s("mark",[a._v("标记-压缩（Mark-Compact）算法")]),a._v("，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候，G1的优势更加明显。")])]),a._v(" "),s("h4",{attrs:{id:"可预测的停顿时间模型-即-软实时soft-real-time"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可预测的停顿时间模型-即-软实时soft-real-time"}},[a._v("#")]),a._v(" 可预测的停顿时间模型（即：软实时soft real-time）")]),a._v(" "),s("p",[a._v("这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。")]),a._v(" "),s("ul",[s("li",[a._v("由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。")]),a._v(" "),s("li",[a._v("G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，"),s("mark",[a._v("每次根据允许的收集时间，优先回收价值最大的Region")]),a._v("。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。")]),a._v(" "),s("li",[a._v("相比于CMSGC，G1未必能做到CMS在最好情况下的延时停顿，但是最差情况要好很多。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-869c98c0ca49cd9bdb7e1cb3eef5f336.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-b848390551d77bb3a59c5e06b7309398.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"g1缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1缺点"}},[a._v("#")]),a._v(" G1缺点")]),a._v(" "),s("p",[a._v("相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（Overload）都要比CMS要高。")]),a._v(" "),s("p",[a._v("从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-87e075113234a504f14d917f35768c9a.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"g1参数设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1参数设置"}},[a._v("#")]),a._v(" G1参数设置")]),a._v(" "),s("ul",[s("li",[s("p",[s("code",[a._v("-XX:+UseG1GC")]),a._v("：手动指定使用G1垃圾收集器执行内存回收任务")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:G1HeapRegionSize")]),a._v(" 设置每个Region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:MaxGCPauseMillis")]),a._v(" 设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms（人的平均反应速度）")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:+ParallelGCThread")]),a._v(" 设置STW工作线程数的值。最多设置为8（上面说过Parallel回收器的线程计算公式，当CPU_Count > 8时，ParallelGCThreads 也会大于8）")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:ConcGCThreads")]),a._v(" 设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1/4左右。")])]),a._v(" "),s("li",[s("p",[s("code",[a._v("-XX:InitiatingHeapOccupancyPercent")]),a._v(" 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。")])]),a._v(" "),s("li",[s("p",[a._v("-XX:InitiatingHeapOccupancyPercent="),s("em",[a._v("percent")])]),a._v(" "),s("p",[a._v("Sets the percentage of the heap occupancy (0 to 100) at which to start a concurrent GC cycle. It is used by garbage collectors that trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations (for example, the G1 garbage collector).")]),a._v(" "),s("p",[a._v("By default, the initiating value is set to 45%. A value of 0 implies nonstop GC cycles. The following example shows how to set the initiating heap occupancy to 75%:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("-XX:InitiatingHeapOccupancyPercent=75\n")])])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-6ebddb4ebdc4e4aa68d18ed83c1db73b.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"g1常见操作步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1常见操作步骤"}},[a._v("#")]),a._v(" G1常见操作步骤")]),a._v(" "),s("p",[a._v("G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：")]),a._v(" "),s("ul",[s("li",[a._v("第一步：开启G1垃圾收集器")]),a._v(" "),s("li",[a._v("第二步：设置堆的最大内存")]),a._v(" "),s("li",[a._v("第三步：设置最大的停顿时间")])]),a._v(" "),s("p",[a._v("G1中提供了三种垃圾回收模式：Young GC、Mixed GC和Full GC，在不同的条件下被触发。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-a4d9c0ca2d8e538c63a078f6968dae87.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"g1适用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1适用场景"}},[a._v("#")]),a._v(" G1适用场景")]),a._v(" "),s("p",[a._v("面向服务端应用，针对具有大内存、多处理器的机器。（在普通大小的堆里表现并不惊喜）")]),a._v(" "),s("p",[a._v("最主要的应用是需要低GC延迟，并具有大堆的应用程序提供解决方案；如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次GC停顿时间不会过长）。")]),a._v(" "),s("p",[a._v("用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用G1可能比CMS好：")]),a._v(" "),s("ul",[s("li",[a._v("超过50%的Java堆被活动数据占用；")]),a._v(" "),s("li",[a._v("对象分配频率或年代提升频率变化很大；")]),a._v(" "),s("li",[a._v("GC停顿时间过长（长于0.5至1秒）")])]),a._v(" "),s("p",[a._v("HotSpot垃圾收集器里，除了G1以外，其他的垃圾收集器使用内置的JVM线程执行GC的多线程操作，而G1 GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-773ded4365071c87f202dc8eaf31c8fe.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"g1-region分代-化整为0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1-region分代-化整为0"}},[a._v("#")]),a._v(" G1 Region分代-化整为0")]),a._v(" "),s("p",[a._v("使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过"),s("code",[a._v("-XX:G1HeapRegionSize")]),a._v("设定。"),s("mark",[a._v("所有的Region大小相同，且在JVM生命周期内不会被改变。")])]),a._v(" "),s("p",[a._v("虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。通过Region的动态分配方式实现逻辑上的连续。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-53dd7a8eaa0f4bb6304af5f026717c5d.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-559c235dbba15d0d0ca232ab0acad9cb.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-2e1e55eed6b4331ae8ba9aab5fc20880.png",alt:"image"}})]),a._v(" "),s("p",[a._v("一个region有可能属于Eden，Survivor或者Old/Tenured内存区域。但是一个region只可能属于一个角色。图中的E表示该region属于Eden内存区域，S表示属于survivor内存区域，O表示属于Old内存区域。图中空白的表示未使用的内存空间。")]),a._v(" "),s("p",[a._v("G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。主要用于存储大对象，如果超过1.5个region，就放到H。")]),a._v(" "),s("p",[a._v("设置H的原因：对于堆中的对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。"),s("mark",[a._v("如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。")]),a._v("为了能找到连续的H区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。")]),a._v(" "),s("p",[a._v("每个Region都是通过指针碰撞来分配空间")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-8e21ab4231d3cf6ab86a2bd647b51e20.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"g1主要回收过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1主要回收过程"}},[a._v("#")]),a._v(" G1主要回收过程")]),a._v(" "),s("p",[a._v("G1GC的垃圾回收过程主要包括如下三个环节：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("年轻代GC（Young GC）")])]),a._v(" "),s("li",[s("p",[a._v("老年代并发标记过程（Concurrent Marking）")])]),a._v(" "),s("li",[s("p",[a._v("混合回收（Mixed GC）")]),a._v(" "),s("p",[a._v("（如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。）")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-bec1c8558f8beb3571ba456bc33e97b7.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-129da2f7bfa82cf9a91905e189fffcfe.png",alt:"image"}})]),a._v(" "),s("p",[a._v("顺时针，Young gc -> Young gc + Concurrent mark->Mixed GC顺序，进行垃圾回收。")]),a._v(" "),s("p",[a._v("应用程序分配内存，"),s("mark",[a._v("当年轻代的Eden区用尽时开始年轻代回收过程")]),a._v("；G1的年轻代收集阶段是一个"),s("mark",[a._v("并行的独占式")]),a._v("收集器。在年轻代回收期，G1GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后"),s("mark",[a._v("从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及")]),a._v("。")]),a._v(" "),s("p",[a._v("当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。")]),a._v(" "),s("p",[a._v("标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，"),s("mark",[a._v("G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了")]),a._v("。同时，这个老年代Region是和年轻代一起被回收的。")]),a._v(" "),s("p",[a._v("举个例子：一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-a174ca0739ef765bfe53aec5c3958bae.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"remmenbered-set-rset-记忆集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remmenbered-set-rset-记忆集"}},[a._v("#")]),a._v(" Remmenbered Set（Rset）记忆集")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("一个对象被不同区域引用的问题")])]),a._v(" "),s("li",[s("p",[a._v("一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？")])]),a._v(" "),s("li",[s("p",[a._v("在其他的分代收集器，也存在这样的问题（而G1更突出）回收新生代也不得不同时扫描老年代？")])]),a._v(" "),s("li",[s("p",[a._v("这样的话会降低MinorGC的效率；")])])]),a._v(" "),s("p",[s("strong",[a._v("解决方法：")])]),a._v(" "),s("p",[a._v("无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：")]),a._v(" "),s("p",[s("mark",[a._v("每个Region都有一个对应的Remembered Set；")])]),a._v(" "),s("p",[a._v("每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作；")]),a._v(" "),s("p",[a._v("然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象）；")]),a._v(" "),s("p",[a._v("如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；")]),a._v(" "),s("p",[a._v("当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会有遗漏。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-0e9bb9badc6e0ab562af13fb24bc9bd5.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("一个对象，可能被不同的区域的引用所引用哦，如果需要判断一个对象是否存活，如果没有记忆集，则需要遍历所有的我区域才能判断是否存活")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-948f16aecc36d3d405e493a03c82013b.png",alt:"image"}})]),a._v(" "),s("p",[a._v("如下图，每个Region 都有一个记忆集，记录着其他Region对这个region的引用，如果想对这个Region2进行垃圾回收，则用不着对全堆进行遍历了。直接看记忆集合就行了")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-7dd9ee8ad5176ec66ce4dd793f62ae6d.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"_13-7-9-g1回收过程一-年轻代gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-7-9-g1回收过程一-年轻代gc"}},[a._v("#")]),a._v(" 13.7.9. G1回收过程一：年轻代GC")]),a._v(" "),s("p",[a._v("JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。")]),a._v(" "),s("p",[a._v("年轻代垃圾回收只会回收Eden区和Survivor区。")]),a._v(" "),s("p",[a._v("首先G1停止应用程序的执行（Stop-The-World），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-d31ddcad8e78516e2813e644c87d1761.png",alt:"image"}})]),a._v(" "),s("p",[a._v("然后开始如下回收过程：")]),a._v(" "),s("ol",[s("li",[s("mark",[a._v("第一阶段，扫描根")]),a._v("。根是指static变量指向的对象，正在执行的方法调用链条上的局部变量等。根引用连同RSet记录的外部引用作为扫描存活对象的入口。")]),a._v(" "),s("li",[s("mark",[a._v("第二阶段，更新RSet")]),a._v("。处理dirty card queue（见备注）中的card，更新RSet。此阶段完成后，"),s("mark",[a._v("RSet可以准确的反映老年代对所在的内存分段中对象的引用")]),a._v("。")]),a._v(" "),s("li",[s("mark",[a._v("第三阶段，处理RSet")]),a._v("。识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。")]),a._v(" "),s("li",[s("mark",[a._v("第四阶段，复制对象")]),a._v("。此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到Old区中空的内存分段。如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。")]),a._v(" "),s("li",[s("mark",[a._v("第五阶段，处理引用")]),a._v("。处理Soft，Weak，Phantom，Final，JNI Weak 等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。")])]),a._v(" "),s("h3",{attrs:{id:"_13-7-10-g1回收过程二-并发标记过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-7-10-g1回收过程二-并发标记过程"}},[a._v("#")]),a._v(" 13.7.10. G1回收过程二：并发标记过程")]),a._v(" "),s("ol",[s("li",[s("mark",[a._v("初始标记阶段")]),a._v("：标记从根节点直接可达的对象。这个阶段是STW的，并且会触发一次年轻代GC。")]),a._v(" "),s("li",[s("mark",[a._v("根区域扫描（Root Region Scanning）")]),a._v("：G1 GC扫描Survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在YoungGC之前完成。")]),a._v(" "),s("li",[s("mark",[a._v("并发标记（Concurrent Marking）")]),a._v("：在整个堆中进行并发标记（和应用程序并发执行），此过程可能被YoungGC中断。在并发标记阶段，"),s("mark",[a._v("若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收")]),a._v("。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。")]),a._v(" "),s("li",[s("mark",[a._v("再次标记（Remark）")]),a._v("：由于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的初始快照算法：snapshot-at-the-beginning（SATB）。")]),a._v(" "),s("li",[s("mark",[a._v("独占清理（cleanup，STW）")]),a._v("：计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫。是STW的。这个阶段并不会实际上去做垃圾的收集")]),a._v(" "),s("li",[s("mark",[a._v("并发清理阶段")]),a._v("：识别并清理完全空闲的区域。")])]),a._v(" "),s("h3",{attrs:{id:"_13-7-11-g1回收过程三-混合回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-7-11-g1回收过程三-混合回收"}},[a._v("#")]),a._v(" 13.7.11. G1回收过程三：混合回收")]),a._v(" "),s("p",[a._v("当越来越多的对象晋升到老年代o1d region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个Old GC，除了回收整个Young Region，还会回收一部分的Old Region。这里需要注意："),s("mark",[a._v("是一部分老年代，而不是全部老年代")]),a._v("。可以选择哪些Old Region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC并不是Full GC。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-a71cc2449f4b7b19aea30e1453522fe5.png",alt:"image"}})]),a._v(" "),s("p",[a._v("并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次（可以通过"),s("code",[a._v("-XX:G1MixedGCCountTarget")]),a._v("设置）被回收")]),a._v(" "),s("p",[a._v("混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程。")]),a._v(" "),s("p",[a._v("由于老年代中的内存分段默认分8次回收，G1会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，"),s("code",[a._v("-XX:G1MixedGCLiveThresholdPercent")]),a._v("，默认为65%，意思是垃圾占内存分段比例要达到65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。")]),a._v(" "),s("p",[a._v("混合回收并不一定要进行8次。有一个阈值"),s("code",[a._v("-XX:G1HeapWastePercent")]),a._v("，默认值为10%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于10%，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。")]),a._v(" "),s("h3",{attrs:{id:"_13-7-12-g1回收可选的过程四-full-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-7-12-g1回收可选的过程四-full-gc"}},[a._v("#")]),a._v(" 13.7.12. G1回收可选的过程四：Full GC")]),a._v(" "),s("p",[a._v("G1的初衷就是要避免Full GC的出现。但是如果上述方式不能正常工作，G1会停止应用程序的执行（Stop-The-World），使用单线程的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。")]),a._v(" "),s("p",[a._v("要避免Full GC的发生，一旦发生需要进行调整。什么时候会发生Full GC呢？比如"),s("mark",[a._v("堆内存太小")]),a._v("，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到Full GC，这种情况可以通过增大内存解决。")]),a._v(" "),s("p",[a._v("导致G1 Full GC的原因可能有两个：")]),a._v(" "),s("ul",[s("li",[a._v("Evacuation的时候没有足够的to-space来存放晋升的对象；")]),a._v(" "),s("li",[a._v("并发处理过程完成之前空间耗尽。")])]),a._v(" "),s("h4",{attrs:{id:"补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[a._v("#")]),a._v(" 补充")]),a._v(" "),s("p",[a._v("从Oracle官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分Region，停顿时间是用户可控制的，所以并不迫切去实现，而"),s("mark",[a._v("选择把这个特性放到了G1之后出现的低延迟垃圾收集器（即ZGC）中")]),a._v("。另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-7cac0a780f7906f614cfff3bb5e436e6.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"优化建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化建议"}},[a._v("#")]),a._v(" 优化建议")]),a._v(" "),s("p",[a._v("年轻代大小")]),a._v(" "),s("ul",[s("li",[a._v("避免使用"),s("code",[a._v("-Xmn")]),a._v("或"),s("code",[a._v("-XX:NewRatio")]),a._v("等相关选项显式设置年轻代大小")]),a._v(" "),s("li",[a._v("固定年轻代的大小会覆盖暂停时间目标")])]),a._v(" "),s("p",[a._v("暂停时间目标不要太过严苛")]),a._v(" "),s("ul",[s("li",[a._v("G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间")]),a._v(" "),s("li",[a._v("评估G1 GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量。")]),a._v(" "),s("li")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-ed3db98556afb58e8ce727f98dabcb4b.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"垃圾回收器总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器总结"}},[a._v("#")]),a._v(" 垃圾回收器总结")]),a._v(" "),s("h3",{attrs:{id:"_13-8-1-7种经典垃圾回收器总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-8-1-7种经典垃圾回收器总结"}},[a._v("#")]),a._v(" 13.8.1. 7种经典垃圾回收器总结")]),a._v(" "),s("p",[a._v("截止JDK1.8，一共有7款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[a._v("垃圾收集器")]),a._v(" "),s("th",{staticStyle:{"text-align":"left"}},[a._v("分类")]),a._v(" "),s("th",{staticStyle:{"text-align":"left"}},[a._v("作用位置")]),a._v(" "),s("th",{staticStyle:{"text-align":"left"}},[a._v("使用算法")]),a._v(" "),s("th",{staticStyle:{"text-align":"left"}},[a._v("特点")]),a._v(" "),s("th",{staticStyle:{"text-align":"left"}},[a._v("适用场景")])])]),a._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[a._v("Serial")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("串行运行")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("作用于新生代")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("复制算法")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("响应速度优先")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("适用于单CPU环境下的client模式")])]),a._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[a._v("ParNew")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("并行运行")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("作用于新生代")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("复制算法")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("响应速度优先")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("多CPU环境Server模式下与CMS配合使用")])]),a._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[a._v("Parallel")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("并行运行")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("作用于新生代")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("复制算法")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("吞吐量优先")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("适用于后台运算而不需要太多交互的场景")])]),a._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[a._v("Serial Old")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("串行运行")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("作用于老年代")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("标记-压缩算法")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("响应速度优先")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("适用于单CPU环境下的Client模式")])]),a._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[a._v("Parallel Old")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("并行运行")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("作用于老年代")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("标记-压缩算法")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("吞吐量优先")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("适用于后台运算而不需要太多交互的场景")])]),a._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[a._v("CMS")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("并发运行")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("作用于老年代")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("标记-清除算法")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("响应速度优先")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("适用于互联网或B／S业务")])]),a._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[a._v("G1")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("并发、并行运行")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("作用于新生代、老年代")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("标记-压缩算法、复制算法")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("响应速度优先")]),a._v(" "),s("td",{staticStyle:{"text-align":"left"}},[a._v("面向服务端应用")])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-276b383906f0c5211c9f70519acecd0c.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"发展阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发展阶段"}},[a._v("#")]),a._v(" 发展阶段")]),a._v(" "),s("p",[a._v("GC发展阶段：Serial => Parallel（并行）=> CMS（并发）=> G1 => ZGC")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-87eed301140db5b310e7b3aa072a8be3.png",alt:"image"}})]),a._v(" "),s("p",[a._v("不同厂商、不同版本的虚拟机实现差距比较大。HotSpot虚拟机在JDK7/8后所有收集器及组合如下图")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-f60c164197bb1f5a47ad2808590b3ac1.png",alt:"image"}})]),a._v(" "),s("ol",[s("li",[s("p",[a._v("两个收集器间有连线，表明它们可以搭配使用：Serial/Serial Old、Serial/CMS、ParNew/Serial Old、ParNew/CMS、Parallel Scavenge/Serial Old、Parallel Scavenge/Parallel Old、G1;")])]),a._v(" "),s("li",[s("p",[a._v("其中Serial Old作为CMS出现＂"),s("code",[a._v("Concurrent Mode Failure")]),a._v("＂失败的后备预案。")])]),a._v(" "),s("li",[s("p",[a._v("（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial＋CMS、ParNew＋Serial old这两个组合声明为Deprecated（JEP 173），并在JDK 9中")])])]),a._v(" "),s("p",[a._v("完全取消了这些组合的支持（JEP214），即：移除。")]),a._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[a._v("（绿色虚线）JDK 14中：弃用ParallelScavenge和SeriaOold GC组合(JEP 366)")])]),a._v(" "),s("li",[s("p",[a._v("（绿色虚框）JDK 14中：删除CMS垃圾回收器（JEP 363）")])])]),a._v(" "),s("h3",{attrs:{id:"如何选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何选择"}},[a._v("#")]),a._v(" 如何选择")]),a._v(" "),s("p",[a._v("Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。")]),a._v(" "),s("p",[a._v("怎么选择垃圾收集器？")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("优先调整堆的大小让JVM自适应完成。")])]),a._v(" "),s("li",[s("p",[a._v("如果内存小于100M，使用串行收集器")])]),a._v(" "),s("li",[s("p",[a._v("如果是单核、单机程序，并且没有停顿时间的要求，串行收集器")])]),a._v(" "),s("li",[s("p",[a._v("如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择")])]),a._v(" "),s("li",[s("p",[a._v("如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器")]),a._v(" "),s("p",[a._v("官方推荐G1，性能高。"),s("mark",[a._v("现在互联网的项目，基本都是使用G1")]),a._v("。")])])]),a._v(" "),s("p",[a._v("最后需要明确一个观点：")]),a._v(" "),s("ol",[s("li",[a._v("没有最好的收集器，更没有万能的收集")]),a._v(" "),s("li",[a._v("调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-e7350fcfec4dadb565c0d2899ac17d36.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-c684a5ddc10b6333a962d3463d160f87.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"面试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试"}},[a._v("#")]),a._v(" 面试")]),a._v(" "),s("p",[a._v("对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。 这里较通用、基础性的部分如下：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("垃圾收集的算法有哪些？如何判断一个对象是否可以回收？")])]),a._v(" "),s("li",[s("p",[a._v("垃圾收集器工作的基本流程。")])])]),a._v(" "),s("p",[a._v("另外，大家需要多关注垃圾回收器这一章的各种常用的参数")]),a._v(" "),s("p",[a._v("面试官需要循序渐进，从理论、实践各种角度深入")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-e60732e2d28012975e7f3715ba9eaae7.png",alt:"image"}})]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"gc日志分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc日志分析"}},[a._v("#")]),a._v(" GC日志分析")]),a._v(" "),s("p",[a._v("通过阅读Gc日志，我们可以了解Java虚拟机内存分配与回收策略。 内存分配与垃圾回收的参数列表")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("-XX:+PrintGC")]),a._v(" 输出GC日志。类似："),s("code",[a._v("-verbose:gc")])]),a._v(" "),s("li",[s("code",[a._v("-XX:+PrintGCDetails")]),a._v(" 输出GC的详细日志")]),a._v(" "),s("li",[s("code",[a._v("-XX:+PrintGCTimestamps")]),a._v(" 输出GC的时间戳（以基准时间的形式）")]),a._v(" "),s("li",[s("code",[a._v("-XX:+PrintGCDatestamps")]),a._v(" 输出GcC的时间戳（以日期的形式，如2013-05-04T21：53：59.234+0800）")]),a._v(" "),s("li",[s("code",[a._v("-XX:+PrintHeapAtGC")]),a._v(" 在进行GC的前后打印出堆的信息")]),a._v(" "),s("li",[s("code",[a._v("-Xloggc:../logs/gc.log")]),a._v(" 日志文件的输出路径")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-cf08ebe01fbf39220fe164bf32684331.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"prin-tgc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prin-tgc"}},[a._v("#")]),a._v(" Prin tGC")]),a._v(" "),s("p",[a._v("打开GC日志")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-verbose:gc\n")])])]),s("p",[a._v("这个只会显示总的GC堆的变化，如下：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Allocation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Failure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80832")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("19298K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("227840")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0084018")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metadata")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Threshold")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("109499")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("21465K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("228352")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0184066")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Full")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metadata")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Threshold")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21465")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("16716K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("201728")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0619261")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("参数解析")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("GC、"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Full")]),a._v(" GC：GC的类型，GC只在新生代上进行，"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Full")]),a._v(" GC包括永生代，新生代，老年代。\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Allocation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Failure")]),a._v("：GC发生的原因。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80832")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("19298")]),a._v("K：堆在GC前的大小和GC后的大小。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("228840")]),a._v("k：现在的堆大小。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0084018")]),a._v(" secs：GC持续的时间。\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-858e6a50528d128e9f4dd55495ae8813.png",alt:"image"}})]),a._v(" "),s("blockquote",[s("p",[a._v("Allocation Failure 分配失败，主要是指新生代，在分配对象到Eden区的时候，空间不足出发的GC")])]),a._v(" "),s("h3",{attrs:{id:"pringgcdetails"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pringgcdetails"}},[a._v("#")]),a._v(" PringGCDetails")]),a._v(" "),s("p",[a._v("打开GC日志")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-verbose:gc -XX:+PrintGCDetails\n")])])]),s("p",[a._v("输入信息如下")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Allocation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Failure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSYoungGen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("70640")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("10116K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("141312")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80541")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("20017K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("227328")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0172573")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Times")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.03")]),a._v(" sys"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("real"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.02")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metadata")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Threshold")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSYoungGen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("98859")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("8154K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("142336")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("108760")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("21261K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("228352")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0151573")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Times")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v(" sys"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.01")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("real"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.02")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Full")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metadata")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Threshold")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSYoungGen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8154")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("0K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("142336")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParOldGen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13107")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("16809K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("62464")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21261")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("16809K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("204800")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metaspace")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20599")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("20599K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1067008")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0639732")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Times")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.14")]),a._v(" sys"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("real"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.06")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("参数解析")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("GC，"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Full")]),a._v(" FC：同样是GC的类型\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Allocation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Failure")]),a._v("：GC原因\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSYoungGen")]),a._v("：使用了"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parallel")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scavenge")]),a._v("并行垃圾收集器的新生代GC前后大小的变化\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParOldGen")]),a._v("：使用了"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parallel")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Old")]),a._v("并行垃圾收集器的老年代GC前后大小的变化\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metaspace")]),a._v("： 元数据区GC前后大小的变化，JDK1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("中引入了元数据区以替代永久代\nxxx secs：指GC花费的时间\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Times")]),a._v("：user：指的是垃圾收集器花费的所有CPU时间，sys：花费在等待系统调用或系统事件的时间，real：GC从开始到结束的时间，包括其他进程占用时间片的实际时间。\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-9f1cce003e3b359c22a696ff6be1e03f.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"printtimestamps-printdatestamps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#printtimestamps-printdatestamps"}},[a._v("#")]),a._v(" PrintTimeStamps,PrintDateStamps")]),a._v(" "),s("p",[a._v("打开GC日志")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimestamps -XX:+PrintGCDatestamps\n")])])]),s("p",[a._v("输入信息如下")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("09")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("24")]),a._v("T22"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("24.518")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0800")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.287")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Allocation")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Failure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSYoungGen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("136162")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("5113K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("136192")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("141425")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("17632K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("222208")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0248249")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Times")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.05")]),a._v(" sys"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("real"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.03")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("09")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("24")]),a._v("T22"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25.559")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0800")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4.329")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metadata")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Threshold")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSYoungGen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("97578")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("10068K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("274944")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("110096")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("22658K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("360960")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0094071")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Times")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v(" sys"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("real"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.01")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2019")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("09")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("24")]),a._v("T22"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25.569")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0800")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4.338")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Full")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metadata")]),a._v(" GC "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Threshold")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSYoungGen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10068")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("0K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("274944")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParoldGen")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("12590")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("13564K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("56320")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("22658")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("13564K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("331264")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Metaspace")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20590")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("20590K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1067008")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0494875")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Times")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.17")]),a._v(" sys"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.02")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("real"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.05")]),a._v(" secs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("说明：带上了日期和时间")]),a._v(" "),s("p",[a._v("如果想把GC日志存到文件的话，是下面的参数：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-Xloggc:/path/to/gc.log\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-0531b9cada9fe86dd063ae5ab6f3c809.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"gc日志补充说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc日志补充说明"}},[a._v("#")]),a._v(" GC日志补充说明")]),a._v(" "),s("p",[a._v("**")]),a._v(" "),s("ul",[s("li",[s("p",[a._v('"'),s("code",[a._v("[GC")]),a._v('"和"'),s("code",[a._v("[Full GC")]),a._v('"说明了这次垃圾收集的停顿类型，如果有"Full"则说明GC发生了"Stop The World"')])]),a._v(" "),s("li",[s("p",[a._v('使用Serial收集器在新生代的名字是Default New Generation，因此显示的是"'),s("code",[a._v("[DefNew")]),a._v('"')])]),a._v(" "),s("li",[s("p",[a._v('使用ParNew收集器在新生代的名字会变成"'),s("code",[a._v("[ParNew")]),a._v('"，意思是"Parallel New Generation"')])]),a._v(" "),s("li",[s("p",[a._v("使用Parallel scavenge收集器在新生代的名字是”"),s("code",[a._v("[PSYoungGen")]),a._v('"')])]),a._v(" "),s("li",[s("p",[a._v("老年代的收集和新生代道理一样，名字也是收集器决定的")])]),a._v(" "),s("li",[s("p",[a._v('使用G1收集器的话，会显示为"garbage-first heap"')])]),a._v(" "),s("li",[s("p",[s("mark",[a._v("Allocation Failure")])]),a._v(" "),s("p",[a._v("表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。")])]),a._v(" "),s("li",[s("p",[s("mark",[a._v("[PSYoungGen：5986K->696K(8704K) ]  5986K->704K(9216K)")])]),a._v(" "),s("p",[a._v("中括号内：GC回收前年轻代大小，回收后大小，（年轻代总大小）")]),a._v(" "),s("p",[a._v("括号外：GC回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）")])]),a._v(" "),s("li",[s("p",[s("mark",[a._v("user代表用户态回收耗时，sys内核态回收耗时，rea实际耗时")]),a._v("。由于多核的原因，时间总和可能会超过real时间")])])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Heap")]),a._v("（堆）\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSYoungGen")]),a._v("（"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parallel")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scavenge")]),a._v("收集器新生代）total "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("9216")]),a._v("K，used "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6234")]),a._v("K "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x0000000100000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x0000000100000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\neden space（堆中的"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Eden")]),a._v("区默认占比是"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("）"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8192")]),a._v("K，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("768")]),a._v(" used "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ffc16b08")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ffe00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nfrom space（堆中的"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Survivor")]),a._v("，这里是"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("From")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Survivor")]),a._v("区默认占比是"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("）"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),a._v("K， "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" used "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000fff00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000fff00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x0000000100000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("to")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("space")]),a._v("（堆中的"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Survivor")]),a._v("，这里是"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("to")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Survivor")]),a._v("区默认占比是"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("，需要先了解一下堆的分配策略）"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),a._v("K"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" used "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ffe00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ffe00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000fff00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n                                                                         \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ParOldGen")]),a._v("（老年代总大小和使用大小）total "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10240")]),a._v("K， used "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("7001")]),a._v("K ［"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000fec00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nobject space（显示个使用百分比）"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10240")]),a._v("K，"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("688")]),a._v(" used "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000fec00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff2d6630")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000ff600000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PSPermGen")]),a._v("（永久代总大小和使用大小）total "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21504")]),a._v("K， used "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4949")]),a._v("K "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000f9a00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000faf00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000fec00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nobject space（显示个使用百分比，自己能算出来）"),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("21504")]),a._v("K， "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("238")]),a._v(" used "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000f9a00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000f9ed55e0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x00000000faf00000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-9242bfce4d7961d3e7634a35cb44ea7b.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-f2bccc0887fb5d6439ab7af34c6ce86b.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-f46778b97c0db4f0fa6ad0cf82c2d669.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"新生代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新生代"}},[a._v("#")]),a._v(" 新生代")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-4614cf7fdb48c83661a43575ab5c431c.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"老年代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#老年代"}},[a._v("#")]),a._v(" 老年代")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-9e9a18c86b3aaefe79cb5cbd534867a3.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"gc-log-测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc-log-测试"}},[a._v("#")]),a._v(" GC log 测试")]),a._v(" "),s("h4",{attrs:{id:"jdk7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk7"}},[a._v("#")]),a._v(" JDK7")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-d567bacb1d25aecc4900a11b57beb4b9.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-3cff6d00c12e2695840e180139e7e3a4.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-c436008d294a7de62f5617a8472e6006.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-2260fda1e926d181abdd9a3fd5398d5d.png",alt:"image"}})]),a._v(" "),s("h4",{attrs:{id:"jdk8-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk8-2"}},[a._v("#")]),a._v(" jdk8")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-c316d6e3e87ad647432efdca044b73f4.png",alt:"image"}})]),a._v(" "),s("p",[a._v("在JDK7中，如果新生代存不下，则会进行垃圾回收，把那几个2mb的对象移动到老年代，然后存入，而在jdk8中，则大对象直接进入到老年代了。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-a34bf9a2a71763bac8e60938556b5018.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"gc日志分析工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc日志分析工具"}},[a._v("#")]),a._v(" GC日志分析工具")]),a._v(" "),s("p",[a._v("可以用一些工具去分析这些GC日志")]),a._v(" "),s("p",[a._v("常用的日志分析工具有：GCViewer、GCEasy、GCHisto、GCLogViewer、Hpjmeter、garbagecat等")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-8d3023eabf985a37e96be47280ede008.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"xloggc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xloggc"}},[a._v("#")]),a._v(" Xloggc")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-947937dee10235c0887092ec8c96cfca.png",alt:"image"}})]),a._v(" "),s("h2",{attrs:{id:"垃圾回收器的新发展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器的新发展"}},[a._v("#")]),a._v(" 垃圾回收器的新发展")]),a._v(" "),s("p",[a._v("GC仍然处于飞速发展之中，目前的默认选项"),s("mark",[a._v("G1 GC在不断的进行改进")]),a._v("，很多我们原来认为的缺点，例如串行的Fu11GC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK10以后，Fu11GC已经是并行运行，在很多场景下，其表现还略优于ParallelGC的并行Ful1GC实现。")]),a._v(" "),s("p",[a._v("即使是Serial GC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本身的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，"),s("mark",[a._v("在Serverless等新的应用场景下，Serial GC找到了新的舞台")]),a._v("。")]),a._v(" "),s("p",[a._v("比较不幸的是CMSGC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK9中已经被标记为废弃，并在JDK14版本中移除")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-835344c64f89953172ce4280ae13bee5.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"jdk11新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk11新特性"}},[a._v("#")]),a._v(" jdk11新特性")]),a._v(" "),s("p",[a._v('Epsilon:A No-Op GarbageCollector（Epsilon垃圾回收器，"No-Op（无操作）"回收器）'),s("a",{attrs:{href:"http://openidk.iava.net/jeps/318",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://openidk.iava.net/jeps/318"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("ZGC:A Scalable Low-Latency Garbage Collector（Experimental）（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）[http://openidk.iava.net/jeps/333](")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-4409601bde9a215efda886ae8b77fb01.png",alt:"image"}})]),a._v(" "),s("h3",{attrs:{id:"zgc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zgc"}},[a._v("#")]),a._v(" zgc")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-3152cb556739cdfb9343b4a9198a2e7d.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-a7ec2857eabfd049dd5a29eaf03ddc06.png",alt:"image"}})]),a._v(" "),s("p",[a._v("现在G1回收器已成为默认回收器好几年了。")]),a._v(" "),s("p",[a._v("我们还看到了引入了两个新的收集器：ZGC（JDK11出现）和Shenandoah（Open JDK12）。主打特点：低停顿时间")]),a._v(" "),s("h3",{attrs:{id:"_13-x-2-open-jdk12的shenandoash-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-x-2-open-jdk12的shenandoash-gc"}},[a._v("#")]),a._v(" 13.X.2. Open JDK12的Shenandoash GC")]),a._v(" "),s("p",[s("mark",[a._v("Open JDK12的Shenandoash GC：低停顿时间的GC（实验性）")])]),a._v(" "),s("p",[s("mark",[a._v("Shenandoah，无疑是众多GC中最孤独的一个。")]),a._v("是第一款不由oracle公司团队领导开发的Hotspot垃圾收集器。不可避免的"),s("mark",[a._v("受到官方的排挤")]),a._v("。比如号称OpenJDK和OracleJDK没有区别的Oracle公司仍拒绝在OracleJDK12中支持Shenandoah。")]),a._v(" "),s("p",[a._v("Shenandoah垃圾回收器最初由RedHat进行的一项垃圾收集器研究项目Pauseless GC的实现，"),s("mark",[a._v("旨在针对JVM上的内存回收实现低停顿的需求")]),a._v(".。在2014年贡献给OpenJDK。")]),a._v(" "),s("p",[a._v("Red Hat研发Shenandoah团队对外宣称，"),s("mark",[a._v("Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着无论将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。")]),a._v("不过实际使用性能将取决于实际工作堆的大小和工作负载。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-c24574e063abe8d2402bb2376a1543c7.png",alt:"image"}})]),a._v(" "),s("p",[a._v("这是RedHat在2016年发表的论文数据，测试内容是使用Es对200GB的维基百科数据进行索引。从结果看：")]),a._v(" "),s("ul",[s("li",[a._v("停顿时间比其他几款收集器确实有了质的飞跃，但也未实现最大停顿时间控制在十毫秒以内的目标。")]),a._v(" "),s("li",[a._v("而吞吐量方面出现了明显的下降，总运行时间是所有测试收集器里最长的。")])]),a._v(" "),s("p",[a._v("总结")]),a._v(" "),s("ul",[s("li",[a._v("Shenandoah GC的弱项：高运行负担下的吞吐量下降。")]),a._v(" "),s("li",[a._v("Shenandoah GC的强项：低延迟时间。")]),a._v(" "),s("li",[a._v("Shenandoah GC的工作过程大致分为九个阶段，这里就不再赘述。在之前Java12新特性视频里有过介绍。")])]),a._v(" "),s("p",[a._v("【Java12新特性地址】")]),a._v(" "),s("p",[s("a",{attrs:{href:"http://www.atguigu.com/download_detail.shtml?v=222",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.atguigu.com/download_detail.shtml?v=222"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("或")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1jJ411M7kQ?from=search&seid=12339069673726242866",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.bilibili.com/video/BV1jJ411M7kQ?from=search&seid=12339069673726242866"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"_13-x-3-令人震惊、革命性的zgc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-x-3-令人震惊、革命性的zgc"}},[a._v("#")]),a._v(" 13.X.3. 令人震惊、革命性的ZGC")]),a._v(" "),s("p",[a._v("官方地址："),s("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/12/gctuning/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://docs.oracle.com/en/java/javase/12/gctuning/"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-b49929a25087258bd77ee2dc487b9c59.png",alt:"image"}})]),a._v(" "),s("p",[a._v("ZGC与Shenandoah目标高度相似，"),s("mark",[a._v("在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停颇时间限制在十毫秒以内的低延迟。")])]),a._v(" "),s("p",[a._v("《深入理解Java虚拟机》一书中这样定义ZGC：ZGC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现"),s("mark",[a._v("可并发的标记-压缩算法")]),a._v("的，以"),s("mark",[a._v("低延迟为首要目标")]),a._v("的一款垃圾收集器。")]),a._v(" "),s("p",[a._v("ZGC的工作过程可以分为4个阶段："),s("mark",[a._v("并发标记 - 并发预备重分配 - 并发重分配 - 并发重映射")]),a._v(" 等。")]),a._v(" "),s("p",[a._v("ZGC几乎在所有地方并发执行的，除了初始标记的是STw的。所以停顿时间几乎就耗费在初始标记上，这部分的实际时间是非常少的。")]),a._v(" "),s("p",[a._v("测试数据：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-17507561e4c870ef033b3efa355a3ddd.png",alt:"image"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-b11122612b0e76ace49b8c10e4394c81.png",alt:"image"}})]),a._v(" "),s("p",[a._v("在ZGC的强项停顿时间测试上，它毫不留情的将Parallel、G1拉开了两个数量级的差距。无论平均停顿、95％停顿、99％停顿、99.9％停顿，还是最大停顿时间，ZGC都能毫不费劲控制在10毫秒以内。")]),a._v(" "),s("p",[a._v("虽然ZGC还在试验状态，没有完成所有特性，但此时性能已经相当亮眼，用“令人震惊、革命性”来形容，不为过。 "),s("mark",[a._v("未来将在服务端、大内存、低延迟应用的首选垃圾收集器。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-13e2a2444f7017683b85bcce7036074e.png",alt:"image"}})]),a._v(" "),s("p",[s("mark",[a._v("JEP 364：ZGC应用在macos上")])]),a._v(" "),s("p",[s("mark",[a._v("JEP 365：ZGC应用在Windows上")])]),a._v(" "),s("p",[a._v("JDK14之前，ZGC仅Linux才支持。")]),a._v(" "),s("p",[a._v("尽管许多使用zGc的用户都使用类Linux的环境，但在Windows和macos上，人们也需要ZGC进行开发部署和测试。许多桌面应用也可以从ZGC中受益。因此，ZGC特性被移植到了Windows和macos上。")]),a._v(" "),s("p",[a._v("现在mac或Windows上也能使用zGC了，示例如下：")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+UnlockExperimentalVMOptions -XX:+UseZGC\n")])])]),s("h3",{attrs:{id:"_13-x-4-其他垃圾回收器-aligc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-x-4-其他垃圾回收器-aligc"}},[a._v("#")]),a._v(" 13.X.4. 其他垃圾回收器：AliGC")]),a._v(" "),s("p",[a._v("AliGC是阿里巴巴JVM团队基于G1算法，面向大堆（LargeHeap）应用场景。指定场景下的对比：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-2583e1e7b8c4f8fe6297c77fd44f1a96.png",alt:"image"}})]),a._v(" "),s("p",[a._v("当然，其它厂商也提供了各种别具一格的GC实现，例如比较有名的低延迟GC：Zing，有兴趣可以参考提供的链接 "),s("a",{attrs:{href:"https://www.infoq.com/articles/azul_gc_in_detail",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.infoq.com/articles/azul_gc_in_detail"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"最后寄语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后寄语"}},[a._v("#")]),a._v(" 最后寄语")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-01-03-9a9db9166ca2d038b509f981b9e4e47e.png",alt:"image"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);