(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{591:function(t,a,s){"use strict";s.r(a);var r=s(14),i=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[t._v("#")]),t._v(" 数据库")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#事物特性"}},[t._v("事物特性")]),s("ul",[s("li",[s("a",{attrs:{href:"#原子性-atomicity"}},[t._v("原子性（Atomicity）")])]),s("li",[s("a",{attrs:{href:"#一致性-consistency"}},[t._v("**一致性（Consistency）**")])]),s("li",[s("a",{attrs:{href:"#隔离性-isolation"}},[t._v("隔离性（Isolation）")])]),s("li",[s("a",{attrs:{href:"#持久性-durability"}},[t._v("持久性（Durability）")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"事物特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事物特性"}},[t._v("#")]),t._v(" 事物特性")]),t._v(" "),s("h3",{attrs:{id:"原子性-atomicity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性-atomicity"}},[t._v("#")]),t._v(" 原子性（Atomicity）")]),t._v(" "),s("p",[t._v("原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。")]),t._v(" "),s("h3",{attrs:{id:"一致性-consistency"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一致性-consistency"}},[t._v("#")]),t._v(" "),s("strong",[t._v("一致性（Consistency）")])]),t._v(" "),s("p",[t._v("一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。")]),t._v(" "),s("p",[t._v("拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。")]),t._v(" "),s("h3",{attrs:{id:"隔离性-isolation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#隔离性-isolation"}},[t._v("#")]),t._v(" 隔离性（Isolation）")]),t._v(" "),s("p",[t._v("隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。\n　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。\n　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。")]),t._v(" "),s("h3",{attrs:{id:"持久性-durability"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#持久性-durability"}},[t._v("#")]),t._v(" 持久性（Durability）")]),t._v(" "),s("p",[t._v("​    持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。")]),t._v(" "),s("p",[t._v("例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/fjdingsd/p/5273008.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库事务的四大特性以及事务的隔离级别 - fjdingsd - 博客园"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=i.exports}}]);