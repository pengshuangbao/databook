(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{633:function(a,t,s){"use strict";s.r(t);var e=s(14),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"jvm运行时参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm运行时参数"}},[a._v("#")]),a._v(" JVM运行时参数")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_4-1-jvm参数选项"}},[a._v("4.1. JVM参数选项")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-1-1-类型一-标准参数选项"}},[a._v("4.1.1. 类型一：标准参数选项")])]),s("li",[s("a",{attrs:{href:"#_4-1-2-类型二-x参数选项"}},[a._v("4.1.2. 类型二：-X参数选项")])]),s("li",[s("a",{attrs:{href:"#_4-1-3-类型三-xx参数选项"}},[a._v("4.1.3. 类型三：-XX参数选项")])])])]),s("li",[s("a",{attrs:{href:"#_4-2-添加jvm参数选项"}},[a._v("4.2. 添加JVM参数选项")])]),s("li",[s("a",{attrs:{href:"#_4-3-常用的jvm参数选项"}},[a._v("4.3. 常用的JVM参数选项")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-3-1-打印设置的xx选项及值"}},[a._v("4.3.1. 打印设置的XX选项及值")])]),s("li",[s("a",{attrs:{href:"#_4-3-2-堆、栈、方法区等内存大小设置"}},[a._v("4.3.2. 堆、栈、方法区等内存大小设置")])]),s("li",[s("a",{attrs:{href:"#_4-3-3-outofmemory相关的选项"}},[a._v("4.3.3. OutOfMemory相关的选项")])]),s("li",[s("a",{attrs:{href:"#_4-3-4-垃圾收集器相关选项"}},[a._v("4.3.4. 垃圾收集器相关选项")])]),s("li",[s("a",{attrs:{href:"#_4-3-5-gc日志相关选项"}},[a._v("4.3.5. GC日志相关选项")])]),s("li",[s("a",{attrs:{href:"#_4-3-6-其他参数"}},[a._v("4.3.6. 其他参数")])])])]),s("li",[s("a",{attrs:{href:"#_4-4-通过java代码获取jvm参数"}},[a._v("4.4. 通过Java代码获取JVM参数")])])])]),s("p"),a._v(" "),s("h2",{attrs:{id:"_4-1-jvm参数选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-jvm参数选项"}},[a._v("#")]),a._v(" 4.1. JVM参数选项")]),a._v(" "),s("p",[a._v("官网地址："),s("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"_4-1-1-类型一-标准参数选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-类型一-标准参数选项"}},[a._v("#")]),a._v(" 4.1.1. 类型一：标准参数选项")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" java -help\n用法: java "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" class "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n           "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("执行类"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   或  java "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" -jar jarfile "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n           "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("执行 jar 文件"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n其中选项包括:\n    -d32          使用 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("32")]),a._v(" 位数据模型 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("如果可用"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    -d64          使用 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("64")]),a._v(" 位数据模型 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("如果可用"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    -server       选择 "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"server"')]),a._v(" VM\n                  默认 VM 是 server.\n\n    -cp "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("目录和 zip/jar 文件的类搜索路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n    -classpath "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("目录和 zip/jar 文件的类搜索路径"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                  用 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" 分隔的目录, JAR 档案\n                  和 ZIP 档案列表, 用于搜索类文件。\n    -D"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("名称"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("值"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                  设置系统属性\n    -verbose:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("class"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("gc"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("jni"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n                  启用详细输出\n    -version      输出产品版本并退出\n    -version:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("值"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                  警告: 此功能已过时, 将在\n                  未来发行版中删除。\n                  需要指定的版本才能运行\n    -showversion  输出产品版本并继续\n    -jre-restrict-search "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" -no-jre-restrict-search\n                  警告: 此功能已过时, 将在\n                  未来发行版中删除。\n                  在版本搜索中包括/排除用户专用 JRE\n    -? -help      输出此帮助消息\n    -X            输出非标准选项的帮助\n    -ea"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("packagename"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("classname"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    -enableassertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("packagename"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("classname"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n                  按指定的粒度启用断言\n    -da"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("packagename"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("classname"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    -disableassertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("packagename"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("classname"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n                  禁用具有指定粒度的断言\n    -esa "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" -enablesystemassertions\n                  启用系统断言\n    -dsa "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" -disablesystemassertions\n                  禁用系统断言\n    -agentlib:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("libname"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("选项"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n                  加载本机代理库 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("libname"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(", 例如 -agentlib:hprof\n                  另请参阅 -agentlib:jdwp"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("help 和 -agentlib:hprof"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("help\n    -agentpath:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pathname"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("选项"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n                  按完整路径名加载本机代理库\n    -javaagent:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("jarpath"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("选项"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n                  加载 Java 编程语言代理, 请参阅 java.lang.instrument\n    -splash:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("imagepath"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                  使用指定的图像显示启动屏幕\n有关详细信息, 请参阅 http://www.oracle.com/technetwork/java/javase/documentation/index.html。\n")])])]),s("p",[s("strong",[a._v("Server模式和Client模式")])]),a._v(" "),s("p",[a._v("Hotspot JVM有两种模式，分别是server和client，分别通过-server和-client模式设置")]),a._v(" "),s("ul",[s("li",[a._v("32位系统上，默认使用Client类型的JVM。要想使用Server模式，机器配置至少有2个以上的CPU和2G以上的物理内存。client模式适用于对内存要求较小的桌面应用程序，默认使用Serial串行垃圾收集器")]),a._v(" "),s("li",[a._v("64位系统上，只支持server模式的JVM，适用于需要大内存的应用程序，默认使用并行垃圾收集器")])]),a._v(" "),s("p",[a._v("官网地址："),s("a",{attrs:{href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://docs.oracle.com/javase/8/docs/technotes/guides/vm/server-class.html"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("如何知道系统默认使用的是那种模式呢？")]),a._v(" "),s("p",[a._v("通过java -version命令：可以看到Server VM字样，代表当前系统使用是Server模式")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" java -version\njava version "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1.8.0_201"')]),a._v("\nJava"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("TM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" SE Runtime Environment "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("build "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.8")]),a._v(".0_201-b09"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nJava HotSpot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("TM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("64")]),a._v("-Bit Server VM "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("build "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("25.201")]),a._v("-b09, mixed mode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h3",{attrs:{id:"_4-1-2-类型二-x参数选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-类型二-x参数选项"}},[a._v("#")]),a._v(" 4.1.2. 类型二：-X参数选项")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" java -X\n    -Xmixed           混合模式执行 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("默认"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    -Xint             仅解释模式执行\n    -Xbootclasspath:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("用 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" 分隔的目录和 zip/jar 文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                      设置搜索路径以引导类和资源\n    -Xbootclasspath/a:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("用 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" 分隔的目录和 zip/jar 文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                      附加在引导类路径末尾\n    -Xbootclasspath/p:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("用 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" 分隔的目录和 zip/jar 文件"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n                      置于引导类路径之前\n    -Xdiag            显示附加诊断消息\n    -Xnoclassgc       禁用类垃圾收集\n    -Xincgc           启用增量垃圾收集\n    -Xloggc:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("    将 GC 状态记录在文件中 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("带时间戳"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    -Xbatch           禁用后台编译\n    -Xms"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("size"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("        设置初始 Java 堆大小\n    -Xmx"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("size"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("        设置最大 Java 堆大小\n    -Xss"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("size"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("        设置 Java 线程堆栈大小\n    -Xprof            输出 cpu 配置文件数据\n    -Xfuture          启用最严格的检查, 预期将来的默认值\n    -Xrs              减少 Java/VM 对操作系统信号的使用 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("请参阅文档"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    -Xcheck:jni       对 JNI 函数执行其他检查\n    -Xshare:off       不尝试使用共享类数据\n    -Xshare:auto      在可能的情况下使用共享类数据 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("默认"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    -Xshare:on        要求使用共享类数据, 否则将失败。\n    -XshowSettings    显示所有设置并继续\n    -XshowSettings:all\n                      显示所有设置并继续\n    -XshowSettings:vm 显示所有与 vm 相关的设置并继续\n    -XshowSettings:properties\n                      显示所有属性设置并继续\n    -XshowSettings:locale\n                      显示所有与区域设置相关的设置并继续\n\n-X 选项是非标准选项, 如有更改, 恕不另行通知。\n")])])]),s("p",[a._v("如何知道JVM默认使用的是混合模式呢？")]),a._v(" "),s("p",[a._v("同样地，通过java -version命令：可以看到 mixed mode 字样，代表当前系统使用的是混合模式")]),a._v(" "),s("h3",{attrs:{id:"_4-1-3-类型三-xx参数选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-类型三-xx参数选项"}},[a._v("#")]),a._v(" 4.1.3. 类型三：-XX参数选项")]),a._v(" "),s("p",[s("strong",[a._v("Boolean类型格式")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("option"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  启用option属性\n-XX:-"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("option"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  禁用option属性\n")])])]),s("p",[s("strong",[a._v("非Boolean类型格式")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("option"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("number"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  设置option数值，可以带单位如k/K/m/M/g/G\n-XX:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("option"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("string"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("  设置option字符值\n")])])]),s("h2",{attrs:{id:"_4-2-添加jvm参数选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-添加jvm参数选项"}},[a._v("#")]),a._v(" 4.2. 添加JVM参数选项")]),a._v(" "),s("p",[a._v("eclipse和idea中配置不必多说，在Run Configurations中VM Options中配置即可，大同小异")]),a._v(" "),s("p",[s("strong",[a._v("运行jar包")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("java -Xms100m -Xmx100m -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -jar demo.jar\n")])])]),s("p",[s("strong",[a._v("Tomcat运行war包")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# linux下catalina.sh添加")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_OPTS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"-Xms512M -Xmx1024M"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# windows下catalina.bat添加")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("set")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"JAVA_OPTS=-Xms512M -Xmx1024M"')]),a._v("\n")])])]),s("p",[s("strong",[a._v("程序运行中")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置Boolean类型参数")]),a._v("\njinfo -flag "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("+"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 设置非Boolean类型参数")]),a._v("\njinfo -flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("h2",{attrs:{id:"_4-3-常用的jvm参数选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-常用的jvm参数选项"}},[a._v("#")]),a._v(" 4.3. 常用的JVM参数选项")]),a._v(" "),s("h3",{attrs:{id:"_4-3-1-打印设置的xx选项及值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-打印设置的xx选项及值"}},[a._v("#")]),a._v(" 4.3.1. 打印设置的XX选项及值")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+PrintCommandLineFlags 程序运行时JVM默认设置或用户手动设置的XX选项\n-XX:+PrintFlagsInitial 打印所有XX选项的默认值\n-XX:+PrintFlagsFinal 打印所有XX选项的实际值\n-XX:+PrintVMOptions 打印JVM的参数\n")])])]),s("h3",{attrs:{id:"_4-3-2-堆、栈、方法区等内存大小设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-堆、栈、方法区等内存大小设置"}},[a._v("#")]),a._v(" 4.3.2. 堆、栈、方法区等内存大小设置")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 栈")]),a._v("\n-Xss128k "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" -XX:ThreadStackSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("128k 设置线程栈的大小为128K\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 堆")]),a._v("\n-Xms2048m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" -XX:InitialHeapSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("2048m 设置JVM初始堆内存为2048M\n-Xmx2048m "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" -XX:MaxHeapSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("2048m 设置JVM最大堆内存为2048M\n-Xmn2g "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" -XX:NewSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("2g -XX:MaxNewSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("2g 设置年轻代大小为2G\n-XX:SurvivorRatio"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" 设置Eden区与Survivor区的比值，默认为8\n-XX:NewRatio"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" 设置老年代与年轻代的比例，默认为2\n-XX:+UseAdaptiveSizePolicy 设置大小比例自适应，默认开启\n-XX:PretenureSizeThreadshold"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),a._v(" 设置让大于此阈值的对象直接分配在老年代，只对Serial、ParNew收集器有效\n-XX:MaxTenuringThreshold"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v(" 设置新生代晋升老年代的年龄限制，默认为15\n-XX:TargetSurvivorRatio 设置MinorGC结束后Survivor区占用空间的期望比例\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 方法区")]),a._v("\n-XX:MetaspaceSize / -XX:PermSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("256m 设置元空间/永久代初始值为256M\n-XX:MaxMetaspaceSize / -XX:MaxPermSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("256m 设置元空间/永久代最大值为256M\n-XX:+UseCompressedOops 使用压缩对象\n-XX:+UseCompressedClassPointers 使用压缩类指针\n-XX:CompressedClassSpaceSize 设置Klass Metaspace的大小，默认1G\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 直接内存")]),a._v("\n-XX:MaxDirectMemorySize 指定DirectMemory容量，默认等于Java堆最大值\n")])])]),s("h3",{attrs:{id:"_4-3-3-outofmemory相关的选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-outofmemory相关的选项"}},[a._v("#")]),a._v(" 4.3.3. OutOfMemory相关的选项")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+HeapDumpOnOutMemoryError 内存出现OOM时生成Heap转储文件，两者互斥\n-XX:+HeapDumpBeforeFullGC 出现FullGC时生成Heap转储文件，两者互斥\n-XX:HeapDumpPath"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定heap转储文件的存储路径，默认当前目录\n-XX:OnOutOfMemoryError"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定可行性程序或脚本的路径，当发生OOM时执行脚本\n")])])]),s("h3",{attrs:{id:"_4-3-4-垃圾收集器相关选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-垃圾收集器相关选项"}},[a._v("#")]),a._v(" 4.3.4. 垃圾收集器相关选项")]),a._v(" "),s("p",[a._v("首先需了解垃圾收集器之间的搭配使用关系")]),a._v(" "),s("ul",[s("li",[a._v("红色虚线表示在jdk8时被Deprecate，jdk9时被删除")]),a._v(" "),s("li",[a._v("绿色虚线表示在jdk14时被Deprecate")]),a._v(" "),s("li",[a._v("绿色虚框表示在jdk9时被Deprecate，jdk14时被删除")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/20210506182504.png",alt:"image-20210506182458663"}})]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Serial回收器")]),a._v("\n-XX:+UseSerialGC  年轻代使用Serial GC， 老年代使用Serial Old GC\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# ParNew回收器")]),a._v("\n-XX:+UseParNewGC  年轻代使用ParNew GC\n-XX:ParallelGCThreads  设置年轻代并行收集器的线程数。\n\t一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。\n")])])]),s("p",[a._v("$$\nParallelGCThreads =\n\\begin{cases}\nCPU_Count & \\text (CPU_Count <= 8) \\\n3 + (5 * CPU＿Count / 8) & \\text (CPU_Count > 8)\n\\end{cases}\n$$")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Parallel回收器")]),a._v("\n-XX:+UseParallelGC  年轻代使用 Parallel Scavenge GC，互相激活\n-XX:+UseParallelOldGC  老年代使用 Parallel Old GC，互相激活\n-XX:ParallelGCThreads\n-XX:MaxGCPauseMillis  设置垃圾收集器最大停顿时间（即STW的时间），单位是毫秒。\n\t为了尽可能地把停顿时间控制在MaxGCPauseMills以内，收集器在工作时会调整Java堆大小或者其他一些参数。\n\t对于用户来讲，停顿时间越短体验越好；但是服务器端注重高并发，整体的吞吐量。\n\t所以服务器端适合Parallel，进行控制。该参数使用需谨慎。\n-XX:GCTimeRatio  垃圾收集时间占总时间的比例（1 / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("N＋1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("），用于衡量吞吐量的大小\n\t取值范围（0,100），默认值99，也就是垃圾回收时间不超过1％。\n\t与前一个-XX：MaxGCPauseMillis参数有一定矛盾性。暂停时间越长，Radio参数就容易超过设定的比例。\n-XX:+UseAdaptiveSizePolicy  设置Parallel Scavenge收集器具有自适应调节策略。\n\t在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，以达到在堆大小、吞吐量和停顿时间之间的平衡点。\n\t在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMills），让虚拟机自己完成调优工作。\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# CMS回收器")]),a._v("\n-XX:+UseConcMarkSweepGC  年轻代使用CMS GC。\n\t开启该参数后会自动将-XX：＋UseParNewGC打开。即：ParNew（Young区）+ CMS（Old区）+ Serial Old的组合\n-XX:CMSInitiatingOccupanyFraction  设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。JDK5及以前版本的默认值为68，DK6及以上版本默认值为92％。\n\t如果内存增长缓慢，则可以设置一个稍大的值，大的阈值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。\n\t反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。\n\t因此通过该选项便可以有效降低Fu1l GC的执行次数。\n-XX:+UseCMSInitiatingOccupancyOnly  是否动态可调，使CMS一直按CMSInitiatingOccupancyFraction设定的值启动\n-XX:+UseCMSCompactAtFullCollection  用于指定在执行完Full GC后对内存空间进行压缩整理\n\t以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。\n-XX:CMSFullGCsBeforeCompaction  设置在执行多少次Full GC后对内存空间进行压缩整理。\n-XX:ParallelCMSThreads  设置CMS的线程数量。\n\tCMS 默认启动的线程数是"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("ParallelGCThreads＋3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("/4，ParallelGCThreads 是年轻代并行收集器的线程数。\n\t当CPU 资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕。\n-XX:ConcGCThreads  设置并发垃圾收集的线程数，默认该值是基于ParallelGCThreads计算出来的\n-XX:+CMSScavengeBeforeRemark  强制hotspot在cms remark阶段之前做一次minor gc，用于提高remark阶段的速度\n-XX:+CMSClassUnloadingEnable  如果有的话，启用回收Perm 区（JDK8之前）\n-XX:+CMSParallelInitialEnabled  用于开启CMS initial-mark阶段采用多线程的方式进行标记\n\t用于提高标记速度，在Java8开始已经默认开启\n-XX:+CMSParallelRemarkEnabled  用户开启CMS remark阶段采用多线程的方式进行重新标记，默认开启\n-XX:+ExplicitGCInvokesConcurrent\n-XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses\n\t这两个参数用户指定hotspot虚拟在执行System.gc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("时使用CMS周期\n-XX:+CMSPrecleaningEnabled  指定CMS是否需要进行Pre cleaning阶段\t\n")])])]),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# G1回收器")]),a._v("\n-XX:+UseG1GC 手动指定使用G1收集器执行内存回收任务。\n-XX:G1HeapRegionSize 设置每个Region的大小。\n\t值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。\n-XX:MaxGCPauseMillis  设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms\n-XX:ParallelGCThread  设置STW时GC线程数的值。最多设置为8\n-XX:ConcGCThreads  设置并发标记的线程数。将n设置为并行垃圾回收线程数（ParallelGCThreads）的1/4左右。\n-XX:InitiatingHeapOccupancyPercent 设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。\n-XX:G1NewSizePercent  新生代占用整个堆内存的最小百分比（默认5％）\n-XX:G1MaxNewSizePercent  新生代占用整个堆内存的最大百分比（默认60％）\n-XX:G1ReservePercent"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("  保留内存区域，防止 to space（Survivor中的to区）溢出\n")])])]),s("p",[a._v("怎么选择垃圾回收器？")]),a._v(" "),s("ul",[s("li",[a._v("优先让JVM自适应，调整堆的大小")]),a._v(" "),s("li",[a._v("串行收集器：内存小于100M；单核、单机程序，并且没有停顿时间的要求")]),a._v(" "),s("li",[a._v("并行收集器：多CPU、高吞吐量、允许停顿时间超过1秒")]),a._v(" "),s("li",[a._v("并发收集器：多CPU、追求低停顿时间、快速响应（比如延迟不能超过1秒，如互联网应用）")]),a._v(" "),s("li",[a._v("官方推荐G1，性能高。现在互联网的项目，基本都是使用G1")])]),a._v(" "),s("p",[a._v("特别说明：")]),a._v(" "),s("ul",[s("li",[a._v("没有最好的收集器，更没有万能的收集器")]),a._v(" "),s("li",[a._v("调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器")])]),a._v(" "),s("h3",{attrs:{id:"_4-3-5-gc日志相关选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-5-gc日志相关选项"}},[a._v("#")]),a._v(" 4.3.5. GC日志相关选项")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+PrintGC "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" -verbose:gc  打印简要日志信息\n-XX:+PrintGCDetails            打印详细日志信息\n-XX:+PrintGCTimeStamps  打印程序启动到GC发生的时间，搭配-XX:+PrintGCDetails使用\n-XX:+PrintGCDateStamps  打印GC发生时的时间戳，搭配-XX:+PrintGCDetails使用\n-XX:+PrintHeapAtGC  打印GC前后的堆信息，如下图\n-Xloggc:"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 输出GC导指定路径下的文件中\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/20210506195202.png",alt:"image-20210506195156935"}})]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+TraceClassLoading  监控类的加载\n-XX:+PrintGCApplicationStoppedTime  打印GC时线程的停顿时间\n-XX:+PrintGCApplicationConcurrentTime  打印垃圾收集之前应用未中断的执行时间\n-XX:+PrintReferenceGC 打印回收了多少种不同引用类型的引用\n-XX:+PrintTenuringDistribution  打印JVM在每次MinorGC后当前使用的Survivor中对象的年龄分布\n-XX:+UseGCLogFileRotation 启用GC日志文件的自动转储\n-XX:NumberOfGCLogFiles"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("  设置GC日志文件的循环数目\n-XX:GCLogFileSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("1M  设置GC日志文件的大小\n")])])]),s("h3",{attrs:{id:"_4-3-6-其他参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-6-其他参数"}},[a._v("#")]),a._v(" 4.3.6. 其他参数")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[a._v("-XX:+DisableExplicitGC  禁用hotspot执行System.gc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("，默认禁用\n-XX:ReservedCodeCacheSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("g"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("、-XX:InitialCodeCacheSize"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("g"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("m"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("  指定代码缓存的大小\n-XX:+UseCodeCacheFlushing  放弃一些被编译的代码，避免代码缓存被占满时JVM切换到interpreted-only的情况\n-XX:+DoEscapeAnalysis  开启逃逸分析\n-XX:+UseBiasedLocking  开启偏向锁\n-XX:+UseLargePages  开启使用大页面\n-XX:+PrintTLAB  打印TLAB的使用情况\n-XX:TLABSize  设置TLAB大小  \n")])])]),s("h2",{attrs:{id:"_4-4-通过java代码获取jvm参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-通过java代码获取jvm参数"}},[a._v("#")]),a._v(" 4.4. 通过Java代码获取JVM参数")]),a._v(" "),s("p",[a._v("Java提供了java.lang.management包用于监视和管理Java虚拟机和Java运行时中的其他组件，它允许本地或远程监控和管理运行的Java虚拟机。其中ManagementFactory类较为常用，另外Runtime类可获取内存、CPU核数等相关的数据。通过使用这些api，可以监控应用服务器的堆内存使用情况，设置一些阈值进行报警等处理。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('public class MemoryMonitor {\n    public static void main(String[] args) {\n        MemoryMXBean memorymbean = ManagementFactory.getMemoryMXBean();\n        MemoryUsage usage = memorymbean.getHeapMemoryUsage();\n        System.out.println("INIT HEAP: " + usage.getInit() / 1024 / 1024 + "m");\n        System.out.println("MAX HEAP: " + usage.getMax() / 1024 / 1024 + "m");\n        System.out.println("USE HEAP: " + usage.getUsed() / 1024 / 1024 + "m");\n        System.out.println("\\nFull Information:");\n        System.out.println("Heap Memory Usage: " + memorymbean.getHeapMemoryUsage());\n        System.out.println("Non-Heap Memory Usage: " + memorymbean.getNonHeapMemoryUsage());\n\n        System.out.println("=======================通过java来获取相关系统状态============================ ");\n        System.out.println("当前堆内存大小totalMemory " + (int) Runtime.getRuntime().totalMemory() / 1024 / 1024 + "m");// 当前堆内存大小\n        System.out.println("空闲堆内存大小freeMemory " + (int) Runtime.getRuntime().freeMemory() / 1024 / 1024 + "m");// 空闲堆内存大小\n        System.out.println("最大可用总堆内存maxMemory " + Runtime.getRuntime().maxMemory() / 1024 / 1024 + "m");// 最大可用总堆内存大小\n\n    }\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);