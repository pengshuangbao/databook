(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{501:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"flinkjob如何在standalone、yarn、mesos、k8s上部署运行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flinkjob如何在standalone、yarn、mesos、k8s上部署运行"}},[a._v("#")]),a._v(" FlinkJob如何在Standalone、YARN、Mesos、K8S上部署运行？")]),a._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#standalone"}},[a._v("Standalone")])]),s("li",[s("a",{attrs:{href:"#yarn"}},[a._v("YARN")])]),s("li",[s("a",{attrs:{href:"#mesos"}},[a._v("Mesos")]),s("ul",[s("li",[s("a",{attrs:{href:"#会话集群"}},[a._v("会话集群")])]),s("li",[s("a",{attrs:{href:"#作业集群"}},[a._v("作业集群")])])])]),s("li",[s("a",{attrs:{href:"#kubernetes"}},[a._v("Kubernetes")])]),s("li",[s("a",{attrs:{href:"#小结与反思"}},[a._v("小结与反思")])])])]),s("p"),a._v(" "),s("p",[a._v("前面内容已经有很多学习案列带大家正式使用了 Flink，其中不仅有讲将 Flink 应用程序在 IDEA 中运行，也有讲将 Flink Job\n编译打包上传到 Flink UI 上运行，在这 UI 背后可能是 YARN、Mesos、Kubernetes。那么这节就系统讲下如何部署和运行我们的\nFlink Job，大家可以根据自己公司的场景进行选择！")]),a._v(" "),s("p",[a._v("在讲解完 Flink 中的配置后，接下来接着讲解 Flink 的部署情况。")]),a._v(" "),s("h3",{attrs:{id:"standalone"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#standalone"}},[a._v("#")]),a._v(" Standalone")]),a._v(" "),s("p",[a._v("第一种方式就是 Standalone 模式，这种模式笔者在前面 2.2 节里面演示的就是这种，我们通过执行命令："),s("code",[a._v("./bin/start- cluster.sh")]),a._v(" 启动一个 Flink Standalone 集群。")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\nzhisheng@zhisheng  /usr/local/flink-1.9.0  ./bin/start-cluster.sh\nStarting cluster.\nStarting standalonesession daemon on host zhisheng.\nStarting taskexecutor daemon on host zhisheng.")]),a._v(" "),s("p",[a._v("默认的话是启动一个 Job Manager 和一个 Task Manager，我们可以通过 "),s("code",[a._v("jps")]),a._v(" 查看进程有：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\n65425 Jps\n51572 TaskManagerRunner\n51142 StandaloneSessionClusterEntrypoint")]),a._v(" "),s("p",[a._v("其中上面的 TaskManagerRunner 代表的是 Task Manager\n进程，StandaloneSessionClusterEntrypoint 代表的是 Job Manager 进程。上面运行产生的只有一个 Job\nManager 和一个 Task Manager，如果是生产环境的话，这样的配置肯定是不够运行多个 Job 的，那么我们该如何在生产环境中配置\nstandalone 模式的集群呢？我们就需要修改 Flink 安装目录下面的 conf 文件夹里面配置：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\nflink-conf.yaml\nmasters\nslaves")]),a._v(" "),s("p",[a._v("将 slaves 中再添加一个 "),s("code",[a._v("localhost")]),a._v("，这样就可以启动两个 Task Manager 了。接着启动脚本 "),s("code",[a._v("start- cluster.sh")]),a._v("，启动日志显示如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-10-23-161333.png",alt:"images"}}),a._v("\n可以看见有两个 Task Manager 启动了，再看下 UI 显示的：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-10-23-161431.png",alt:"images"}}),a._v("\n那么如果还想要添加一个 Job Manager 或者 Task Manager 怎么办？总不能再次重启修改配置文件后然后再重启吧！这里你可以这样操作。")]),a._v(" "),s("p",[s("strong",[a._v("增加一个 Job Manager")]),a._v(" ：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\nbin/jobmanager.sh ((start|start-foreground) [host] [webui-port])|stop|stop-all")]),a._v(" "),s("p",[a._v("但是注意 Standalone 下最多只能运行一个 Job Manager。")]),a._v(" "),s("p",[s("strong",[a._v("增加一个 Task Manager")]),a._v(" ：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\nbin/taskmanager.sh start|start-foreground|stop|stop-all")]),a._v(" "),s("p",[a._v("比如我执行了 "),s("code",[a._v("./bin/taskmanager.sh start")]),a._v(" 命令后：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-10-23-161657.png",alt:"images"}}),a._v("\nStandalone 模式下可以先对 Flink Job 通过 "),s("code",[a._v("mvn clean package")]),a._v(" 编译打包，得到 Jar 包后，可以在 UI\n上直接上传 Jar 包，然后点击 Submit 就可以运行了。")]),a._v(" "),s("h3",{attrs:{id:"yarn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yarn"}},[a._v("#")]),a._v(" YARN")]),a._v(" "),s("p",[a._v("Flink 不仅仅支持以 standalone 模式运行，还支持在 YARN 上运行，YARN 是一种新的 Hadoop\n资源管理器，它是一个通用资源管理系统，可为上层应用提供统一的资源管理和调度，它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。")]),a._v(" "),s("p",[a._v("相当于 standalone 模式，Flink on YARN 有如下好处：")]),a._v(" "),s("ul",[s("li",[a._v("资源按需使用，提高集群的资源利用率")]),a._v(" "),s("li",[a._v("基于 YARN 调度系统，能够自动处理各个角色的 failover（Job Manager 进程异常退出，Yarn ResourceManager 会重新调度 Job Manager 到其他机器；如果 Task Manager 进程异常退出，Job Manager 收到消息后并重新向 Yarn ResourceManager 申请资源，重新启动 Task Manager）")])]),a._v(" "),s("p",[a._v("下图是 Flink on YARN 的架构图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-04-27-004-flink-on-yarn.png",alt:"images"}}),a._v("\n[官网](https://ci.apache.org/projects/flink/flink-docs-\nrelease-1.9/ops/deployment/yarn_setup.html) 对 Flink On YARN 讲解很多，包含 Flink 在\nYARN 上的安装方式、 Flink YARN Session 和怎么允许单一的 Flink Job、怎么查看在 YARN\n上查看日志，已经非常全了，大家可以多多参考官网。")]),a._v(" "),s("h3",{attrs:{id:"mesos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mesos"}},[a._v("#")]),a._v(" Mesos")]),a._v(" "),s("p",[a._v("Apache Mesos 诞生于 UC Berkeley 的一个研究项目，现已成为 Apache Incubator 中的项目。Apache Mesos\n把自己定位成一个数据中心操作系统，它能管理上万台的从机。Framework 相当于这个操作系统的应用程序，每当应用程序需要执行，Framework 就会在\nMesos 中选择一台有合适资源（CPU、内存等）的从机来运行。")]),a._v(" "),s("p",[a._v("Flink 也是支持在 Mesos 上部署运行的，在[官网](https://ci.apache.org/projects/flink/flink-\ndocs-release-1.9/ops/deployment/mesos.html)也有介绍，主要是讲 Flink 运行在\nDC/OS（它是具有复杂应用程序管理层的 Mesos 分支，预装了Marathon），如果安装好了 DC/OS 的话，那么你可以使用它的 CLI 工具来安装\nFlink，比如：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\ndcos package install flink")]),a._v(" "),s("p",[a._v("在 Mesos 上运行 Flink 有两种方式：Flink 会话集群（session cluster）和作业集群（job cluster）。")]),a._v(" "),s("h4",{attrs:{id:"会话集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#会话集群"}},[a._v("#")]),a._v(" 会话集群")]),a._v(" "),s("p",[a._v("Flink 会话集群需要在运行的 Mesos 上部署执行，然后你可以在一个会话集群上运行多个 Flink\n作业，在部署会话集群之后，需要将每个作业提交给集群。在 Flink 的安装目录 bin 下，你可以找到 2 个在 Mesos 上启动 Flink 的脚本。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-10-23-161843.png",alt:"images"}})]),a._v(" "),s("ul",[s("li",[s("p",[a._v("mesos-appmaster.sh：它将启动 Mesos 应用程序主程序，会注册 Mesos 调度程序，负责启动工作节点")])]),a._v(" "),s("li",[s("p",[a._v("mesos-taskmanager.sh：Mesos 进程的入口点，你不需要手动执行该脚本，它由 Mesos 工作节点自动启动来启动新的 Task Manager。")])])]),a._v(" "),s("p",[a._v("在运行 mesos-appmaster.sh 脚本之前，你需要在 flink-conf.yaml 中定义 mesos.master 配置或者通过启动参数\n"),s("code",[a._v("-Dmesos.master=...")]),a._v(" 传给进程。当执行 mesos-appmaster.sh 后，它会在执行该脚本的机器上创建一个 Job\nManager，另外就是 Task Manager 将作为 Mesos 集群中的任务来运行。")]),a._v(" "),s("h4",{attrs:{id:"作业集群"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作业集群"}},[a._v("#")]),a._v(" 作业集群")]),a._v(" "),s("p",[a._v("Flink 作业集群是一个运行单个作业的专用集群，不需要额外的作业提交。在 Flink 的安装目录 bin 下面有 "),s("code",[a._v("mesos-appmaster- job.sh")]),a._v(" 脚本，该脚本会启动 Mesos 应用程序主程序，会注册 Mesos 调度程序，检索到 JobGraph 后相应的启动 Task\nManager。")]),a._v(" "),s("p",[a._v("在执行 mesos-appmaster-job.sh 脚本之前，你需要在 flink-conf.yaml 中定义 mesos.master 和\ninternal.jobgraph-path 或者你可以通过启动参数 "),s("code",[a._v("-Dmesos.master=... -Dinterval.jobgraph- path=...")]),a._v(" 传入进程。")]),a._v(" "),s("p",[a._v("你可以这样获取到 JobGraph：")]),a._v(" "),s("p",[a._v("​")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("JobGraph")]),a._v(" jobGraph "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getStreamGraph")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getJobGraph")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\njobGraph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setAllowQueuedScheduling")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" jobGraphFilename "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"job.graph"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),a._v(" jobGraphFile "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("jobGraphFilename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileOutputStream")]),a._v(" output "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("jobGraphFile"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectOutputStream")]),a._v(" obOutput "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObjectOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    obOutput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("writeObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("jobGraph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("通常你可以像下面这样全部通过启动参数来传入配置：")]),a._v(" "),s("p",[a._v("​")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("bin"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("mesos"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("appmaster"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("sh \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dmesos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("master"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("foobar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("org"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5050")]),a._v(" \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Djobmanager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("heap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mb"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1024")]),a._v(" \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Djobmanager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("rpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("port"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("6123")]),a._v(" \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Drest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("port"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8081")]),a._v(" \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dmesos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("resourcemanager"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("tasks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mem"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4096")]),a._v(" \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dtaskmanager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("heap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mb"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3500")]),a._v(" \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dtaskmanager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("numberOfTaskSlots"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" \\\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Dparallelism")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v("\n")])])]),s("p",[a._v("更多关于 Flink On Mesos 的安装以及配置可以访问\n[官网](https://ci.apache.org/projects/flink/flink-docs-\nrelease-1.9/ops/deployment/mesos.html) 查看。")]),a._v(" "),s("h3",{attrs:{id:"kubernetes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[a._v("#")]),a._v(" Kubernetes")]),a._v(" "),s("p",[a._v("Kubernetes（k8s）是 Google 开源的容器集群管理系统，在 Docker\n技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等一系列完整功能，提高了大规模容器集群管理的便捷性。它是一个完备的分布式系统支撑平台，具有完备的集群管理能力，多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和发现机制、內建智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、可扩展的资源自动调度机制以及多粒度的资源配额管理能力。同时\nKubernetes 提供完善的管理工具，涵盖了包括开发、部署测试、运维监控在内的各个环节。")]),a._v(" "),s("p",[a._v("因为 Kubernetes 的好处这么多，所以现在好多公司也开始使用 Kubernetes，那么 Flink 也有必要支持部署在 Kubernetes\n上，在[官方文档](https://ci.apache.org/projects/flink/flink-docs-\nrelease-1.9/ops/deployment/kubernetes.html)里面也介绍了两种部署的方法：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Flink session cluster")])]),a._v(" "),s("li",[s("p",[a._v("Flink job cluster")])])]),a._v(" "),s("p",[a._v("下面我演示一下如何部署 Flink session cluster 在 K8s 上。首先你需要创建 jobmanager-\nservice、jobmanager-deployment、taskmanager-deployment，在利用 kubectl\n命令创建之前你需要分别创建这几个 yaml 文件。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("jobmanager-service.yaml")]),a._v(" "),s("p",[a._v("apiVersion: v1\nkind: Service\nmetadata:\nname: flink-jobmanager\nspec:\nports:")]),a._v(" "),s("ul",[s("li",[a._v("name: rpc\nport: 6123")]),a._v(" "),s("li",[a._v("name: blob\nport: 6124")]),a._v(" "),s("li",[a._v("name: query\nport: 6125")]),a._v(" "),s("li",[a._v("name: ui\nport: 8081\nselector:\napp: flink\ncomponent: jobmanager")])])]),a._v(" "),s("li",[s("p",[a._v("jobmanager-deployment.yaml")]),a._v(" "),s("p",[a._v("apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\nname: flink-jobmanager\nspec:\nreplicas: 1\ntemplate:\nmetadata:\nlabels:\napp: flink\ncomponent: jobmanager\nspec:\ncontainers:\n- name: jobmanager\nimage: flink:latest\nargs:\n- jobmanager\nports:\n- containerPort: 6123\nname: rpc\n- containerPort: 6124\nname: blob\n- containerPort: 6125\nname: query\n- containerPort: 8081\nname: ui\nenv:\n- name: JOB_MANAGER_RPC_ADDRESS\nvalue: flink-jobmanager")])]),a._v(" "),s("li",[s("p",[a._v("taskmanager-deployment.yaml")]),a._v(" "),s("p",[a._v("apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\nname: flink-taskmanager\nspec:\nreplicas: 2\ntemplate:\nmetadata:\nlabels:\napp: flink\ncomponent: taskmanager\nspec:\ncontainers:\n- name: taskmanager\nimage: flink:latest\nargs:\n- taskmanager\nports:\n- containerPort: 6121\nname: data\n- containerPort: 6122\nname: rpc\n- containerPort: 6125\nname: query\nenv:\n- name: JOB_MANAGER_RPC_ADDRESS\nvalue: flink-jobmanager")])])]),a._v(" "),s("p",[a._v("创建好这三个文件后，分别执行下面三个命令：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\nkubectl create -f jobmanager-service.yaml")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("kubectl create -f jobmanager-deployment.yaml\n\nkubectl create -f taskmanager-deployment.yaml\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-05-31-070748.jpg",alt:"images"}}),a._v("\n然后去 K8s 的 Dashboard 上面查看 Flink 的情况：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-05-31-071343.jpg",alt:"images"}}),a._v("\n我们如果要看 Flink 自带的 UI 的话需要将端口映射一下，使用如下命令：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\nkubectl port-forward service/flink-jobmanager 8081:8081")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-05-31-071954.jpg",alt:"images"}}),a._v("\n然后访问 "),s("a",{attrs:{href:"http://localhost:8081",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://localhost:8081"),s("OutboundLink")],1),a._v(" 就可以看到 Flink 自带的 UI 了：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-05-31-072103.jpg",alt:"images"}}),a._v("\n如果我们要提交 Job 的话，我们先用命令行来操作一下：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\n./bin/flink run -d -m localhost:8081 ~/word-count.jar")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-10-23-162109.png",alt:"images"}}),a._v("\n执行完命令后的话，就可以去页面看到刚才提交的 Job 了：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-10-23-162157.png",alt:"images"}}),a._v("\n另外你也可以通过 Flink UI 上传 Jar 包把 Job run 起来。这里再对上面这几个配置文件进行讲解：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-05-31-073347.jpg",alt:"images"}}),a._v(" "),s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-05-31-073411.jpg",alt:"images"}}),a._v(" "),s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-05-31-073434.jpg",alt:"images"}}),a._v("\n启动完了之后的话，如果你想删除就需要使用下面命令：")]),a._v(" "),s("p",[a._v("​"),s("br"),a._v("\nkubectl delete -f jobmanager-deployment.yaml")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("kubectl delete -f taskmanager-deployment.yaml\n\nkubectl delete -f jobmanager-service.yaml\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/zs/2019-05-31-075628.jpg",alt:"images"}})]),a._v(" "),s("h3",{attrs:{id:"小结与反思"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结与反思"}},[a._v("#")]),a._v(" 小结与反思")]),a._v(" "),s("p",[a._v("这部分介绍了下 Flink 的所有配置文件及其配置文件中的参数的作用，然后讲解了 Flink 的多种部署方式，比如\nStandalone、YARN、Mesos、Kubernetes。每种方式的差异性还不小，如果你们公司没有使用类似 YARN、Mesoss、K8S\n等分布式调度系统，那么只好使用 Standalone 的 Flink 集群了，这种模式比较简单，可以直接使用 Flink 自带的 UI 上传作业 Jar\n包，不像和 YARN、K8S 这种一样会有多种方式供你选择。根据平时在社群里面的答疑，目前将 Flink 部署在 YARN 上的是非常多的，Flink on\nK8S 好多公司也处于在调研阶段。其实具体该选择哪种方式运行 Flink，最主要还是得看自己公司的架构选型和允许分配的资源（人力 & 机器资源 &\n作业的数量）。")]),a._v(" "),s("p",[a._v("附：Confluence 上有个 FLIP 讲 Flink 的部署，感兴趣可以看看。")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=65147077",target:"_blank",rel:"noopener noreferrer"}},[a._v("FLIP-6 - Flink Deployment and Process Model - Standalone, Yarn, Mesos, Kubernetes, etc"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);