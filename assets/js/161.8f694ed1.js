(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{618:function(a,t,v){"use strict";v.r(t);var _=v(14),e=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"第十四章、垃圾回收概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第十四章、垃圾回收概述"}},[a._v("#")]),a._v(" 第十四章、垃圾回收概述")]),a._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#什么是gc"}},[a._v("什么是GC")]),v("ul",[v("li",[v("a",{attrs:{href:"#什么是垃圾"}},[a._v("什么是垃圾？")])])])]),v("li",[v("a",{attrs:{href:"#为什么要gc"}},[a._v("为什么要GC")])]),v("li",[v("a",{attrs:{href:"#早期垃圾回收"}},[a._v("早期垃圾回收")])]),v("li",[v("a",{attrs:{href:"#java垃圾回收机制"}},[a._v("Java垃圾回收机制")]),v("ul",[v("li",[v("a",{attrs:{href:"#忧"}},[a._v("忧")])]),v("li",[v("a",{attrs:{href:"#gc主要关注的区域"}},[a._v("GC主要关注的区域")])])])])])]),v("p"),a._v(" "),v("h2",{attrs:{id:"什么是gc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是gc"}},[a._v("#")]),a._v(" 什么是GC")]),a._v(" "),v("p",[a._v("垃圾收集，不是Java语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。")]),a._v(" "),v("p",[a._v("关于垃圾收集有三个经典问题：")]),a._v(" "),v("ul",[v("li",[a._v("哪些内存需要回收？")]),a._v(" "),v("li",[a._v("什么时候回收？")]),a._v(" "),v("li",[a._v("如何回收？")])]),a._v(" "),v("p",[a._v("垃圾收集机制是Java的招牌能力，"),v("mark",[a._v("极大地提高了开发效率")]),a._v("。如今，垃圾收集几乎成为现代语言的标配，即使经过如此长时间的发展，Java的垃圾收集机制仍然在不断的演进中，不同大小的设备、不同特征的应用场景，对垃圾收集提出了新的挑战，这当然也是面试的热点。")]),a._v(" "),v("p",[v("strong",[a._v("大厂面试题")])]),a._v(" "),v("blockquote",[v("p",[v("mark",[a._v("蚂蚁金服")])]),a._v(" "),v("ul",[v("li",[v("p",[a._v("你知道哪几种垃圾回收器，各自的优缺点，重点讲一下cms和G1？")])]),a._v(" "),v("li",[v("p",[a._v("JVM GC算法有哪些，目前的JDK版本采用什么回收算法？")])]),a._v(" "),v("li",[v("p",[a._v("G1回收器讲下回收过程GC是什么？为什么要有GC？")])]),a._v(" "),v("li",[v("p",[a._v("GC的两种判定方法？CMS收集器与G1收集器的特点")])])]),a._v(" "),v("p",[v("mark",[a._v("百度")])]),a._v(" "),v("ul",[v("li",[v("p",[a._v("说一下GC算法，分代回收说下")])]),a._v(" "),v("li",[v("p",[a._v("垃圾收集策略和算法")])])]),a._v(" "),v("p",[v("mark",[a._v("天猫")])]),a._v(" "),v("ul",[v("li",[v("p",[a._v("JVM GC原理，JVM怎么回收内存")])]),a._v(" "),v("li",[v("p",[a._v("CMS特点，垃圾回收算法有哪些？各自的优缺点，他们共同的缺点是什么？")])])]),a._v(" "),v("p",[v("mark",[a._v("滴滴")])]),a._v(" "),v("ul",[v("li",[a._v("Java的垃圾回收器都有哪些，说下g1的应用场景，平时你是如何搭配使用垃圾回收器的")])]),a._v(" "),v("p",[v("mark",[a._v("京东")])]),a._v(" "),v("ul",[v("li",[v("p",[a._v("你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，")])]),a._v(" "),v("li",[v("p",[a._v("包括原理，流程，优缺点。垃圾回收算法的实现原理")])])]),a._v(" "),v("p",[v("mark",[a._v("阿里")])]),a._v(" "),v("ul",[v("li",[v("p",[a._v("讲一讲垃圾回收算法。")])]),a._v(" "),v("li",[v("p",[a._v("什么情况下触发垃圾回收？")])]),a._v(" "),v("li",[v("p",[a._v("如何选择合适的垃圾收集算法？")])]),a._v(" "),v("li",[v("p",[a._v("JVM有哪三种垃圾回收器？")])])]),a._v(" "),v("p",[v("mark",[a._v("字节跳动")])]),a._v(" "),v("ul",[v("li",[a._v("常见的垃圾回收器算法有哪些，各有什么优劣？")]),a._v(" "),v("li",[a._v("System.gc（）和Runtime.gc（）会做什么事情？")]),a._v(" "),v("li",[a._v("Java GC机制？GC Roots有哪些？")]),a._v(" "),v("li",[a._v("Java对象的回收方式，回收算法。")]),a._v(" "),v("li",[a._v("CMS和G1了解么，CMS解决什么问题，说一下回收的过程。")]),a._v(" "),v("li",[a._v("CMS回收停顿了几次，为什么要停顿两次?")])])]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-21-1ab0f3026b8c630a52619c24e8c8cb5e.png",alt:"image"}})]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-21-e9d7ad74e2e98509c67e71253f8545df.png",alt:"image"}})]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-21-0c2faa40fd094d52e5d589fd5280de7d.png",alt:"image"}})]),a._v(" "),v("h4",{attrs:{id:"什么是垃圾"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是垃圾"}},[a._v("#")]),a._v(" 什么是垃圾？")]),a._v(" "),v("blockquote",[v("p",[a._v("An object is considered garbage when it can no longer be reached from any pointer in the running program")])]),a._v(" "),v("p",[a._v("垃圾是指在运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾。")]),a._v(" "),v("p",[a._v("如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间会一直保留到应用程序的结束，被保留的空间无法被其它对象使用，甚至可能导致内存溢出。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-21-11257f3482a1597917dd1f4ed2ea4957.png",alt:"image"}})]),a._v(" "),v("p",[v("strong",[a._v("磁盘碎片整理的日子")])]),a._v(" "),v("p",[a._v("机械硬盘需要进行磁盘整理，同时还有坏道")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/21-06-03-5ed2c6595e47f629eecf17e7f0ee54dd.png",alt:"image"}})]),a._v(" "),v("h2",{attrs:{id:"为什么要gc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要gc"}},[a._v("#")]),a._v(" 为什么要GC")]),a._v(" "),v("p",[v("strong",[a._v("想要学习GC，首先需要理解为什么需要GC？")])]),a._v(" "),v("p",[a._v("对于高级语言来说，一个基本认知是如果不进行垃圾回收，"),v("mark",[a._v("内存迟早都会被消耗完")]),a._v("，因为不断地分配内存空间而不进行回收，就好像不停地生产生活垃圾而从来不打扫一样。")]),a._v(" "),v("p",[a._v("除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，以便"),v("mark",[a._v("JVM将整理出的内存分配给新的对象")]),a._v("。")]),a._v(" "),v("p",[a._v("随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，"),v("mark",[a._v("没有GC就不能保证应用程序的正常进行")]),a._v("。而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-21-72624153aca1f54994551e15730eaa87.png",alt:"image"}})]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-21-42d439929561c2a2090b071ff151723c.png",alt:"image"}})]),a._v(" "),v("h2",{attrs:{id:"早期垃圾回收"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#早期垃圾回收"}},[a._v("#")]),a._v(" 早期垃圾回收")]),a._v(" "),v("p",[a._v("在早期的C/C++时代，垃圾回收基本上是手工进行的。开发人员可以使用new关键字进行内存申请，并使用delete关键字进行内存释放。比如以下代码：")]),a._v(" "),v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("MibBridge *pBridge= new cmBaseGroupBridge();\n//如果注册失败，使用Delete释放该对象所占内存区域\nif (pBridge->Register(kDestroy) != NO ERROR）\n\tdelete pBridge;\n")])])]),v("p",[a._v("这种方式可以灵活控制内存释放的时间，但是会给开发人员带来"),v("mark",[a._v("频繁申请和释放内存的管理负担")]),a._v("。倘若有一处内存区间由于程序员编码的问题忘记被回收，那么就会产生"),v("mark",[a._v("内存泄漏")]),a._v("，垃圾对象永远无法被清除，随着系统运行时间的不断增长，垃圾对象所耗内存可能持续上升，直到出现内存溢出并造成"),v("mark",[a._v("应用程序崩溃")]),a._v("。")]),a._v(" "),v("p",[a._v("在有了垃圾回收机制后，上述代码极有可能变成这样")]),a._v(" "),v("div",{staticClass:"language-c++ extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("MibBridge *pBridge = new cmBaseGroupBridge(); \npBridge->Register(kDestroy);\n")])])]),v("p",[a._v("现在，除了Java以外，C#、Python、Ruby等语言都使用了自动垃圾回收的思想，也是未来发展趋势，可以说这种自动化的内存分配和来及回收方式已经成为了线代开发语言必备的标准。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-22-4ad6da22ecb58333f68b069dee342a11.png",alt:"image"}})]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-22-14581a9665a2fb073ddb2d5bd87cf9ac.png",alt:"image"}})]),a._v(" "),v("h2",{attrs:{id:"java垃圾回收机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java垃圾回收机制"}},[a._v("#")]),a._v(" Java垃圾回收机制")]),a._v(" "),v("p",[a._v("自动内存管理，无需开发人员手动参与内存的分配与回收，这样"),v("mark",[a._v("降低内存泄漏和内存溢出的风险")])]),a._v(" "),v("ul",[v("li",[a._v("没有垃圾回收器，java也会和cpp一样，各种悬垂指针，野指针，泄露问题让你头疼不已。")])]),a._v(" "),v("p",[a._v("自动内存管理机制，将程序员从繁重的内存管理中释放出来，可以更专心地"),v("mark",[a._v("专注于业务开发")])]),a._v(" "),v("p",[a._v("oracle官网关于垃圾回收的介绍 [https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html](")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-22-0c2b0573dfcf9aab8773184cb51fa2ec.png",alt:"image"}})]),a._v(" "),v("h4",{attrs:{id:"忧"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#忧"}},[a._v("#")]),a._v(" 忧")]),a._v(" "),v("p",[a._v("对于Java开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于“自动”，那么这将会是一场灾难，最严重的就会"),v("mark",[a._v("弱化Java开发人员在程序出现内存溢出时定位问题和解决问题的能力")]),a._v("。")]),a._v(" "),v("p",[a._v("此时，了解JVM的自动内存分配和内存回收原理就显得非常重要，只有在真正了解JVM是如何管理内存后，我们才能够在遇见outofMemoryError时，快速地根据错误异常日志定位问题和解决问题。")]),a._v(" "),v("p",[a._v("当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术"),v("mark",[a._v("实施必要的监控和调节")]),a._v("。")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-22-a89c153c41a69232e3a6faa623a88c9d.png",alt:"image"}})]),a._v(" "),v("h4",{attrs:{id:"gc主要关注的区域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#gc主要关注的区域"}},[a._v("#")]),a._v(" GC主要关注的区域")]),a._v(" "),v("p",[a._v("GC主要关注于 方法区 和堆中的垃圾收集")]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-22-69f785092b7c3b39d20a6c19b5e6d8d2.png",alt:"image"}})]),a._v(" "),v("p",[a._v("垃圾收集器可以对年轻代回收，也可以对老年代回收，甚至是全栈和方法区的回收。其中，"),v("mark",[a._v("Java堆是垃圾收集器的工作重点")])]),a._v(" "),v("p",[a._v("从次数上讲：")]),a._v(" "),v("ul",[v("li",[v("mark",[a._v("频繁收集Young区")])]),a._v(" "),v("li",[v("mark",[a._v("较少收集Old区")])]),a._v(" "),v("li",[v("mark",[a._v("基本不收集Perm区（元空间）")])])]),a._v(" "),v("p",[v("img",{attrs:{src:"https://static.lovedata.net/20-12-22-6ba4dd9d1d7f2c8467160dd732f57aaf.png",alt:"image"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);