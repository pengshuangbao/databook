(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{604:function(a,t,h){"use strict";h.r(t);var e=h(14),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,h=a._self._c||t;return h("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[h("h1",{attrs:{id:"java基础"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#java基础"}},[a._v("#")]),a._v(" Java基础")]),a._v(" "),h("p"),h("div",{staticClass:"table-of-contents"},[h("ul",[h("li",[h("a",{attrs:{href:"#内存溢出了怎么去定位"}},[a._v("内存溢出了怎么去定位?")])]),h("li",[h("a",{attrs:{href:"#hashmap"}},[a._v("HashMap")]),h("ul",[h("li",[h("a",{attrs:{href:"#hashmap-的数据结构"}},[a._v("HashMap 的数据结构?")])]),h("li",[h("a",{attrs:{href:"#hashmap-的工作原理"}},[a._v("HashMap 的工作原理?")])]),h("li",[h("a",{attrs:{href:"#当两个对象的-hashcode-相同会发生什么"}},[a._v("当两个对象的 hashCode 相同会发生什么?")])]),h("li",[h("a",{attrs:{href:"#你知道-hash-的实现吗-为什么要这样实现"}},[a._v("你知道 hash 的实现吗?为什么要这样实现?")])]),h("li",[h("a",{attrs:{href:"#为什么要用异或运算符"}},[a._v("为什么要用异或运算符?")])]),h("li",[h("a",{attrs:{href:"#hashmap-的-table-的容量如何确定-loadfactor-是什么-该容量如何变化-这种变化会带来什么问题"}},[a._v("HashMap 的 table 的容量如何确定?loadFactor 是什么?该容量如何变化?这种变化会带来什么问题?")])]),h("li",[h("a",{attrs:{href:"#hashmap中put方法的过程"}},[a._v("HashMap中put方法的过程?")])]),h("li",[h("a",{attrs:{href:"#数组扩容的过程"}},[a._v("数组扩容的过程?")])]),h("li",[h("a",{attrs:{href:"#拉链法导致的链表过深问题为什么不用二叉查找树代替-而选择红黑树-为什么不一直使用红黑树"}},[a._v("拉链法导致的链表过深问题为什么不用二叉查找树代替,而选择红黑树?为什么不一直使用红黑树?")])]),h("li",[h("a",{attrs:{href:"#说说你对红黑树的见解"}},[a._v("说说你对红黑树的见解?")]),h("ul",[h("li",[h("a",{attrs:{href:"#"}})])])]),h("li",[h("a",{attrs:{href:"#jdk8中对hashmap做了哪些改变"}},[a._v("jdk8中对HashMap做了哪些改变?")])]),h("li",[h("a",{attrs:{href:"#hashmap-linkedhashmap-treemap-有什么区别"}},[a._v("HashMap,LinkedHashMap,TreeMap 有什么区别?")])]),h("li",[h("a",{attrs:{href:"#hashmap-treemap-linkedhashmap-使用场景"}},[a._v("HashMap & TreeMap & LinkedHashMap 使用场景?")])]),h("li",[h("a",{attrs:{href:"#hashmap-和-hashtable-有什么区别"}},[a._v("HashMap 和 HashTable 有什么区别?")])]),h("li",[h("a",{attrs:{href:"#java-中的另一个线程安全的与-hashmap-极其类似的类是什么-同样是线程安全-它与-hashtable-在线程同步上有什么不同"}},[a._v("Java 中的另一个线程安全的与 HashMap 极其类似的类是什么?同样是线程安全,它与 HashTable 在线程同步上有什么不同?")])]),h("li",[h("a",{attrs:{href:"#hashmap-concurrenthashmap-的区别"}},[a._v("HashMap & ConcurrentHashMap 的区别?")])]),h("li",[h("a",{attrs:{href:"#为什么-concurrenthashmap-比-hashtable-效率要高"}},[a._v("为什么 ConcurrentHashMap 比 HashTable 效率要高?")])]),h("li",[h("a",{attrs:{href:"#针对-concurrenthashmap-锁机制具体分析-jdk-1-7-vs-jdk-1-8"}},[a._v("针对 ConcurrentHashMap 锁机制具体分析（JDK 1.7 VS JDK 1.8）")]),h("ul",[h("li",[h("a",{attrs:{href:"#"}})])])]),h("li",[h("a",{attrs:{href:"#concurrenthashmap-在-jdk-1-8-中-为什么要使用内置锁-synchronized-来代替重入锁-reentrantlock"}},[a._v("ConcurrentHashMap 在 JDK 1.8 中,为什么要使用内置锁 synchronized 来代替重入锁 ReentrantLock?")])]),h("li",[h("a",{attrs:{href:"#concurrenthashmap-简单介绍"}},[a._v("ConcurrentHashMap 简单介绍?")])]),h("li",[h("a",{attrs:{href:"#concurrenthashmap-的并发度是什么"}},[a._v("ConcurrentHashMap 的并发度是什么?")])])])]),h("li",[h("a",{attrs:{href:"#hashmap源码详解"}},[a._v("HashMap源码详解")]),h("ul",[h("li",[h("a",{attrs:{href:"#什么是hash"}},[a._v("什么是Hash?")])]),h("li",[h("a",{attrs:{href:"#课程框架"}},[a._v("课程框架")]),h("ul",[h("li",[h("a",{attrs:{href:"#第一部分-基础入门"}},[a._v("第一部分，基础入门：")])]),h("li",[h("a",{attrs:{href:"#第二部分-hashmap原理讲解"}},[a._v("第二部分，HashMap原理讲解：")])]),h("li",[h("a",{attrs:{href:"#第三部分-手撕源码"}},[a._v("第三部分，手撕源码：")])])])])])])])]),h("p"),a._v(" "),h("h2",{attrs:{id:"内存溢出了怎么去定位"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出了怎么去定位"}},[a._v("#")]),a._v(" 内存溢出了怎么去定位?")]),a._v(" "),h("p",[h("a",{attrs:{href:"https://www.cnblogs.com/snowwhite/p/9471710.html",title:"  ",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java内存溢出定位和解决方案（new）"),h("OutboundLink")],1)]),a._v(" "),h("p",[h("a",{attrs:{href:"https://www.cnblogs.com/zhchoutai/p/7270886.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java 出现内存溢出的定位以及解决方案"),h("OutboundLink")],1)]),a._v(" "),h("p",[a._v("https://www.cnblogs.com/LUO77/p/5816326.html)")]),a._v(" "),h("h2",{attrs:{id:"hashmap"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[a._v("#")]),a._v(" HashMap")]),a._v(" "),h("h3",{attrs:{id:"hashmap-的数据结构"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的数据结构"}},[a._v("#")]),a._v(" HashMap 的数据结构?")]),a._v(" "),h("p",[a._v("A：哈希表结构（链表散列：数组+链表）实现，结合数组和链表的优点。当链表长度超过 8 时，链表转换为红黑树。")]),a._v(" "),h("p",[a._v("transient Node<K,V>[] table;")]),a._v(" "),h("h3",{attrs:{id:"hashmap-的工作原理"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的工作原理"}},[a._v("#")]),a._v(" HashMap 的工作原理?")]),a._v(" "),h("p",[a._v("HashMap 底层是 hash 数组和单向链表实现，数组中的每个元素都是链表，由 Node 内部类（实现 Map.Entry接口）实现，HashMap 通过 put & get 方法存储和获取。")]),a._v(" "),h("p",[a._v("存储对象时，将 K/V 键值传给 put() 方法：")]),a._v(" "),h("p",[a._v("①、调用 hash(K) 方法计算 K 的 hash 值，然后结合数组长度，计算得数组下标；")]),a._v(" "),h("p",[a._v("②、调整数组大小（当容器中的元素个数大于 capacity * loadfactor 时，容器会进行扩容resize 为 2n）；")]),a._v(" "),h("p",[a._v("③、i.如果 K 的 hash 值在 HashMap 中不存在，则执行插入，若存在，则发生碰撞；")]),a._v(" "),h("p",[a._v("ii.如果 K 的 hash 值在 HashMap 中存在，且它们两者 equals 返回 true，则更新键值对；")]),a._v(" "),h("p",[a._v("iii. 如果 K 的 hash 值在 HashMap 中存在，且它们两者 equals 返回 false，则插入链表的尾部（尾插法）或者红黑树中（树的添加方式）。")]),a._v(" "),h("p",[a._v("（JDK 1.7 之前使用头插法、JDK 1.8 使用尾插法）（注意：当碰撞导致链表大于 TREEIFY_THRESHOLD = 8 时，就把链表转换成红黑树）")]),a._v(" "),h("p",[a._v("获取对象时，将 K 传给 get() 方法：①、调用 hash(K) 方法（计算 K 的 hash 值）从而获取该键值所在链表的数组下标；②、顺序遍历链表，equals()方法查找相同 Node 链表中 K 值对应的 V 值。")]),a._v(" "),h("p",[a._v("hashCode 是定位的，存储位置；equals是定性的，比较两者是否相等。")]),a._v(" "),h("h3",{attrs:{id:"当两个对象的-hashcode-相同会发生什么"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#当两个对象的-hashcode-相同会发生什么"}},[a._v("#")]),a._v(" 当两个对象的 hashCode 相同会发生什么?")]),a._v(" "),h("p",[h("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&mid=2247489051&idx=4&sn=651c4a067c2f1d59151f484475144c20&chksm=ea5cdb7ddd2b526bcb46214f83f80859c8603497323a3cf933e511b6f018af666dd74b0e584d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[a._v('因为 hashCode 相同，不一定就是相等的（equals方法比较），所以两个对象所在数组的下标相同，"碰撞"就此发生。又因为 HashMap 使用链表存储对象，这个 Node 会存储到链表中。为什么要重写 hashcode 和 equals 方法？推荐看下。'),h("OutboundLink")],1)]),a._v(" "),h("h3",{attrs:{id:"你知道-hash-的实现吗-为什么要这样实现"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#你知道-hash-的实现吗-为什么要这样实现"}},[a._v("#")]),a._v(" 你知道 hash 的实现吗?为什么要这样实现?")]),a._v(" "),h("p",[a._v("JDK 1.8 中，是通过 hashCode() 的高 16 位异或低 16 位实现的：(h = k.hashCode()) ^ (h >>> 16)，主要是从速度，功效和质量来考虑的，减少系统的开销，也不会造成因为高位没有参与下标的计算，从而引起的碰撞。")]),a._v(" "),h("h3",{attrs:{id:"为什么要用异或运算符"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用异或运算符"}},[a._v("#")]),a._v(" 为什么要用异或运算符?")]),a._v(" "),h("p",[a._v("保证了对象的 hashCode 的 32 位值只要有一位发生改变，整个 hash() 返回值就会改变。尽可能的减少碰撞。")]),a._v(" "),h("h3",{attrs:{id:"hashmap-的-table-的容量如何确定-loadfactor-是什么-该容量如何变化-这种变化会带来什么问题"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的-table-的容量如何确定-loadfactor-是什么-该容量如何变化-这种变化会带来什么问题"}},[a._v("#")]),a._v(" HashMap 的 table 的容量如何确定?loadFactor 是什么?该容量如何变化?这种变化会带来什么问题?")]),a._v(" "),h("p",[h("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&mid=2247489478&idx=4&sn=ad7321cd1948f0c8eaf955aaaa7a2046&chksm=ea5cdaa0dd2b53b67ac2b9ba12935e13cb59250180fa302bd61629968e24f8853f208790fe80&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[a._v("①、table 数组大小是由 capacity 这个参数确定的，默认是16，也可以构造时传入，最大限制是1<<30；"),h("OutboundLink")],1)]),a._v(" "),h("p",[h("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&mid=2247489478&idx=4&sn=ad7321cd1948f0c8eaf955aaaa7a2046&chksm=ea5cdaa0dd2b53b67ac2b9ba12935e13cb59250180fa302bd61629968e24f8853f208790fe80&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[a._v("②、loadFactor 是装载因子，主要目的是用来确认table 数组是否需要动态扩展，默认值是0.75，比如table 数组大小为 16，装载因子为 0.75 时，threshold 就是12，当 table 的实际大小超过 12 时，table就需要动态扩容；"),h("OutboundLink")],1)]),a._v(" "),h("p",[h("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&mid=2247489478&idx=4&sn=ad7321cd1948f0c8eaf955aaaa7a2046&chksm=ea5cdaa0dd2b53b67ac2b9ba12935e13cb59250180fa302bd61629968e24f8853f208790fe80&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[a._v("③、扩容时，调用 resize() 方法，将 table 长度变为原来的两倍（注意是 table 长度，而不是 threshold）"),h("OutboundLink")],1)]),a._v(" "),h("p",[a._v("④、如果数据很大的情况下，扩展时将会带来性能的损失，在性能要求很高的地方，这种损失很可能很致命。")]),a._v(" "),h("h3",{attrs:{id:"hashmap中put方法的过程"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap中put方法的过程"}},[a._v("#")]),a._v(" HashMap中put方法的过程?")]),a._v(" "),h("p",[a._v("答：“调用哈希函数获取Key对应的hash值，再计算其数组下标；")]),a._v(" "),h("p",[a._v("如果没有出现哈希冲突，则直接放入数组；如果出现哈希冲突，则以链表的方式放在链表后面；")]),a._v(" "),h("p",[a._v("如果链表长度超过阀值( TREEIFY THRESHOLD==8)，就把链表转成红黑树，链表长度低于6，就把红黑树转回链表;")]),a._v(" "),h("p",[a._v("如果结点的key已经存在，则替换其value即可；")]),a._v(" "),h("p",[a._v("如果集合中的键值对大于12，调用resize方法进行数组扩容。”")]),a._v(" "),h("h3",{attrs:{id:"数组扩容的过程"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#数组扩容的过程"}},[a._v("#")]),a._v(" 数组扩容的过程?")]),a._v(" "),h("p",[a._v("创建一个新的数组，其容量为旧数组的两倍，并重新计算旧数组中结点的存储位置。结点在新数组中的位置只有两种，原下标位置或原下标+旧数组的大小。")]),a._v(" "),h("h3",{attrs:{id:"拉链法导致的链表过深问题为什么不用二叉查找树代替-而选择红黑树-为什么不一直使用红黑树"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#拉链法导致的链表过深问题为什么不用二叉查找树代替-而选择红黑树-为什么不一直使用红黑树"}},[a._v("#")]),a._v(" 拉链法导致的链表过深问题为什么不用二叉查找树代替,而选择红黑树?为什么不一直使用红黑树?")]),a._v(" "),h("p",[h("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&mid=2247489139&idx=2&sn=9670f4aa9a1b240352b5387f776fb284&chksm=ea5cdb15dd2b5203cd904cdadf8e1061b6e1e6af6a51c9116eceee4313f889945e529381162d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[a._v("之所以选择红黑树是为了解决二叉查找树的缺陷，二叉查找树在特殊情况下会变成一条线性结构（这就跟原来使用链表结构一样了，造成很深的问题），遍历查找会非常慢。推荐：面试问红黑树，我脸都绿了。"),h("OutboundLink")],1)]),a._v(" "),h("p",[h("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI2MTIzMzY3Mw==&mid=2247489139&idx=2&sn=9670f4aa9a1b240352b5387f776fb284&chksm=ea5cdb15dd2b5203cd904cdadf8e1061b6e1e6af6a51c9116eceee4313f889945e529381162d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[a._v("而红黑树在插入新数据后可能需要通过左旋，右旋、变色这些操作来保持平衡，引入红黑树就是为了查找数据快，解决链表查询深度的问题，我们知道红黑树属于平衡二叉树，但是为了保持“平衡”是需要付出代价的，但是该代价所损耗的资源要比遍历线性链表要少，所以当长度大于8的时候，会使用红黑树，如果链表长度很短的话，根本不需要引入红黑树，引入反而会慢。"),h("OutboundLink")],1)]),a._v(" "),h("h3",{attrs:{id:"说说你对红黑树的见解"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#说说你对红黑树的见解"}},[a._v("#")]),a._v(" 说说你对红黑树的见解?")]),a._v(" "),h("ul",[h("li",[a._v("每个节点非红即黑")]),a._v(" "),h("li",[a._v("根节点总是黑色的")]),a._v(" "),h("li",[a._v("如果节点是红色的，则它的子节点必须是黑色的（反之不一定）")]),a._v(" "),h("li",[a._v("每个叶子节点都是黑色的空节点（NIL节点）")]),a._v(" "),h("li",[a._v("从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）")])]),a._v(" "),h("h4",{attrs:{id:""}},[h("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),h("h3",{attrs:{id:"jdk8中对hashmap做了哪些改变"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#jdk8中对hashmap做了哪些改变"}},[a._v("#")]),a._v(" jdk8中对HashMap做了哪些改变?")]),a._v(" "),h("p",[a._v("在java 1.8中，如果链表的长度超过了8，那么链表将转换为红黑树。（桶的数量必须大于64，小于64的时候只会扩容）")]),a._v(" "),h("p",[a._v("发生hash碰撞时，java 1.7 会在链表的头部插入，而java 1.8会在链表的尾部插入")]),a._v(" "),h("p",[a._v("在java 1.8中，Entry被Node替代(换了一个马甲。")]),a._v(" "),h("h3",{attrs:{id:"hashmap-linkedhashmap-treemap-有什么区别"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-linkedhashmap-treemap-有什么区别"}},[a._v("#")]),a._v(" HashMap,LinkedHashMap,TreeMap 有什么区别?")]),a._v(" "),h("p",[a._v("HashMap 参考其他问题；")]),a._v(" "),h("p",[a._v("LinkedHashMap 保存了记录的插入顺序，在用 Iterator 遍历时，先取到的记录肯定是先插入的；遍历比 HashMap 慢；")]),a._v(" "),h("p",[a._v("TreeMap 实现 SortMap 接口，能够把它保存的记录根据键排序（默认按键值升序排序，也可以指定排序的比较器）")]),a._v(" "),h("h3",{attrs:{id:"hashmap-treemap-linkedhashmap-使用场景"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-treemap-linkedhashmap-使用场景"}},[a._v("#")]),a._v(" HashMap & TreeMap & LinkedHashMap 使用场景?")]),a._v(" "),h("p",[a._v("一般情况下，使用最多的是 HashMap。")]),a._v(" "),h("p",[a._v("HashMap：在 Map 中插入、删除和定位元素时；")]),a._v(" "),h("p",[a._v("TreeMap：在需要按自然顺序或自定义顺序遍历键的情况下；")]),a._v(" "),h("p",[a._v("LinkedHashMap：在需要输出的顺序和输入的顺序相同的情况下。")]),a._v(" "),h("h3",{attrs:{id:"hashmap-和-hashtable-有什么区别"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashtable-有什么区别"}},[a._v("#")]),a._v(" HashMap 和 HashTable 有什么区别?")]),a._v(" "),h("p",[a._v("①、HashMap 是线程不安全的，HashTable 是线程安全的；")]),a._v(" "),h("p",[a._v("②、由于线程安全，所以 HashTable 的效率比不上 HashMap；")]),a._v(" "),h("p",[a._v("③、HashMap最多只允许一条记录的键为null，允许多条记录的值为null，而 HashTable不允许；")]),a._v(" "),h("p",[a._v("④、HashMap 默认初始化数组的大小为16，HashTable 为 11，前者扩容时，扩大两倍，后者扩大两倍+1；")]),a._v(" "),h("p",[a._v("⑤、HashMap 需要重新计算 hash 值，而 HashTable 直接使用对象的 hashCode")]),a._v(" "),h("h3",{attrs:{id:"java-中的另一个线程安全的与-hashmap-极其类似的类是什么-同样是线程安全-它与-hashtable-在线程同步上有什么不同"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#java-中的另一个线程安全的与-hashmap-极其类似的类是什么-同样是线程安全-它与-hashtable-在线程同步上有什么不同"}},[a._v("#")]),a._v(" Java 中的另一个线程安全的与 HashMap 极其类似的类是什么?同样是线程安全,它与 HashTable 在线程同步上有什么不同?")]),a._v(" "),h("p",[a._v("ConcurrentHashMap 类（是 Java并发包 java.util.concurrent 中提供的一个线程安全且高效的 HashMap 实现）。")]),a._v(" "),h("p",[a._v("HashTable 是使用 synchronize 关键字加锁的原理（就是对对象加锁）；")]),a._v(" "),h("p",[a._v("而针对 ConcurrentHashMap，在 JDK 1.7 中采用 分段锁的方式；JDK 1.8 中直接采用了CAS（无锁算法）+ synchronized。")]),a._v(" "),h("h3",{attrs:{id:"hashmap-concurrenthashmap-的区别"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-concurrenthashmap-的区别"}},[a._v("#")]),a._v(" HashMap & ConcurrentHashMap 的区别?")]),a._v(" "),h("p",[a._v("除了加锁，原理上无太大区别。另外，HashMap 的键值对允许有null，但是ConCurrentHashMap 都不允许。")]),a._v(" "),h("h3",{attrs:{id:"为什么-concurrenthashmap-比-hashtable-效率要高"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#为什么-concurrenthashmap-比-hashtable-效率要高"}},[a._v("#")]),a._v(" 为什么 ConcurrentHashMap 比 HashTable 效率要高?")]),a._v(" "),h("p",[a._v("HashTable 使用一把锁（锁住整个链表结构）处理并发问题，多个线程竞争一把锁，容易阻塞；")]),a._v(" "),h("p",[a._v("ConcurrentHashMap")]),a._v(" "),h("ul",[h("li",[h("p",[a._v("JDK 1.7 中使用分段锁（ReentrantLock + Segment + HashEntry），相当于把一个 HashMap 分成多个段，每段分配一把锁，这样支持多线程访问。锁粒度：基于 Segment，包含多个 HashEntry。")])]),a._v(" "),h("li",[h("p",[a._v("JDK 1.8 中使用 CAS + synchronized + Node + 红黑树。锁粒度：Node（首结")]),a._v(" "),h("p",[a._v("点）（实现 Map.Entry）。锁粒度降低了。")])])]),a._v(" "),h("h3",{attrs:{id:"针对-concurrenthashmap-锁机制具体分析-jdk-1-7-vs-jdk-1-8"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#针对-concurrenthashmap-锁机制具体分析-jdk-1-7-vs-jdk-1-8"}},[a._v("#")]),a._v(" 针对 ConcurrentHashMap 锁机制具体分析（JDK 1.7 VS JDK 1.8）")]),a._v(" "),h("p",[a._v("JDK 1.7 中，采用分段锁的机制，实现并发的更新操作，底层采用数组+链表的存储结构，包括两个核心静态内部类 Segment 和 HashEntry。")]),a._v(" "),h("p",[a._v("①、Segment 继承 ReentrantLock（重入锁） 用来充当锁的角色，每个 Segment 对象守护每个散列映射表的若干个桶；")]),a._v(" "),h("p",[a._v("②、HashEntry 用来封装映射表的键-值对；")]),a._v(" "),h("p",[a._v("③、每个桶是由若干个 HashEntry 对象链接起来的链表")]),a._v(" "),h("p",[h("img",{attrs:{src:"https://static.lovedata.net/20-06-03-c97f24463903a7a7e9e5a46803deef03.png",alt:"image"}})]),a._v(" "),h("p",[a._v("JDK 1.8 中，采用Node + CAS + Synchronized来保证并发安全。取消类 Segment，直接用 table 数组存储键值对；当 HashEntry 对象组成的链表长度超过 TREEIFY_THRESHOLD 时，链表转换为红黑树，提升性能。底层变更为数组 + 链表 + 红黑树。")]),a._v(" "),h("p",[h("img",{attrs:{src:"https://static.lovedata.net/20-06-03-6c387f8657b63bc3b88e5f249784cde7.png",alt:"image"}})]),a._v(" "),h("h4",{attrs:{id:"-2"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[a._v("#")])]),a._v(" "),h("h3",{attrs:{id:"concurrenthashmap-在-jdk-1-8-中-为什么要使用内置锁-synchronized-来代替重入锁-reentrantlock"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-在-jdk-1-8-中-为什么要使用内置锁-synchronized-来代替重入锁-reentrantlock"}},[a._v("#")]),a._v(" ConcurrentHashMap 在 JDK 1.8 中,为什么要使用内置锁 synchronized 来代替重入锁 ReentrantLock?")]),a._v(" "),h("p",[a._v("①、粒度降低了；")]),a._v(" "),h("p",[a._v("②、JVM 开发团队没有放弃 synchronized，而且基于 JVM 的 synchronized 优化空间更大，更加自然。")]),a._v(" "),h("p",[a._v("③、在大量的数据操作下，对于 JVM 的内存压力，基于 API 的 ReentrantLock 会开销更多的内存。")]),a._v(" "),h("h3",{attrs:{id:"concurrenthashmap-简单介绍"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-简单介绍"}},[a._v("#")]),a._v(" ConcurrentHashMap 简单介绍?")]),a._v(" "),h("p",[a._v("①、重要的常量：")]),a._v(" "),h("p",[a._v("private transient volatile int sizeCtl;")]),a._v(" "),h("p",[a._v("当为负数时，-1 表示正在初始化，-N 表示 N - 1 个线程正在进行扩容；")]),a._v(" "),h("p",[a._v("当为 0 时，表示 table 还没有初始化；")]),a._v(" "),h("p",[a._v("当为其他正数时，表示初始化或者下一次进行扩容的大小。")]),a._v(" "),h("p",[a._v("②、数据结构：")]),a._v(" "),h("p",[a._v("Node 是存储结构的基本单元，继承 HashMap 中的 Entry，用于存储数据；")]),a._v(" "),h("p",[a._v("TreeNode 继承 Node，但是数据结构换成了二叉树结构，是红黑树的存储结构，用于红黑树中存储数据；")]),a._v(" "),h("p",[a._v("TreeBin 是封装 TreeNode 的容器，提供转换红黑树的一些条件和锁的控制。")]),a._v(" "),h("p",[a._v("③、存储对象时（put() 方法）：")]),a._v(" "),h("p",[a._v("如果没有初始化，就调用 initTable() 方法来进行初始化；")]),a._v(" "),h("p",[a._v("如果没有 hash 冲突就直接 CAS 无锁插入；")]),a._v(" "),h("p",[a._v("如果需要扩容，就先进行扩容；")]),a._v(" "),h("p",[a._v("如果存在 hash 冲突，就加锁来保证线程安全，两种情况：一种是链表形式就直接遍历")]),a._v(" "),h("p",[a._v("到尾端插入，一种是红黑树就按照红黑树结构插入；")]),a._v(" "),h("p",[a._v("如果该链表的数量大于阀值 8，就要先转换成红黑树的结构，break 再一次进入循环")]),a._v(" "),h("p",[a._v("如果添加成功就调用 addCount() 方法统计 size，并且检查是否需要扩容。")]),a._v(" "),h("p",[a._v("④、扩容方法 transfer()：默认容量为 16，扩容时，容量变为原来的两倍。")]),a._v(" "),h("p",[a._v("helpTransfer()：调用多个工作线程一起帮助进行扩容，这样的效率就会更高。")]),a._v(" "),h("p",[a._v("⑤、获取对象时（get()方法）：")]),a._v(" "),h("p",[a._v("计算 hash 值，定位到该 table 索引位置，如果是首结点符合就返回；")]),a._v(" "),h("p",[a._v("如果遇到扩容时，会调用标记正在扩容结点 ForwardingNode.find()方法，查找该结点，匹配就返回；")]),a._v(" "),h("p",[a._v("以上都不符合的话，就往下遍历结点，匹配就返回，否则最后就返回 null。")]),a._v(" "),h("h3",{attrs:{id:"concurrenthashmap-的并发度是什么"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-的并发度是什么"}},[a._v("#")]),a._v(" ConcurrentHashMap 的并发度是什么?")]),a._v(" "),h("p",[a._v("程序运行时能够同时更新 ConccurentHashMap 且不产生锁竞争的最大线程数。默认为 16，且可以在构造函数中设置。")]),a._v(" "),h("p",[a._v("当用户设置并发度时，ConcurrentHashMap 会使用大于等于该值的最小2幂指数作为实际并发度（假如用户设置并发度为17，实际并发度则为32）")]),a._v(" "),h("h2",{attrs:{id:"hashmap源码详解"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hashmap源码详解"}},[a._v("#")]),a._v(" HashMap源码详解")]),a._v(" "),h("blockquote",[h("p",[a._v("(暴躁的小刘)")])]),a._v(" "),h("h3",{attrs:{id:"什么是hash"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#什么是hash"}},[a._v("#")]),a._v(" 什么是Hash?")]),a._v(" "),h("p",[h("strong",[a._v("核心理论")]),a._v("：Hash也称散列、哈希，对应的英文都是Hash。基本原理就是把任意长度的输入，通过Hash算法变成固定长度的输出。\n这个映射的规则就是对应的Hash算法，而原始数据映射后的二进制串就是哈希值。")]),a._v(" "),h("p",[h("strong",[a._v("Hash的特点：")])]),a._v(" "),h("p",[a._v("1.从hash值不可以反向推导出原始的数据\n2.输入数据的微小变化会得到完全不同的hash值，相同的数据会得到相同的值\n3.哈希算法的执行效率要高效，长的文本也能快速地计算出哈希值\n4.hash算法的冲突概率要小")]),a._v(" "),h("p",[a._v("由于hash的原理是将输入空间的值映射成hash空间内，而hash值的空间远小于输入的空间。\n根据抽屉原理，一定会存在不同的输入被映射成相同输出的情况。")]),a._v(" "),h("p",[h("strong",[a._v("抽屉原理")]),a._v("：桌上有十个苹果，要把这十个苹果放到九个抽屉里，无论怎样放，我们会发现至少会有一个抽屉里面放不少于两个苹果。\n这一现象就是我们所说的“抽屉原理”。")]),a._v(" "),h("h3",{attrs:{id:"课程框架"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#课程框架"}},[a._v("#")]),a._v(" 课程框架")]),a._v(" "),h("h4",{attrs:{id:"第一部分-基础入门"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#第一部分-基础入门"}},[a._v("#")]),a._v(" 第一部分，基础入门：")]),a._v(" "),h("p",[a._v("1.数组的优势/劣势\n2.链表的优势/劣势\n3.有没有一种方式整合两种数据结构的优势？散列表\n4.散列表有什么特点？\n5.什么是哈希？")]),a._v(" "),h("h4",{attrs:{id:"第二部分-hashmap原理讲解"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#第二部分-hashmap原理讲解"}},[a._v("#")]),a._v(" 第二部分，HashMap原理讲解：")]),a._v(" "),h("p",[a._v("1.HashMap的继承体系是什么样的？")]),a._v(" "),h("p",[h("img",{attrs:{src:"https://static.lovedata.net/21-06-21-ec3b39eb0962160a8d37991498f04b99.png",alt:"image"}})]),a._v(" "),h("p",[a._v("2.Node数据结构分析？")]),a._v(" "),h("p",[h("img",{attrs:{src:"https://static.lovedata.net/21-06-21-a2d54be954c2f39c52739a6487e75ab5.png",alt:"image"}})]),a._v(" "),h("p",[a._v("3.底层存储结构介绍？")]),a._v(" "),h("p",[h("img",{attrs:{src:"https://static.lovedata.net/21-06-21-c4057bef6a4a76198d5a9931d46594d4.png",alt:"image"}})]),a._v(" "),h("p",[a._v("4.put数据原理分析？")]),a._v(" "),h("p",[h("img",{attrs:{src:"https://static.lovedata.net/21-06-21-39f29d35043702cfe4b56aa791051602.png",alt:"image"}})]),a._v(" "),h("p",[a._v("5.什么是Hash碰撞？\n6.什么是链化？\n7.jdk8为什么引入红黑树？\n8.HashMap扩容原理？")]),a._v(" "),h("p",[h("img",{attrs:{src:"https://static.lovedata.net/21-06-21-6f063cb4f0306671eeef334ee85f3a0e.png",alt:"image"}})]),a._v(" "),h("h4",{attrs:{id:"第三部分-手撕源码"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#第三部分-手撕源码"}},[a._v("#")]),a._v(" 第三部分，手撕源码：")]),a._v(" "),h("p",[a._v("1.HashMap核心属性分析（threshold, loadFactory, size, modCount）\n2.构造方法分析\n3.HashMap put 方法分析 => putVal方法分析\n4.HashMap resize 扩容方法分析(核心)\n5.HashMap get 方法分析\n6.HashMap remove 方法分析\n7.HashMap replace 方法分析")])])}),[],!1,null,null,null);t.default=s.exports}}]);