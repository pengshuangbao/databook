(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{612:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"第五章、虚拟机栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五章、虚拟机栈"}},[t._v("#")]),t._v(" 第五章、虚拟机栈")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#概述"}},[t._v("概述")]),s("ul",[s("li",[s("a",{attrs:{href:"#出现背景"}},[t._v("出现背景")])]),s("li",[s("a",{attrs:{href:"#_4-1-2-初步印象"}},[t._v("4.1.2. 初步印象")])]),s("li",[s("a",{attrs:{href:"#_4-1-3-内存中的栈与堆"}},[t._v("4.1.3. 内存中的栈与堆")])]),s("li",[s("a",{attrs:{href:"#_4-1-4-虚拟机栈基本内容"}},[t._v("4.1.4. 虚拟机栈基本内容")]),s("ul",[s("li",[s("a",{attrs:{href:"#java虚拟机栈是什么"}},[t._v("Java虚拟机栈是什么？")])]),s("li",[s("a",{attrs:{href:"#生命周期"}},[t._v("生命周期")])]),s("li",[s("a",{attrs:{href:"#作用"}},[t._v("作用")])]),s("li",[s("a",{attrs:{href:"#栈的特点"}},[t._v("栈的特点")])])])]),s("li",[s("a",{attrs:{href:"#举例-栈"}},[t._v("举例-栈")])]),s("li",[s("a",{attrs:{href:"#栈大小设置举例"}},[t._v("栈大小设置举例")])])])]),s("li",[s("a",{attrs:{href:"#栈的存储单位"}},[t._v("栈的存储单位")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-2-1-栈中存储什么"}},[t._v("4.2.1. 栈中存储什么？")])]),s("li",[s("a",{attrs:{href:"#_4-2-2-栈运行原理"}},[t._v("4.2.2. 栈运行原理")])]),s("li",[s("a",{attrs:{href:"#栈帧的内部结构"}},[t._v("栈帧的内部结构")])])])]),s("li",[s("a",{attrs:{href:"#局部变量表"}},[t._v("局部变量表")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-3-1-关于slot的理解"}},[t._v("4.3.1. 关于Slot的理解")])]),s("li",[s("a",{attrs:{href:"#关于slot的理解"}},[t._v("关于Slot的理解")])]),s("li",[s("a",{attrs:{href:"#slot槽的重复利用问题"}},[t._v("Slot槽的重复利用问题")]),s("ul",[s("li",[s("a",{attrs:{href:"#静态变量与局部变量的对比"}},[t._v("静态变量与局部变量的对比")])]),s("li",[s("a",{attrs:{href:"#补充"}},[t._v("补充")])])])])])]),s("li",[s("a",{attrs:{href:"#操作数栈-operand-stack"}},[t._v("操作数栈(Operand Stack)")]),s("ul",[s("li",[s("a",{attrs:{href:"#代码追踪"}},[t._v("代码追踪")]),s("ul",[s("li",[s("a",{attrs:{href:"#返回值的问题"}},[t._v("返回值的问题")])])])])])]),s("li",[s("a",{attrs:{href:"#栈顶缓存技术-top-of-stack-casing"}},[t._v("栈顶缓存技术(Top of stack casing)")])]),s("li",[s("a",{attrs:{href:"#动态链接"}},[t._v("动态链接")]),s("ul",[s("li",[s("a",{attrs:{href:"#符号引用与直接引用参考"}},[t._v("符号引用与直接引用参考")])]),s("li",[s("a",{attrs:{href:"#运行时常量池"}},[t._v("运行时常量池")])]),s("li",[s("a",{attrs:{href:"#为什么需要运行时常量池"}},[t._v("为什么需要运行时常量池？")])])])]),s("li",[s("a",{attrs:{href:"#方法的调用-解析与分派"}},[t._v("方法的调用：解析与分派")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-8-1-静态链接"}},[t._v("4.8.1. 静态链接")])]),s("li",[s("a",{attrs:{href:"#_4-8-2-动态链接"}},[t._v("4.8.2. 动态链接")])]),s("li",[s("a",{attrs:{href:"#_4-8-3-早期绑定"}},[t._v("4.8.3. 早期绑定")])]),s("li",[s("a",{attrs:{href:"#_4-8-4-晚期绑定"}},[t._v("4.8.4. 晚期绑定")])]),s("li",[s("a",{attrs:{href:"#虚方法和非虚方法"}},[t._v("虚方法和非虚方法")])]),s("li",[s("a",{attrs:{href:"#调用指令"}},[t._v("调用指令")]),s("ul",[s("li",[s("a",{attrs:{href:"#普通调用指令"}},[t._v("普通调用指令")])]),s("li",[s("a",{attrs:{href:"#动态调用指令"}},[t._v("动态调用指令")])]),s("li",[s("a",{attrs:{href:"#动态类型语言和静态类型语言"}},[t._v("动态类型语言和静态类型语言")])])])]),s("li",[s("a",{attrs:{href:"#方法重写的本质"}},[t._v("方法重写的本质")])]),s("li",[s("a",{attrs:{href:"#虚方法表"}},[t._v("虚方法表")])])])]),s("li",[s("a",{attrs:{href:"#方法返回地址"}},[t._v("方法返回地址")]),s("ul",[s("li",[s("a",{attrs:{href:"#异常处理表"}},[t._v("异常处理表")])])])]),s("li",[s("a",{attrs:{href:"#栈相关"}},[t._v("栈相关")]),s("ul",[s("li",[s("a",{attrs:{href:"#方法中定义的局部变量是否线程安全"}},[t._v("方法中定义的局部变量是否线程安全？")])])])]),s("li",[s("a",{attrs:{href:"#_4-10-一些附加信息"}},[t._v("4.10. 一些附加信息")])]),s("li",[s("a",{attrs:{href:"#_4-11-栈的相关面试题"}},[t._v("4.11. 栈的相关面试题")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),s("h3",{attrs:{id:"出现背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#出现背景"}},[t._v("#")]),t._v(" 出现背景")]),t._v(" "),s("p",[t._v("由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。")]),t._v(" "),s("p",[s("mark",[t._v("优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_4-1-2-初步印象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-初步印象"}},[t._v("#")]),t._v(" 4.1.2. 初步印象")]),t._v(" "),s("p",[t._v("有不少Java开发人员一提到Java内存结构，就会非常粗粒度地将JVM中的内存区理解为仅有Java堆（heap）和Java栈（stack）？为什么？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-08179c49011f764b77dc5e036f61f0be.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"_4-1-3-内存中的栈与堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-3-内存中的栈与堆"}},[t._v("#")]),t._v(" 4.1.3. 内存中的栈与堆")]),t._v(" "),s("p",[s("mark",[t._v("栈是运行时的单位，而堆是存储的单位")])]),t._v(" "),s("ul",[s("li",[t._v("栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。")]),t._v(" "),s("li",[t._v("堆解决的是数据存储的问题，即数据怎么放，放哪里")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-7d344755b2567ead7fa316214b127442.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"_4-1-4-虚拟机栈基本内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-4-虚拟机栈基本内容"}},[t._v("#")]),t._v(" 4.1.4. 虚拟机栈基本内容")]),t._v(" "),s("h4",{attrs:{id:"java虚拟机栈是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java虚拟机栈是什么"}},[t._v("#")]),t._v(" Java虚拟机栈是什么？")]),t._v(" "),s("p",[t._v("Java虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的Java方法调用，是线程私有的。")]),t._v(" "),s("h4",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),s("p",[t._v("生命周期和线程一致")]),t._v(" "),s("h4",{attrs:{id:"作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),s("p",[t._v("主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。")]),t._v(" "),s("h4",{attrs:{id:"栈的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈的特点"}},[t._v("#")]),t._v(" 栈的特点")]),t._v(" "),s("p",[t._v("栈是一种快速有效的分配存储方式，访问速度仅次于罹序计数器。")]),t._v(" "),s("p",[t._v("JVM直接对Java栈的操作只有两个：")]),t._v(" "),s("ul",[s("li",[t._v("每个方法执行，伴随着进栈（入栈、压栈）")]),t._v(" "),s("li",[t._v("执行结束后的出栈工作")])]),t._v(" "),s("p",[t._v("对于栈来说不存在垃圾回收问题（栈存在溢出的情况）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-9ab9746c1adb7a52a9f07a73bc9e4330.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"举例-栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例-栈"}},[t._v("#")]),t._v(" 举例-栈")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-e78e751a8505056bed06057380470271.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-f8c4156ff3fe0597542da35bccc68518.png",alt:"image"}})]),t._v(" "),s("p",[s("strong",[t._v("栈中可能出现的异常")])]),t._v(" "),s("p",[t._v("Java 虚拟机规范允许"),s("mark",[t._v("Java栈的大小是动态的或者是固定不变的")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个"),s("mark",[t._v("StackOverflowError ")]),t._v("异常。")])]),t._v(" "),s("li",[s("p",[t._v("如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个"),s("mark",[t._v(" OutOfMemoryError ")]),t._v("异常。")])])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//抛出异常：Exception in thread"main"java.lang.StackoverflowError')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//程序不断的进行递归调用，而且没有退出条件，就会导致不断地进行压栈。")]),t._v("\n")])])]),s("p",[s("strong",[t._v("设置栈内存大小")])]),t._v(" "),s("p",[t._v("我们可以使用参数 -Xss选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StackDeepTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("recursion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deep of calling="')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printstackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-e4ca78cab485ff964723ca125ec25c4b.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-4d42be548d6fd7952866de2e03f0275f.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-24740957a6bc60c1a5f7e1b0d49714f2.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"栈大小设置举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈大小设置举例"}},[t._v("#")]),t._v(" 栈大小设置举例")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-366edcb768f8750b4ade90b7cc94e620.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"栈的存储单位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈的存储单位"}},[t._v("#")]),t._v(" 栈的存储单位")]),t._v(" "),s("h3",{attrs:{id:"_4-2-1-栈中存储什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-栈中存储什么"}},[t._v("#")]),t._v(" 4.2.1. 栈中存储什么？")]),t._v(" "),s("p",[t._v("每个线程都有自己的栈，栈中的数据都是以"),s("mark",[t._v("栈帧（Stack Frame）的格式存在")]),t._v("。")]),t._v(" "),s("p",[t._v("在这个线程上正在执行的每个方法都各自对应一个栈帧（Stack Frame）。")]),t._v(" "),s("p",[t._v("栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。")]),t._v(" "),s("h3",{attrs:{id:"_4-2-2-栈运行原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-栈运行原理"}},[t._v("#")]),t._v(" 4.2.2. 栈运行原理")]),t._v(" "),s("p",[t._v("JVM直接对Java栈的操作只有两个，就是对"),s("mark",[t._v("栈帧的压栈和出栈，遵循“先进后出”/“后进先出”原则")]),t._v("。")]),t._v(" "),s("p",[t._v("在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为"),s("mark",[t._v("当前栈帧（Current Frame）")]),t._v("，与当前栈帧相对应的方法就是"),s("mark",[t._v("当前方法（Current Method）")]),t._v("，定义这个方法的类就是"),s("mark",[t._v("当前类（Current Class）")]),t._v("。")]),t._v(" "),s("p",[t._v("执行引擎运行的所有字节码指令只针对当前栈帧进行操作。")]),t._v(" "),s("p",[t._v("如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-d8e84b64f18a7a0fc8cbff6215664858.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-680e4311ae67b6941fdd83fc1f54a5e3.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-517dd7e724e674107e9e9a24fcd63d9c.png",alt:"image"}})]),t._v(" "),s("p",[t._v("不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧。")]),t._v(" "),s("p",[t._v("如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。")]),t._v(" "),s("p",[t._v("Java方法有两种返回函数的方式，"),s("mark",[t._v("一种是正常的函数返回，使用return指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CurrentFrameTest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        system"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("println（"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前栈帧对应的方法->methodA"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        system"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("println（"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前栈帧对应的方法->methodA"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("println（"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"当前栈帧对应的方法->methodB"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-e754eb69bbe7f1a9242f7c0d3e231feb.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"栈帧的内部结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈帧的内部结构"}},[t._v("#")]),t._v(" 栈帧的内部结构")]),t._v(" "),s("p",[t._v("每个栈帧中存储着：")]),t._v(" "),s("ul",[s("li",[s("mark",[t._v("局部变量表（Local Variables）")])]),t._v(" "),s("li",[s("mark",[t._v("操作数栈（operand Stack）（或表达式栈）")])]),t._v(" "),s("li",[t._v("动态链接（DynamicLinking）（或指向运行时常量池的方法引用）")]),t._v(" "),s("li",[t._v("方法返回地址（Return Address）（或方法正常退出或者异常退出的定义）")]),t._v(" "),s("li",[t._v("一些附加信息")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-035d1ec39a438d8025d64b1783f3cc19.png",alt:"image"}})]),t._v(" "),s("p",[t._v("并行每个线程下的栈都是私有的，因此每个线程都有自己各自的栈，并且每个栈里面都有很多栈帧，栈帧的大小主要由局部变量表 和 操作数栈决定的")]),t._v(" "),s("h2",{attrs:{id:"局部变量表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部变量表"}},[t._v("#")]),t._v(" 局部变量表")]),t._v(" "),s("p",[t._v("局部变量表也被称之为局部变量数组或本地变量表")]),t._v(" "),s("ul",[s("li",[s("p",[s("mark",[t._v("定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量")]),t._v("，这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型。")])]),t._v(" "),s("li",[s("p",[t._v("由于局部变量表是建立在线程的栈上，是线程的私有数据，因此"),s("mark",[t._v("不存在数据安全问题")])])]),t._v(" "),s("li",[s("p",[s("mark",[t._v("局部变量表所需的容量大小是在编译期确定下来的")]),t._v("，并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的。")])]),t._v(" "),s("li",[s("p",[s("mark",[t._v("方法嵌套调用的次数由栈的大小决定")]),t._v("。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。")])]),t._v(" "),s("li",[s("p",[s("mark",[t._v("局部变量表中的变量只在当前方法调用中有效")]),t._v("。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。")])])]),t._v(" "),s("h3",{attrs:{id:"_4-3-1-关于slot的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-关于slot的理解"}},[t._v("#")]),t._v(" 4.3.1. 关于Slot的理解")]),t._v(" "),s("ul",[s("li",[t._v("局部变量表，最基本的存储单元是Slot（变量槽）")]),t._v(" "),s("li",[t._v("参数值的存放总是在局部变量数组的index0开始，到数组长度-1的索引结束。")]),t._v(" "),s("li",[t._v("局部变量表中存放编译期可知的各种基本数据类型（8种），引用类型（reference），returnAddress类型的变量。")]),t._v(" "),s("li",[t._v("在局部变量表里，32位以内的类型只占用一个slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。")]),t._v(" "),s("li",[t._v("byte、short、char 在存储前被转换为int，boolean也被转换为int，0表示false，非0表示true。")]),t._v(" "),s("li",[t._v("JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值")]),t._v(" "),s("li",[t._v("当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会"),s("mark",[t._v("按照顺序被复制")]),t._v("到局部变量表中的每一个slot上")]),t._v(" "),s("li",[s("mark",[t._v("如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可")]),t._v("。（比如：访问long或doub1e类型变量）")]),t._v(" "),s("li",[t._v("如果当前帧是由构造方法或者实例方法创建的，那么"),s("mark",[t._v("该对象引用this将会存放在index为0的slot处")]),t._v("，其余的参数按照参数表顺序继续排列。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-306f217c806a3d2134c7f2b5f52736bb.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-5366d65d8e5c6a1e03840f739ad0420c.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-3fbf1846e9d39766e06855651bc584ed.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"关于slot的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于slot的理解"}},[t._v("#")]),t._v(" 关于Slot的理解")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-2f337908ab616577dc176cdf79416893.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("在构造函数或者实例方法中，能调用this，因为this在本地变量表中")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-54e04e0360b83161532bd6faa5b2f4a9.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-4ecc9652f6cc85ac7ef1cf73813f470f.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-f5fba81331554f1b232a91acb4fecd1b.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("Double类型占据两个槽")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-d881821ac80c4a4c4830353888d7ac94.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"slot槽的重复利用问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slot槽的重复利用问题"}},[t._v("#")]),t._v(" Slot槽的重复利用问题")]),t._v(" "),s("p",[t._v("栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SlotTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("localVarl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("localVar2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此时的就会复用a的槽位")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-6d6a156eeb4a67cab1e4cea1f98c3798.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-08-970b6733592efbbb61b8f9095db478c5.png",alt:"image"}})]),t._v(" "),s("h4",{attrs:{id:"静态变量与局部变量的对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#静态变量与局部变量的对比"}},[t._v("#")]),t._v(" 静态变量与局部变量的对比")]),t._v(" "),s("p",[t._v("参数表分配完毕之后，再根据方法体内定义的变量的顺序和作用域分配。")]),t._v(" "),s("p",[t._v("我们知道类变量表有两次初始化的机会，第一次是在“"),s("mark",[t._v("准备阶段")]),t._v("”，执行系统初始化，对类变量设置零值，另一次则是在“"),s("mark",[t._v("初始化")]),t._v("”阶段，赋予程序员在代码中定义的初始值。")]),t._v(" "),s("p",[t._v("和类变量初始化不同的是，局部变量表不存在系统初始化的过程，这意味着一旦定义了局部变量则必须人为的初始化，否则无法使用。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这样的代码是错误的，没有赋值不能够使用。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-ec9d80d144c339f68bb8342d601d699b.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-6c047149e813c31d3a8a135f37c026ab.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-ffcf6d87a2d45d9bcdc8db59b5749d48.png",alt:"image"}})]),t._v(" "),s("h4",{attrs:{id:"补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),s("p",[t._v("在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。")]),t._v(" "),s("p",[s("mark",[t._v("局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-94f36c9501332e0c4d6e0d567888cc0f.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"操作数栈-operand-stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作数栈-operand-stack"}},[t._v("#")]),t._v(" 操作数栈(Operand Stack)")]),t._v(" "),s("p",[t._v("每一个独立的栈帧除了包含局部变量表以外，还包含一个后进先出（Last-In-First-Out）的 "),s("mark",[t._v("操作数栈")]),t._v("，也可以称之为"),s("mark",[t._v("表达式栈（Expression Stack）")])]),t._v(" "),s("p",[s("mark",[t._v("操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈（push）和 出栈（pop）")])]),t._v(" "),s("ul",[s("li",[t._v("某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈")]),t._v(" "),s("li",[t._v("比如：执行复制、交换、求和等操作")])]),t._v(" "),s("p",[t._v("代码举例")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testAddOperation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("字节码指令信息")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("public void testAddOperation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    Code:\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(": bipush "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(": istore_1 \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(": bipush "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(": istore_2 \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(":iload_1 \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(":iload_2 \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(":iadd\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(":istore_3 \n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(":return\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-166e71aad4f9e56b04999e8852add581.png",alt:"image"}})]),t._v(" "),s("p",[t._v("操作数栈，"),s("mark",[t._v("主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间")]),t._v("。")]),t._v(" "),s("p",[t._v("操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，"),s("mark",[t._v("这个方法的操作数栈是空的")]),t._v("。")]),t._v(" "),s("p",[t._v("每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的Code属性中，为max_stack的值。")]),t._v(" "),s("p",[t._v("栈中的任何一个元素都是可以任意的Java数据类型")]),t._v(" "),s("ul",[s("li",[t._v("32bit的类型占用一个栈单位深度")]),t._v(" "),s("li",[t._v("64bit的类型占用两个栈单位深度")])]),t._v(" "),s("p",[t._v("操作数栈"),s("mark",[t._v("并非采用访问索引的方式来进行数据访问")]),t._v("的，而是只能通过标准的入栈和出栈操作来完成一次数据访问")]),t._v(" "),s("p",[s("mark",[t._v("如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中")]),t._v("，并更新PC寄存器中下一条需要执行的字节码指令。")]),t._v(" "),s("p",[t._v("操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。")]),t._v(" "),s("p",[t._v("另外，我们说Java虚拟机的"),s("mark",[t._v("解释引擎是基于栈的执行引擎")]),t._v("，其中的栈指的就是操作数栈。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-ed5ad2d5b8bc1e89ff91e34caf0a3cf8.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-42c5d5097ab53b4ef758d4da0187be9f.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"代码追踪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码追踪"}},[t._v("#")]),t._v(" 代码追踪")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("public void testAddOperation() {\n    byte i = 15;\n    int j = 8;\n    int k = i + j;\n}\n")])])]),s("p",[t._v("使用javap 命令反编译class文件："),s("code",[t._v("javap -v 类名.class")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("testAddoperation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Code")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bipush "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" \n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" istore_1 \n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bipush "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" istore_2\n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" iload_1\n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" iload_2\n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" iadd\n\t"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" istore_3\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-847e0f95b18b0f456826f5411a5bb5d3.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-f592fad9027d369373dcfbc326b5237f.png",alt:"image"}})]),t._v(" "),s("p",[t._v("刚开始。PC 操作数栈指向的是0，下一条要执行的是0这个指令，局部变量表也是空的，操作数栈是0")]),t._v(" "),s("p",[t._v("然后执行0，操作数栈变为15，然后PC寄存器往下移动，变为了2")]),t._v(" "),s("p",[t._v("然后store，就是一个出栈的操作，将15这个值放在了局部变量表index 1 这个位置(为什么上来就是1，因为实例方法，的地0个是this变量，指向对象本身)，这个时候操作数栈是没有了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-25c31beec614e6c59efdb2b4dda1e4cb.png",alt:"image"}})]),t._v(" "),s("p",[t._v("然后又bipush 8 ，放入操作数栈，")]),t._v(" "),s("p",[t._v("然后继续 istore_2 把8放入到局部变量表里面")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-a9c968e30c08537f71e3475da0e3881e.png",alt:"image"}})]),t._v(" "),s("p",[t._v("然后 iload_1 iload_2 将局部变量表中 索引为 1 和2 的 值load出来，放入到操作数栈")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-7b161370444b3fd6d95f92e72fc61beb.png",alt:"image"}})]),t._v(" "),s("p",[t._v("iadd 直接又 执行引擎翻译为机器质量， 从操作数栈中弹出两个值，即算完成后，放入到操作数栈")]),t._v(" "),s("p",[t._v("istore_3 将 23 存入到局部变量表index为3的地方")]),t._v(" "),s("p",[t._v("所以 ，对应上了 局部变量表的长度为4，操作数栈的最大深度为2")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-8313b3cb85518b515bb1dcdc2d5da7f8.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-18aebf829def01136f3c609ecbeddd06.png",alt:"image"}})]),t._v(" "),s("p",[t._v("可以看到， 15 8 都是bipush ，因为byte可以存的下，而800就是 sipush ，是转换为short的。 而long  float double 则是自己的类型，")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-f214e7c777f422fc628577ff07e1b862.png",alt:"image"}})]),t._v(" "),s("h4",{attrs:{id:"返回值的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值的问题"}},[t._v("#")]),t._v(" 返回值的问题")]),t._v(" "),s("p",[t._v("一上来就是 aload 放入到操作数栈的位置，需要将上一个方法的返回值放入操作数栈，做后面的操作")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-4dc24c6f2bda17693df82ada49375934.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-73350ebea65a9744d036e32185041e0e.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"栈顶缓存技术-top-of-stack-casing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈顶缓存技术-top-of-stack-casing"}},[t._v("#")]),t._v(" 栈顶缓存技术(Top of stack casing)")]),t._v(" "),s("p",[t._v("前面提过，基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派（instruction dispatch）次数和内存读/写次数。")]),t._v(" "),s("p",[t._v("由于操作数是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM的设计者们提出了栈顶缓存（Tos，Top-of-Stack Cashing）技术，"),s("mark",[t._v("将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-a6cc26ad26f5eb93524c1b73b325fbc3.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"动态链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态链接"}},[t._v("#")]),t._v(" 动态链接")]),t._v(" "),s("p",[t._v("动态链接、方法返回地址、附加信息 ： 有些地方被称为帧数据区")]),t._v(" "),s("p",[t._v("每一个栈帧内部都包含一个指向"),s("mark",[t._v("运行时常量池中该栈帧所属方法的引用")]),t._v("。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接（Dynamic Linking）。比如：invokedynamic指令")]),t._v(" "),s("p",[t._v("在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在class文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么"),s("mark",[t._v("动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-4d6b9cbfbbcf08b1d041f53d1588f03a.png",alt:"image"}})]),t._v(" "),s("p",[t._v("​")]),t._v(" "),s("h3",{attrs:{id:"符号引用与直接引用参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符号引用与直接引用参考"}},[t._v("#")]),t._v(" 符号引用与直接引用参考")]),t._v(" "),s("blockquote",[s("p",[t._v("描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，"),s("strong",[t._v("动态链接的作用就是为了将这些符号引用转换位调用方法的直接引用")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"运行时常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池"}},[t._v("#")]),t._v(" 运行时常量池")]),t._v(" "),s("p",[t._v("JVM中运行时常量池在方法区中，因为是建立在JDK1.7/1.8的基础上来研究这个，所以我先认为"),s("strong",[t._v("String常量池")]),t._v("在堆中。Class文件中除了类的版本、字段、方法、接口等描述信息，还有常量池，用于"),s("strong",[t._v("存放编译期生成的各种字面量和符号引用")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-05b8fae40b9674327a16aa65f149a414.png",alt:"image"}})]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.javatt.com/p/48297",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM-详解虚拟机字节码执行引擎之静态链接、动态链接与分派 - Java天堂"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("解析调用一定是个静态过程，在编译期间就完全确定，在类加载的解析阶段就会把涉及的符号引用转化为可确定的直接引用，不会延迟到运行期再去完成")]),t._v("，这也就是Java中的静态链接。")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/post/6844903785416884231",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM 符号引用和直接引用"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.zhihu.com/question/30300585",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM里的符号引用如何存储？ - 知乎"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[t._v("这里为什么需要在栈镇内部指向运行时常量池，而不是直接在内部使用，因为还有其他的栈帧也要使用，是一个共享的。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-93c4968f99ab2dfdcb311d5681df22a3.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-2c95621cb1fa5c8071f2c2e321a4b071.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"为什么需要运行时常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要运行时常量池"}},[t._v("#")]),t._v(" 为什么需要运行时常量池？")]),t._v(" "),s("p",[t._v("和常量池的区别，一个是字节码文件中的，一个是运行起来后的。")]),t._v(" "),s("p",[t._v("没有他怎么办？ 需要在每个需要他的位置放这个方法的直接引用，还有属性等，如果所有都在需要的地方直接引用，可能导致浪费，因为字节码文件中包含很多信息，比如父类，类的名字，方法名字等等我，就需要一个运行时常量池保存这些东西在方法区，使用的地方直接保存一个引用就可以了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-34b083dc9295dda661cc385042c07d9f.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"方法的调用-解析与分派"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法的调用-解析与分派"}},[t._v("#")]),t._v(" 方法的调用：解析与分派")]),t._v(" "),s("p",[t._v("在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关")]),t._v(" "),s("h3",{attrs:{id:"_4-8-1-静态链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-1-静态链接"}},[t._v("#")]),t._v(" 4.8.1. 静态链接")]),t._v(" "),s("p",[t._v("当一个字节码文件被装载进JVM内部时，如果被调用的"),s("mark",[t._v("目标方法在编译期可知，且运行期保持不变时")]),t._v("，这种情况下降调用方法的符号引用转换为直接引用的过程称之为静态链接")]),t._v(" "),s("h3",{attrs:{id:"_4-8-2-动态链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-2-动态链接"}},[t._v("#")]),t._v(" 4.8.2. 动态链接")]),t._v(" "),s("p",[t._v("如果"),s("mark",[t._v("被调用的方法在编译期无法被确定下来，只能够在程序运行期将调用的方法的符号转换为直接引用")]),t._v("，由于这种引用转换过程具备动态性，因此也被称之为动态链接。")]),t._v(" "),s("p",[s("mark",[t._v("静态链接和动态链接不是名词，而是动词，这是理解的关键。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。"),s("mark",[t._v("绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。")])]),t._v(" "),s("h3",{attrs:{id:"_4-8-3-早期绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-3-早期绑定"}},[t._v("#")]),t._v(" 4.8.3. 早期绑定")]),t._v(" "),s("p",[t._v("早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。")]),t._v(" "),s("h3",{attrs:{id:"_4-8-4-晚期绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-4-晚期绑定"}},[t._v("#")]),t._v(" 4.8.4. 晚期绑定")]),t._v(" "),s("p",[t._v("如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也就被称之为晚期绑定。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-b90fbf8fbf4960b296461de028f9156c.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-b02074381fd5907822835611d49bd7dc.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-bd9b9f0bea58219f9abb9e414147e47f.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-ba2d83a8412c24d3108158e7a309a508.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-e1d594b5ba1a065ad63ef445ee66179b.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-b03ac02f8c94765ef0331e865d45aa20.png",alt:"image"}})]),t._v(" "),s("p",[t._v("随着高级语言的横空出世，类似于Java一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然"),s("mark",[t._v("这一类的编程语言具备多态特悄，那么自然也就具备早期绑定和晚期绑定两种绑定方式。")])]),t._v(" "),s("p",[t._v("Java中任何一个普通的方法其实都具备虚函数的特征，它们相当于C++语言中的虚函数（C++中则需要使用关键字virtual来显式定义）。如果在Java程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字final来标记这个方法。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-fe0ed2c5e7ed8f55c2d578320eea6d95.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"虚方法和非虚方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚方法和非虚方法"}},[t._v("#")]),t._v(" 虚方法和非虚方法")]),t._v(" "),s("p",[t._v("如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为非虚方法。")]),t._v(" "),s("p",[t._v("静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法。其他方法称为虚方法。")]),t._v(" "),s("p",[t._v("在类加载的解析阶段就可以进行解析，如下是非虚方法举例：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-ffec97a4caba9b89b9d8341be628e7f7.png",alt:"image"}})]),t._v(" "),s("blockquote",[s("p",[t._v("实例构造器，在本类中调用，都是很确定的，调用哪一个")]),t._v(" "),s("p",[t._v("弗雷方法也是一样，在编译器也能确定调用的是哪一个")])]),t._v(" "),s("h3",{attrs:{id:"调用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用指令"}},[t._v("#")]),t._v(" 调用指令")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-12-0345f01f24fa1bd1660be7cb6ef67915.png",alt:"image"}})]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 解析调用中非虚方法、虚方法的测试\n * invokestatic指令和invokespecial指令调用的方法称为非虚方法\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"father的构造器"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showStatic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"father "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showFinal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"father show final"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showCommon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"father 普通方法"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokespecial")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokespecial")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不是重写的父类的静态方法，因为静态方法不能被重写！")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showStatic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"son "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showPrivate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"son private"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokestatic")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showStatic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"atguigu.com"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokestatic")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showStatic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"good!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokespecial")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showPrivate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokespecial")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showCommon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokevirtual")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showFinal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//因为此方法声明有final，不能被子类重写，所以也认为此方法是非虚方法。所以这里如果加上super. 则会变成ivokespecial")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//虚方法如下：")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokevirtual")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showCommon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInterface")]),t._v(" in "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//invokeinterface")]),t._v("\n        in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("showCommon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),t._v(" so "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Son")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        so"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodInterface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("虚拟机中提供了以下几条方法调用指令：")]),t._v(" "),s("h4",{attrs:{id:"普通调用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通调用指令"}},[t._v("#")]),t._v(" 普通调用指令")]),t._v(" "),s("ul",[s("li",[s("mark",[t._v("invokestatic：调用静态方法，解析阶段确定唯一方法版本")])]),t._v(" "),s("li",[s("mark",[t._v("invokespecial：调用方法、私有及父类方法，解析阶段确定唯一方法版本")])]),t._v(" "),s("li",[t._v("invokevirtual：调用所有虚方法")]),t._v(" "),s("li",[t._v("invokeinterface：调用接口方法")])]),t._v(" "),s("h4",{attrs:{id:"动态调用指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态调用指令"}},[t._v("#")]),t._v(" 动态调用指令")]),t._v(" "),s("ul",[s("li",[t._v("invokedynamic：动态解析出需要调用的方法，然后执行")])]),t._v(" "),s("p",[t._v("前四条指令固化在虚拟机内部，方法的调用执行不可人为干预，而invokedynamic指令则支持由用户确定方法版本。"),s("mark",[t._v("其中invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（fina1修饰的除外）称为虚方法。")])]),t._v(" "),s("p",[s("strong",[t._v("关于invokednamic指令")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JVM字节码指令集一直比较稳定，一直到Java7中才增加了一个invokedynamic指令，这是"),s("mark",[t._v("Java为了实现「动态类型语言」支持而做的一种改进。")])])]),t._v(" "),s("li",[s("p",[t._v("但是在Java7中并没有提供直接生成invokedynamic指令的方法，需要借助ASM这种底层字节码工具来产生invokedynamic指令。"),s("mark",[t._v("直到Java8的Lambda表达式的出现，invokedynamic指令的生成，在Java中才有了直接的生成方式。")])])]),t._v(" "),s("li",[s("p",[t._v("Java7中增加的动态语言类型支持的本质是对Java虚拟机规范的修改，而不是对Java语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在Java平台的动态语言的编译器。")])])]),t._v(" "),s("h4",{attrs:{id:"动态类型语言和静态类型语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态类型语言和静态类型语言"}},[t._v("#")]),t._v(" 动态类型语言和静态类型语言")]),t._v(" "),s("p",[t._v("动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之是动态类型语言。")]),t._v(" "),s("p",[t._v("说的再直白一点就是，"),s("mark",[t._v("静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息")]),t._v("，这是动态语言的一个重要特征。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-3c9c74e19c6fae70f807e50888427ee5.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-07bf00f55c64978ecf4d14eba76ae719.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-065b289259bd674e6dbc0781d3b00f06.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-675ec467e8b3f673b554ea8edb9c10ab.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"方法重写的本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法重写的本质"}},[t._v("#")]),t._v(" 方法重写的本质")]),t._v(" "),s("p",[s("strong",[t._v("Java 语言中方法重写的本质：")])]),t._v(" "),s("ol",[s("li",[t._v("找到操作数栈顶的第一个元素所执行的对象的实际类型，记作C。")]),t._v(" "),s("li",[t._v("如果在类型C中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError 异常。")]),t._v(" "),s("li",[t._v("否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。")]),t._v(" "),s("li",[t._v("如果始终没有找到合适的方法，则抛出java.1ang.AbstractMethodsrror异常。")])]),t._v(" "),s("p",[s("strong",[t._v("IllegalAccessError介绍")])]),t._v(" "),s("p",[t._v("程序试图访问或修改一个属性或调用一个方法，这个属性或方法，你没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在运行时，就说明一个类发生了不兼容的改变。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-14-45bb6ee54ffbd5b3661e78e15222256f.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"虚方法表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚方法表"}},[t._v("#")]),t._v(" 虚方法表")]),t._v(" "),s("p",[t._v("在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。"),s("mark",[t._v("因此，为了提高性能，JVM采用在类的方法区建立一个虚方法表 （virtual method table）（非虚方法不会出现在表中）来实现。使用索引表来代替查找。")])]),t._v(" "),s("p",[t._v("每个类中都有一个虚方法表，表中存放着各个方法的实际入口。")]),t._v(" "),s("p",[t._v("虚方法表是什么时候被创建的呢？")]),t._v(" "),s("p",[t._v("虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-69daaf3aeafd6912ae68418f2ca033db.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-69f785092b7c3b39d20a6c19b5e6d8d2.png",alt:"image"}})]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Friendly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayGoodbye")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tostring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dog"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Friendly")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayGoodbye")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("finalize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CockerSpaniel")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Dog")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Friendly")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayGoodbye")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/21-06-03-2099137083c054084a8e05fc97b72824.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"方法返回地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法返回地址"}},[t._v("#")]),t._v(" 方法返回地址")]),t._v(" "),s("p",[t._v("存放调用该方法的pc寄存器的值。一个方法的结束，有两种方式：")]),t._v(" "),s("ul",[s("li",[t._v("正常执行完成")]),t._v(" "),s("li",[t._v("出现未处理的异常，非正常退出")])]),t._v(" "),s("p",[t._v("无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，"),s("mark",[t._v("调用者的pc计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址")]),t._v("。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。")]),t._v(" "),s("p",[t._v("当一个方法开始执行后，只有两种方式可以退出这个方法：")]),t._v(" "),s("ol",[s("li",[t._v("执行引擎遇到任意一个方法返回的字节码指令（return），会有返回值传递给上层的方法调用者，简称"),s("mark",[t._v("正常完成出口")]),t._v("；\n"),s("ul",[s("li",[t._v("一个方法在正常调用完成之后，究竟需要使用哪一个返回指令，还需要根据方法返回值的实际数据类型而定。")]),t._v(" "),s("li",[t._v("在字节码指令中，返回指令包含ireturn（当返回值是boolean，byte，char，short和int类型时使用），lreturn（Long类型），freturn（Float类型），dreturn（Double类型），areturn。另外还有一个return指令声明为void的方法，实例初始化方法，类和接口的初始化方法使用。")])])]),t._v(" "),s("li",[t._v("在方法执行过程中遇到异常（Exception），并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出，简称"),s("mark",[t._v("异常完成出口")]),t._v("。")])]),t._v(" "),s("p",[t._v("方法执行过程中，抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("Exception table:\nfrom to target "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\t "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\t  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("   any\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("\t "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\t  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("   any\n")])])]),s("p",[t._v("本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。")]),t._v(" "),s("p",[s("mark",[t._v("正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-67a46d69749992a3676072ce225dd260.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-4016996f25fbd5fa3cc3d0dd5fff4d18.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"异常处理表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理表"}},[t._v("#")]),t._v(" 异常处理表")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-68ccda67632067b61361b65f55ec8be8.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-6ca2b5a4bab1f94ac2241458ec2c2c73.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"栈相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈相关"}},[t._v("#")]),t._v(" 栈相关")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-bcc1c09dcd76d0641e66ada527ac4745.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"方法中定义的局部变量是否线程安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法中定义的局部变量是否线程安全"}},[t._v("#")]),t._v(" 方法中定义的局部变量是否线程安全？")]),t._v(" "),s("p",[t._v("具体问题具体分析")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-6fefacfa2dec8887347539f3e16222fe.png",alt:"image"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-13-bdc0691b6312b07238e9ab07e73cdbd2.png",alt:"image"}})]),t._v(" "),s("p",[t._v("因为抛出去了可能有其他的多个线程抢夺使用")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-14-cfd73c1d22ff10696bd16d67bc972596.png",alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"_4-10-一些附加信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-10-一些附加信息"}},[t._v("#")]),t._v(" 4.10. 一些附加信息")]),t._v(" "),s("p",[t._v("栈帧中还允许携带与Java虚拟机实现相关的一些附加信息。例如：对程序调试提供支持的信息。")]),t._v(" "),s("h2",{attrs:{id:"_4-11-栈的相关面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-11-栈的相关面试题"}},[t._v("#")]),t._v(" 4.11. 栈的相关面试题")]),t._v(" "),s("ul",[s("li",[t._v("举例栈溢出的情况？（StackOverflowError）\n"),s("ul",[s("li",[t._v("通过 -Xss设置栈的大小")])])]),t._v(" "),s("li",[t._v("调整栈大小，就能保证不出现溢出么？\n"),s("ul",[s("li",[t._v("不能保证不溢出")])])]),t._v(" "),s("li",[t._v("分配的栈内存越大越好么？\n"),s("ul",[s("li",[t._v("不是，一定时间内降低了OOM概率，但是会挤占其它的线程空间，因为整个空间是有限的。")])])]),t._v(" "),s("li",[t._v("垃圾回收是否涉及到虚拟机栈？\n"),s("ul",[s("li",[t._v("不会")])])]),t._v(" "),s("li",[t._v("方法中定义的局部变量是否线程安全？\n"),s("ul",[s("li",[t._v("具体问题具体分析。如果对象是在内部产生，并在内部消亡，没有返回到外部，那么它就是线程安全的，反之则是线程不安全的。")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("运行时数据区")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("是否存在Error")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("是否存在GC")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("程序计数器")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("否")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("否")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("虚拟机栈")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是（SOE）")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("否")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("本地方法栈")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("否")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("方法区")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是（OOM）")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("堆")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);