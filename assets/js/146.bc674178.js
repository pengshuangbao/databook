(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{605:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java核心技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java核心技术"}},[t._v("#")]),t._v(" Java核心技术")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#第16讲-synchronized底层如何实现-什么是锁的升级、降级"}},[t._v("第16讲 | synchronized底层如何实现?什么是锁的升级、降级?")])]),s("li",[s("a",{attrs:{href:"#第17讲-一个线程两次调用-start-方法会出现什么情况-谈谈线程的生命周期和状态转移。"}},[t._v("第17讲｜一个线程两次调用 start() 方法会出现什么情况？谈谈线程的生命周期和状态转移。")]),s("ul",[s("li",[s("a",{attrs:{href:"#线程是什么"}},[t._v("线程是什么？")])]),s("li",[s("a",{attrs:{href:"#线程状态转换"}},[t._v("线程状态转换")])]),s("li",[s("a",{attrs:{href:"#为什么需要并发包"}},[t._v("为什么需要并发包？")])]),s("li",[s("a",{attrs:{href:"#守护线程-daemon-thread"}},[t._v("守护线程（Daemon Thread）")])]),s("li",[s("a",{attrs:{href:"#threadlocal-线程本地变量"}},[t._v("ThreadLocal(线程本地变量)")])])])]),s("li",[s("a",{attrs:{href:"#第18讲-什么情况下java程序会产生死锁-如何定位、修复"}},[t._v("第18讲 | 什么情况下Java程序会产生死锁？如何定位、修复？")]),s("ul",[s("li",[s("a",{attrs:{href:"#如何在编程中尽量预防死锁呢"}},[t._v("如何在编程中尽量预防死锁呢？")])])])]),s("li",[s("a",{attrs:{href:"#第19讲-java并发包提供了哪些并发工具类"}},[t._v("第19讲 | Java并发包提供了哪些并发工具类？")]),s("ul",[s("li",[s("a",{attrs:{href:"#semaphore信号量"}},[t._v("Semaphore信号量")])]),s("li",[s("a",{attrs:{href:"#countdownlatch-和-cyclicbarrier"}},[t._v("CountDownLatch 和 CyclicBarrier")])]),s("li",[s("a",{attrs:{href:"#为什么并发容器里面没有-concurrenttreemap-呢"}},[t._v("为什么并发容器里面没有 ConcurrentTreeMap 呢？")])]),s("li",[s("a",{attrs:{href:"#copyonwrite-到底是什么意思呢"}},[t._v("CopyOnWrite 到底是什么意思呢？")])])])]),s("li",[s("a",{attrs:{href:"#第20讲-并发包中的concurrentlinkedqueue和linkedblockingqueue有什么区别"}},[t._v("第20讲 | 并发包中的ConcurrentLinkedQueue和LinkedBlockingQueue有什么区别？ ***")]),s("ul",[s("li",[s("a",{attrs:{href:"#blockingqueue是否有界的问题"}},[t._v("BlockingQueue是否有界的问题")])]),s("li",[s("a",{attrs:{href:"#场景"}},[t._v("场景")])]),s("li",[s("a",{attrs:{href:"#阻塞队列与非阻塞队列"}},[t._v("阻塞队列与非阻塞队列")]),s("ul",[s("li",[s("a",{attrs:{href:"#阻塞队列"}},[t._v("阻塞队列")])])])]),s("li",[s("a",{attrs:{href:"#二者区别"}},[t._v("二者区别")])])])]),s("li",[s("a",{attrs:{href:"#第21讲-java并发类库提供的线程池有哪几种-分别有什么特点"}},[t._v("第21讲 | Java并发类库提供的线程池有哪几种？ 分别有什么特点？")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"第16讲-synchronized底层如何实现-什么是锁的升级、降级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第16讲-synchronized底层如何实现-什么是锁的升级、降级"}},[t._v("#")]),t._v(" 第16讲 | synchronized底层如何实现?什么是锁的升级、降级?")]),t._v(" "),s("h2",{attrs:{id:"第17讲-一个线程两次调用-start-方法会出现什么情况-谈谈线程的生命周期和状态转移。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第17讲-一个线程两次调用-start-方法会出现什么情况-谈谈线程的生命周期和状态转移。"}},[t._v("#")]),t._v(" 第17讲｜一个线程两次调用 start() 方法会出现什么情况？谈谈线程的生命周期和状态转移。")]),t._v(" "),s("p",[t._v("Java 的线程是不允许启动两次的，第二次调用必然会抛出 IllegalThreadStateException，这是一种运行时异常，多次调用 start 被认为是编程错误。")]),t._v(" "),s("p",[t._v("线程状态(java.lang.Thread.State):")]),t._v(" "),s("p",[t._v("新建（NEW），表示线程被创建出来还没真正启动的状态，可以认为它是个 Java 内部状态。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("新建（NEW）")]),t._v("，表示线程被创建出来还没真正启动的状态，可以认为它是个 Java 内部状态。")]),t._v(" "),s("li",[s("strong",[t._v("就绪（RUNNABLE）")]),t._v("，表示该线程已经在 JVM 中执行，当然由于执行需要计算资源，它可能是正在运行，也可能还在等待系统分配给它 CPU 片段，在就绪队列里面排队。")]),t._v(" "),s("li",[t._v("在其他一些分析中，会额外区分一种状态 RUNNING，但是从 Java API 的角度，并不能表示出来。")]),t._v(" "),s("li",[s("strong",[t._v("阻塞（BLOCKED）")]),t._v("，这个状态和我们前面两讲介绍的同步非常相关，阻塞表示线程在等待 Monitor lock。比如，线程试图通过 synchronized 去获取某个锁，但是其他线程已经独占了，那么当前线程就会处于阻塞状态。")]),t._v(" "),s("li",[s("strong",[t._v("等待（WAITING）")]),t._v("，表示正在等待其他线程采取某些操作。一个常见的场景是类似生产者消费者模式，发现任务条件尚未满足，就让当前消费者线程等待（wait），另外的生产者线程去准备任务数据，然后通过类似 notify 等动作，通知消费线程可以继续工作了。Thread.join() 也会令线程进入等待状态。")]),t._v(" "),s("li",[s("strong",[t._v("计时等待（TIMED_WAIT）")]),t._v("，其进入条件和等待状态类似，但是调用的是存在超时条件的方法，比如 wait 或 join 等方法的指定超时版本，如下面示例：")]),t._v(" "),s("li",[s("strong",[t._v("终止（TERMINATED）")]),t._v("，不管是意外退出还是正常执行结束，线程已经完成使命，终止运行，也有人把这个状态叫作死亡。")])]),t._v(" "),s("h3",{attrs:{id:"线程是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程是什么"}},[t._v("#")]),t._v(" 线程是什么？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("操作系统的角度：线程被认为是最小的调度单元，一个进程有多个线程")])]),t._v(" "),s("li",[s("p",[t._v("任务的真正运作者，有自己的栈（Stack）、寄存器（Register）、本地存储（Thread Local）等")])]),t._v(" "),s("li",[s("p",[t._v("和进程内其他线程共享文件描述符、虚拟地址空间")])])]),t._v(" "),s("p",[t._v("具体实现中，线程还分为*内核线程**"),t._v("、"),s("em",[t._v("用户线程")]),t._v("*"),t._v("。")]),t._v(" "),s("p",[t._v("当前JVM ： 现在的模型是"),s("strong",[t._v("一对一映射")]),t._v("到操作系统"),s("strong",[t._v("内核线程")]),t._v("。")]),t._v(" "),s("p",[t._v("内部源码都是JNI")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPriority0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newPriority"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupt0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"线程状态转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程状态转换"}},[t._v("#")]),t._v(" 线程状态转换")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-10-e4595cfcccbe936fcf0f9030ad397382.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"为什么需要并发包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要并发包"}},[t._v("#")]),t._v(" 为什么需要并发包？")]),t._v(" "),s("p",[t._v("Thread 和 Object 的方法，听起来简单，但是实际应用中被证明"),s("strong",[t._v("非常晦涩、易错")]),t._v("，这也是为什么 Java 后来又引入了并发包。总的来说，有了并发包，大多数情况下，我们已经不再需要去调用 wait/notify 之类的方法了。")]),t._v(" "),s("h3",{attrs:{id:"守护线程-daemon-thread"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#守护线程-daemon-thread"}},[t._v("#")]),t._v(" 守护线程（Daemon Thread）")]),t._v(" "),s("p",[t._v("有的时候应用中需要一个长期驻留的服务程序，但是不希望其影响应用退出，就可以将其设置为守护线程，如果 JVM 发现只有守护线程存在时，将结束进程，具体可以参考下面代码段。注意，"),s("strong",[t._v("必须在线程启动之前设置。")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" daemonThread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndaemonThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDaemon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndaemonThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"threadlocal-线程本地变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-线程本地变量"}},[t._v("#")]),t._v(" ThreadLocal(线程本地变量)")]),t._v(" "),s("p",[t._v("Java 提供的一种"),s("strong",[t._v("保存线程私有信息")]),t._v("的机制，因为其在整个"),s("strong",[t._v("线程生命周期内有效")]),t._v("，所以可以方便地在一个线程关联的不同业务模块之间**传递信息*，比如事务 ID、Cookie 等上下文相关信息。")]),t._v(" "),s("p",[t._v("废弃项目的回收依赖于显式地触发，否则就要等待线程结束，进而回收相应 ThreadLocalMap！这就是很多 *"),s("em",[t._v("OOM 的来源")]),t._v("，所以通常都会建议，应用一定要自己负责 remove，并且不要和线程池配合，因为 worker 线程往往是不会退出的。")]),t._v(" "),s("p",[s("strong",[t._v("线程池一般不建议和thread local配合...")])]),t._v(" "),s("h2",{attrs:{id:"第18讲-什么情况下java程序会产生死锁-如何定位、修复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第18讲-什么情况下java程序会产生死锁-如何定位、修复"}},[t._v("#")]),t._v(" 第18讲 | 什么情况下Java程序会产生死锁？如何定位、修复？")]),t._v(" "),s("p",[t._v("死锁是一种特定的程序状态，在实体之间，由于循环依赖导致彼此一直处于等待之中，没有任何个体可以继续前进。死锁不仅仅是在线程之间会发生，存在资源独占的进程之间同样也可能出现死锁。通常来说，我们大多是聚焦在多线程场景中的死锁，指两个或多个线程之间，由于互相持有对方需要的锁，而永久处于阻塞的状态。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-10-d59a0eed6e578bf4624dd61bdbfacf13.png",alt:"image"}})]),t._v(" "),s("p",[t._v("定位问题四板斧")]),t._v(" "),s("p",[s("strong",[t._v("free  df.  jstack  jstat")])]),t._v(" "),s("p",[t._v("死锁代码")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeadLockSample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeadLockSample")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("first "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("second "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" obtained: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" first"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" obtained: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" second"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do nothing")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lockA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lockA"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lockB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lockB"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeadLockSample")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeadLockSample")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lockA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lockB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeadLockSample")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DeadLockSample")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thread2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lockB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lockA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"如何在编程中尽量预防死锁呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在编程中尽量预防死锁呢"}},[t._v("#")]),t._v(" 如何在编程中尽量预防死锁呢？")]),t._v(" "),s("ol",[s("li",[t._v("如果可能的话，尽量避免使用多个锁，并且只有需要时才持有锁")]),t._v(" "),s("li",[t._v("如果必须使用多个锁，尽量设计好锁的获取顺序")]),t._v(" "),s("li",[t._v("使用带超时的方法，为程序带来更多可控性。")])]),t._v(" "),s("h2",{attrs:{id:"第19讲-java并发包提供了哪些并发工具类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第19讲-java并发包提供了哪些并发工具类"}},[t._v("#")]),t._v(" 第19讲 | Java并发包提供了哪些并发工具类？")]),t._v(" "),s("ul",[s("li",[t._v("提供了比 synchronized 更加高级的各种同步结构，包括 "),s("strong",[t._v("CountDownLatch、CyclicBarrier、Semaphore")]),t._v(" 等，可以实现更加丰富的多线程操作，比如利用 Semaphore 作为资源控制器，限制同时进行工作的线程数量。")]),t._v(" "),s("li",[t._v("各种线程安全的容器，比如最常见的 "),s("strong",[t._v("ConcurrentHashMap、有序的 ConcurrentSkipListMap")]),t._v("，或者通过类似快照机制，实现线程安全的动态数组 CopyOnWriteArrayList 等。")]),t._v(" "),s("li",[t._v("各种并发队列实现，如各种 BlockingQueue 实现，比较典型的 "),s("strong",[t._v("ArrayBlockingQueue、 SynchronousQueue")]),t._v(" 或针对特定场景的 PriorityBlockingQueue 等。")]),t._v(" "),s("li",[t._v("强大的 "),s("strong",[t._v("Executor")]),t._v(" 框架，可以创建各种不同类型的线程池，调度任务运行等，绝大部分情况下，不再需要自己从头实现线程池和任务调度器。")])]),t._v(" "),s("h3",{attrs:{id:"semaphore信号量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#semaphore信号量"}},[t._v("#")]),t._v(" Semaphore信号量")]),t._v(" "),s("p",[t._v("它通过控制一定数量的允许（permit）的方式，来达到限制通用资源访问的目的。")]),t._v(" "),s("h3",{attrs:{id:"countdownlatch-和-cyclicbarrier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch-和-cyclicbarrier"}},[t._v("#")]),t._v(" CountDownLatch 和 CyclicBarrier")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("CountDownLatch")]),t._v(" 是"),s("strong",[t._v("不可以重置")]),t._v("的，所以"),s("strong",[t._v("无法重用")]),t._v("；而 CyclicBarrier 则没有这种限制，可以重用。")]),t._v(" "),s("li",[t._v("CountDownLatch 的基本操作组合是 **countDown/await。**调用 await 的线程阻塞等待 "),s("strong",[t._v("countDown")]),t._v(" 足够的次数，不管你是在一个线程还是多个线程里 countDown，只要次数足够即可。所以就像 Brain Goetz 说过的，"),s("em",[s("strong",[t._v("CountDownLatch 操作的是事件")])]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("CyclicBarrier")]),t._v(" 的基本操作组合，则就是 "),s("strong",[t._v("await")]),t._v("，当所有的伙伴（parties）都调用了 "),s("strong",[t._v("await")]),t._v("，才会继续进行任务*，"),s("strong",[t._v("并自动进行重置")]),t._v("。注意，正常情况下，CyclicBarrier 的重置都是自动发生的，如果我们调用 reset 方法，但还有线程在等待，就会导致等待线程被打扰，抛出 BrokenBarrierException 异常。")]),t._v(" "),s("li",[t._v("CyclicBarrier 侧重点是"),s("strong",[t._v("线程")]),t._v("，而不是"),s("strong",[t._v("调用事件")]),t._v("，它的典型应用场景是用来*"),s("strong",[t._v("等待并发线程结束")]),t._v("。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-10-8bb926900cc9db63c472e4e89d9ab60c.png",alt:"image"}})]),t._v(" "),s("p",[t._v("Map 放入或者获取的速度，而不在乎顺序，大多推荐使用 "),s("strong",[t._v("ConcurrentHashMap")]),t._v("，反之则使用 "),s("strong",[t._v("ConcurrentSkipListMap")]),t._v("；")]),t._v(" "),s("p",[t._v("如果我们需要对大量数据进行非常频繁地修改，"),s("strong",[t._v("ConcurrentSkipListMap")]),t._v(" 也可能表现出优势。")]),t._v(" "),s("h3",{attrs:{id:"为什么并发容器里面没有-concurrenttreemap-呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么并发容器里面没有-concurrenttreemap-呢"}},[t._v("#")]),t._v(" 为什么并发容器里面没有 ConcurrentTreeMap 呢？")]),t._v(" "),s("p",[t._v("这是因为 TreeMap 要实现"),s("strong",[t._v("高效的线程安全")]),t._v("是非常困难的，它的实现基于复杂的红黑树。为保证访问效率，当我们"),s("strong",[t._v("插入或删除节点时，会移动节点进行平衡操作")]),t._v("，这导致在并发场景中难以进行合理粒度的同步。而 "),s("strong",[t._v("SkipList")]),t._v(" 结构则要相对简单很多，通过"),s("strong",[t._v("层次结构提高访问速度")]),t._v("，虽然不够紧凑，空间使用有一定提高（O(nlogn)），但是在增删元素时线程安全的开销要好很多")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-10-c3dceb25c189ab256550fc6fb7896b39.png",alt:"image"}})]),t._v(" "),s("h3",{attrs:{id:"copyonwrite-到底是什么意思呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copyonwrite-到底是什么意思呢"}},[t._v("#")]),t._v(" CopyOnWrite 到底是什么意思呢？")]),t._v(" "),s("p",[t._v("它的原理是，任何修改操作，如 add、set、remove，都会拷贝原数组，修改后替换原来的数组，通过这种防御性的方式，实现另类的线程安全")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" elements "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" newElements "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      newElements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 替换")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newElements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"第20讲-并发包中的concurrentlinkedqueue和linkedblockingqueue有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第20讲-并发包中的concurrentlinkedqueue和linkedblockingqueue有什么区别"}},[t._v("#")]),t._v(" 第20讲 | 并发包中的ConcurrentLinkedQueue和LinkedBlockingQueue有什么区别？ ***")]),t._v(" "),s("p",[t._v("Concurrent 类型基于 "),s("strong",[t._v("lock-free")]),t._v("，在常见的多线程访问场景，一般可以提供较高吞吐量。")]),t._v(" "),s("p",[t._v("而 LinkedBlockingQueue 内部则是"),s("strong",[t._v("基于锁")]),t._v("，并提供了 "),s("strong",[t._v("BlockingQueue")]),t._v(" 的等待性方法。")]),t._v(" "),s("p",[t._v("java.util.concurrent 包提供的容器（Queue、List、Set）、Map，从命名上可以大概区分为 "),s("strong",[t._v("Concurrent")]),t._v("*、"),s("strong",[t._v("CopyOnWrite")]),t._v("和 "),s("strong",[t._v("Blocking")]),t._v("等三类")]),t._v(" "),s("ul",[s("li",[t._v("Concurrent 类型没有类似 CopyOnWrite 之类容器相对较重的修改开销")]),t._v(" "),s("li",[t._v("Concurrent 往往提供了较低的遍历一致性 遍历的时候容器发生修改，迭代器仍然可以继续进行遍历。")]),t._v(" "),s("li",[t._v("与弱一致性对应的，就是我介绍过的同步容器常见的行为“fail-fast”，也就是检测到容器在遍历过程中发生了修改，则抛出 ConcurrentModificationException，不再继续遍历。")]),t._v(" "),s("li",[t._v("弱一致性的另外一个体现是，size 等操作准确性是有限的 未必是 100% 准确。")]),t._v(" "),s("li",[t._v("读取的性能具有一定的不确定性。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://static.lovedata.net/20-11-11-f161aac8ce385005fdf088facbfcaed1.png",alt:"image"}})]),t._v(" "),s("p",[s("strong",[t._v("Blocking")]),t._v(" 意味着其提供了特定的等待性操作，获取时（take）等待元素进队，或者插入时（put）等待队列出现空位。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 获取并移除队列头结点，如果必要，其会等待直到队列出现元素\n…\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 插入元素，如果队列已满，则等待直到队列出现空闲空间\n   …\n */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),s("h3",{attrs:{id:"blockingqueue是否有界的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue是否有界的问题"}},[t._v("#")]),t._v(" BlockingQueue是否有界的问题")]),t._v(" "),s("ol",[s("li",[t._v("ArrayBlockingQueue 是最典型的的有界队列 内部是final 数组，初始化的时候指定容量。")]),t._v(" "),s("li",[t._v("LinkedBlockingQueue，容易被误解为"),s("strong",[t._v("无边界")]),t._v("，但其实其行为和内部代码都是基于有界的逻辑实现的，只不过如果我们没有在创建队列时就指定容量，那么其容量限制就自动被设置为 Integer.MAX_VALUE，成为了无界队列")]),t._v(" "),s("li",[t._v("SynchronousQueue，这是一个非常奇葩的队列实现，每个删除操作都要等待插入操作，反之每个插入操作也都要等待删除动作。那么这个队列的容量是多少呢？是 1 吗？其实不是的，其内部容量是 0")]),t._v(" "),s("li",[t._v("PriorityBlockingQueue 是无边界的优先队列，虽然严格意义上来讲，其大小总归是要受系统资源影响。")]),t._v(" "),s("li",[t._v("DelayedQueue 和 LinkedTransferQueue 同样是无边界的队列。对于无边界的队列，有一个自然的结果，就是 put 操作永远也不会发生其他 BlockingQueue 的那种等待情况。")])]),t._v(" "),s("p",[t._v("LinkedBlockingQueue")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Lock held by take, poll, etc */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" takeLock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Wait queue for waiting takes */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" notEmpty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" takeLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Lock held by put, offer, etc */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" putLock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Wait queue for waiting puts */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Condition")]),t._v(" notFull "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" putLock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCondition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),s("ul",[s("li",[t._v("考虑应用场景中对队列边界的要求。ArrayBlockingQueue 是有明确的容量限制的，而 LinkedBlockingQueue 则取决于我们是否在创建时指定，SynchronousQueue 则干脆不能缓存任何元素。")]),t._v(" "),s("li",[t._v("从空间利用角度，数组结构的 ArrayBlockingQueue 要比 LinkedBlockingQueue 紧凑，因为其不需要创建所谓节点，但是其初始分配阶段就需要一段连续的空间，所以初始内存需求更大。")]),t._v(" "),s("li",[t._v("通用场景中，LinkedBlockingQueue 的吞吐量一般优于 ArrayBlockingQueue，因为它实现了"),s("strong",[t._v("更加细粒度的锁操作")]),t._v("*"),t._v("。ArrayBlockingQueue 实现比较简单，性能更好预测，属于表现稳定的“选手”。")]),t._v(" "),s("li",[t._v("如果我们需要实现的是"),s("strong",[t._v("两个线程之间接力性（handoff）的场景")]),t._v("，按照专栏上一讲的例子，你可能会选择 "),s("strong",[t._v("CountDownLatch")]),t._v("，但是SynchronousQueue也是完美符合这种场景的，"),s("strong",[t._v("而且线程间协调和数据传输统一起来")]),t._v("，代码更加规范。")]),t._v(" "),s("li",[t._v("可能令人意外的是，很多时候 SynchronousQueue 的性能表现，往往大大超过其他实现，尤其是在队列元素较小的场景。")])]),t._v(" "),s("h3",{attrs:{id:"阻塞队列与非阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列与非阻塞队列"}},[t._v("#")]),t._v(" 阻塞队列与非阻塞队列")]),t._v(" "),s("h5",{attrs:{id:"非阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞队列"}},[t._v("#")]),t._v(" 非阻塞队列：")]),t._v(" "),s("p",[t._v("也就是一般的队列，没有阻塞队列的两个阻塞功能。其主要方法如下")]),t._v(" "),s("ul",[s("li",[t._v("boolean add(E e)：将元素e插入到队列末尾，插入成功，返回true；插入失败（即队列已满），抛出异常；")]),t._v(" "),s("li",[t._v("boolean offer(E e)：将元素e插入到队列末尾，插入成功，则返回true；插入失败（即队列已满），返回false；")]),t._v(" "),s("li",[t._v("E remove()：移除队首元素，若移除成功，则返回true；移除失败（队列为空），则会抛出异常；")]),t._v(" "),s("li",[t._v("E poll()：获取队首元素并移除，若队列不为空，则返回队首元素；否则返回null；")]),t._v(" "),s("li",[t._v("E element()：获取队首元素并不移除元素，若队列不为空，则返回队首元素；否则抛出异常;")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.baidu.com/s?wd=peek&tn=24004469_oem_dg&rsv_dl=gh_pl_sl_csd",target:"_blank",rel:"noopener noreferrer"}},[t._v("E peek"),s("OutboundLink")],1),t._v("()：获取队首元素并不移除元素，若队列不为空，则返回队首元素；否则返回null;")])]),t._v(" "),s("h4",{attrs:{id:"阻塞队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列"}},[t._v("#")]),t._v(" 阻塞队列")]),t._v(" "),s("p",[t._v("队列一般都有着两个阻塞操作，即插入与取出。")]),t._v(" "),s("p",[t._v("当队列满时，会阻塞元素的插入，直到队列有空闲时停止阻塞，新元素才可以继续插入。")]),t._v(" "),s("p",[t._v("当队列为空时，移除元素的线程会一直被阻塞等待，直到队列中有元素时才可以继续取出。")]),t._v(" "),s("p",[s("strong",[t._v("除拥有普通队列的方法之外，阻塞队列提供了另外4个常用的方法：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("put(E e)：向队尾插入元素，若队列已满，则被阻塞等待，直到有空闲才继续插入。")])]),t._v(" "),s("li",[s("p",[t._v("take()：从队首取出元素，若队列为空，则被阻塞等待，直到有元素才继续取出。")])]),t._v(" "),s("li",[s("p",[t._v("offer(E e,long timeout, TimeUnit unit)：向队尾插入元素，若队列已满，则计时等待，当时间期限达到时，若队列还是满的，则返回false；若等待在期限内，队列空闲，则插入成功，返回true；")])]),t._v(" "),s("li",[s("p",[t._v("poll(long timeout, TimeUnit unit)：从队首取出元素，如果队列空，则计时等待，当时间期限达到时，若队列还是空的，则返回null；若等待在期限内，队列中有元素，否则返回取得的元素；")])])]),t._v(" "),s("h3",{attrs:{id:"二者区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二者区别"}},[t._v("#")]),t._v(" 二者区别")]),t._v(" "),s("p",[t._v("首先二者都是线程安全的得队列，都可以用于生产与消费模型的场景。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th"),t._v(" "),s("th",[t._v("ConcurrentLinkedQueue")]),t._v(" "),s("th",[t._v("LinkedBlockingQueue")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("线程安全")]),t._v(" "),s("td",[t._v("安全")]),t._v(" "),s("td",[t._v("安全")])]),t._v(" "),s("tr",[s("td",[t._v("阻塞")]),t._v(" "),s("td",[t._v("阻塞")]),t._v(" "),s("td",[t._v("不阻塞")])]),t._v(" "),s("tr",[s("td",[t._v("实现")]),t._v(" "),s("td",[t._v("ReentranceLock")]),t._v(" "),s("td",[t._v("CAS+自旋锁")])])])]),t._v(" "),s("h2",{attrs:{id:"第21讲-java并发类库提供的线程池有哪几种-分别有什么特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第21讲-java并发类库提供的线程池有哪几种-分别有什么特点"}},[t._v("#")]),t._v(" 第21讲 | Java并发类库提供的线程池有哪几种？ 分别有什么特点？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("[Java线程池的四种用法与使用场景](https://juejin.im/post/6844904020792836103)\n")])])]),s("ul",[s("li",[t._v("newCachedThreadPool()，它是一种用来处理大量短时间工作任务的线程池，具有几个鲜明特点："),s("strong",[t._v("它会试图缓存线程并重用")]),t._v("，当无缓存线程可用时，就会创建新的"),s("strong",[t._v("工作线程")]),t._v("；如果线程闲置的时间超过 60 秒，则被终止并移出缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用 SynchronousQueue 作为工作队列。\n"),s("ul",[s("li",[s("strong",[t._v("不足")]),t._v("：这种方式虽然可以根据业务场景自动的扩展线程数来处理我们的业务，但是最多需要多少个线程同时处理缺是我们无法控制的；")]),t._v(" "),s("li",[s("strong",[t._v("优点")]),t._v("：如果当第二个任务开始，第一个任务已经执行结束，那么第二个任务会复用第一个任务创建的线程，并不会重新创建新的线程，提高了线程的复用率；")])])]),t._v(" "),s("li",[t._v("newFixedThreadPool(int nThreads)，重用指定数目（nThreads）的线程，其背后使用的是无界的工作队列，任何时候最多有 nThreads 个工作线程是活动的。这意味着，如果任务数量超过了活动队列数目，将在工作队列中等待空闲线程出现；如果有工作线程退出，将会有新的工作线程被创建，以补足指定的数目 nThreads。\n"),s("ul",[s("li",[t._v("优点： newFixedThreadPool的线程数是可以进行控制的，因此我们可以通过控制最大线程来使我们的服务器打到最大的使用率，同事又可以保证及时流量突然增大也不会占用服务器过多的资源")])])]),t._v(" "),s("li",[t._v("newSingleThreadExecutor()，它的特点在于工作线程数目被限制为 1，操作一个无界的工作队列，所以它保证了所有任务的都是被顺序执行，最多会有一个任务处于活动状态，并且不允许使用者改动线程池实例，因此可以避免其改变线程数目。")]),t._v(" "),s("li",[t._v("newSingleThreadScheduledExecutor() 和 newScheduledThreadPool(int corePoolSize)，创建的是个 ScheduledExecutorService，可以进行定时或周期性的工作调度，区别在于单一工作线程还是多个工作线程。")]),t._v(" "),s("li",[t._v("newWorkStealingPool(int parallelism)，这是一个经常被人忽略的线程池，Java 8 才加入这个创建方法，其内部会构建ForkJoinPool，利用Work-Stealing算法，并行地处理任务，不保证处理顺序。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);